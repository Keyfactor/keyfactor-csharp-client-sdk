
/******************************************************************************/
/* Copyright 2022 Keyfactor                                                   */
/* Licensed under the Apache License, Version 2.0 (the "License"); you may    */
/* not use this file except in compliance with the License.  You may obtain a */
/* copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless */
/* required by applicable law or agreed to in writing, software distributed   */
/* under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES   */
/* OR CONDITIONS OF ANY KIND, either express or implied. See the License for  */
/* the specific language governing permissions and limitations under the      */
/* License.                                                                   */
/******************************************************************************/

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Keyfactor
{
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Client
    {
        private string _baseUrl;
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        private string x_keyfactor_requested_with = "APIClient";
        private string x_keyfactor_api_version = "1";

        public Client(string baseURL, string BasicAuthToken, System.Net.Http.HttpClient? httpClient = null)
        {
            _baseUrl = baseURL;
            _httpClient = httpClient ?? new System.Net.Http.HttpClient();
            _httpClient.DefaultRequestHeaders.Add("Authorization", $"Basic {BasicAuthToken}");
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                settings.DateFormatString = "yyyy-MM-dd HH:mm:ss";
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Returns details for a single agent, specified by ID</summary>
        /// <param name="id">Agent Id to Search</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AgentResponse> GetAgentDetailAsync(System.Guid id)
        {
            return GetAgentDetailAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns details for a single agent, specified by ID</summary>
        /// <param name="id">Agent Id to Search</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AgentResponse> GetAgentDetailAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgentResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AgentResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all agents according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentResponse>> GetAgentsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending? pq_sortAscending)
        {
            return GetAgentsAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all agents according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentResponse>> GetAgentsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AgentResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<AgentResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Reset a list of agents</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">List of Agent Ids to Reset</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Reset0Async(System.Collections.Generic.IEnumerable<string> body)
        {
            return Reset0Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reset a list of agents</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">List of Agent Ids to Reset</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Reset0Async(System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents/Reset");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Approve a list of agents</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">List of Agent Ids to Approve</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ApproveAsync(System.Collections.Generic.IEnumerable<string> body)
        {
            return ApproveAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Approve a list of agents</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">List of Agent Ids to Approve</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ApproveAsync(System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents/Approve");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Disapprove a list of agents</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">List of Agent Ids to Disapprove</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DisapproveAsync(System.Collections.Generic.IEnumerable<string> body)
        {
            return DisapproveAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Disapprove a list of agents</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">List of Agent Ids to Disapprove</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DisapproveAsync(System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents/Disapprove");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Reset an agent to a new state</summary>
        /// <param name="id">Guid Id of Agent to reset</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Reset1Async(System.Guid id)
        {
            return Reset1Async(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reset an agent to a new state</summary>
        /// <param name="id">Guid Id of Agent to reset</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Reset1Async(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents/{id}/Reset");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Schedules a job on the agent to retrieve log files</summary>
        /// <param name="id">Guid Id of the agent to schedule the job for.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task FetchLogsAsync(System.Guid id)
        {
            return FetchLogsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Schedules a job on the agent to retrieve log files</summary>
        /// <param name="id">Guid Id of the agent to schedule the job for.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task FetchLogsAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents/{id}/FetchLogs");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update the AuthCertificateReenrollment value for an agent to request or require (or unset the request) the agent 
        /// to enroll for a new client authentication certificate on its next registration.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Object containing orchestrator ids and the new status those orchestrators should have</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UpdateOrchestratorAuthCertificateReenrollmentResponse> SetAuthCertificateReenrollmentAsync(UpdateOrchestratorAuthCertificateReenrollmentRequest body)
        {
            return SetAuthCertificateReenrollmentAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update the AuthCertificateReenrollment value for an agent to request or require (or unset the request) the agent 
        /// to enroll for a new client authentication certificate on its next registration.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Object containing orchestrator ids and the new status those orchestrators should have</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UpdateOrchestratorAuthCertificateReenrollmentResponse> SetAuthCertificateReenrollmentAsync(UpdateOrchestratorAuthCertificateReenrollmentRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Agents/SetAuthCertificateReenrollment");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateOrchestratorAuthCertificateReenrollmentResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(UpdateOrchestratorAuthCertificateReenrollmentResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }


        /// <summary>Returns an agent blueprint according to the provided filter and output parameters</summary>
        /// <param name="id">Returns a single agent blueprint associated with the provided id</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AgentBlueprintResponse> GetAgentBlueprintAsync(System.Guid id)
        {
            return GetAgentBlueprintAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns an agent blueprint according to the provided filter and output parameters</summary>
        /// <param name="id">Returns a single agent blueprint associated with the provided id</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AgentBlueprintResponse> GetAgentBlueprintAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AgentBluePrint/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgentBlueprintResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AgentBlueprintResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes an agent blueprint by its Keyfactor identifier</summary>
        /// <param name="id">Keyfactor agent blueprint identifier (GUID)</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteBlueprintAsync(System.Guid id)
        {
            return DeleteBlueprintAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes an agent blueprint by its Keyfactor identifier</summary>
        /// <param name="id">Keyfactor agent blueprint identifier (GUID)</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteBlueprintAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AgentBluePrint/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all agent blueprints according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentBlueprintResponse>> GetAgentBlueprintsAsync(int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending2? pq_sortAscending)
        {
            return GetAgentBlueprintsAsync(pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all agent blueprints according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentBlueprintResponse>> GetAgentBlueprintsAsync(int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending2? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AgentBluePrint?");
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AgentBlueprintResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<AgentBlueprintResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets the agent blueprint scheduled jobs</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentBlueprintJobsResponse>> GetBlueprintJobsAsync(System.Guid id, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending3? pq_sortAscending)
        {
            return GetBlueprintJobsAsync(id, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the agent blueprint scheduled jobs</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentBlueprintJobsResponse>> GetBlueprintJobsAsync(System.Guid id, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending3? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AgentBluePrint/{id}/Jobs?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AgentBlueprintJobsResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<AgentBlueprintJobsResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets the agent blueprint certificate stores</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentBlueprintStoresResponse>> GetBlueprintStoresAsync(System.Guid id, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending4? pq_sortAscending)
        {
            return GetBlueprintStoresAsync(id, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the agent blueprint certificate stores</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentBlueprintStoresResponse>> GetBlueprintStoresAsync(System.Guid id, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending4? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AgentBluePrint/{id}/Stores?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AgentBlueprintStoresResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<AgentBlueprintStoresResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Applies the selected agent blueprint to the provided agents</summary>
        /// <param name="templateId">Agent blueprint to apply to the agents</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Agents to apply the blueprints to</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ApplyBlueprintAsync(System.Guid templateId, System.Collections.Generic.IEnumerable<System.Guid> body)
        {
            return ApplyBlueprintAsync(templateId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Applies the selected agent blueprint to the provided agents</summary>
        /// <param name="templateId">Agent blueprint to apply to the agents</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Agents to apply the blueprints to</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ApplyBlueprintAsync(System.Guid templateId, System.Collections.Generic.IEnumerable<System.Guid> body, System.Threading.CancellationToken cancellationToken)
        {
            if (templateId == null)
                throw new System.ArgumentNullException("templateId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AgentBluePrint/ApplyBlueprint?");
            urlBuilder_.Append(System.Uri.EscapeDataString("templateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Generates an agent blueprint from the provided agents</summary>
        /// <param name="agentId">Agent to generate a blueprint from</param>
        /// <param name="name">Name of the new agent blueprint</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AgentBlueprintResponse> GenerateBlueprintAsync(System.Guid agentId, string name)
        {
            return GenerateBlueprintAsync(agentId, name, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Generates an agent blueprint from the provided agents</summary>
        /// <param name="agentId">Agent to generate a blueprint from</param>
        /// <param name="name">Name of the new agent blueprint</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AgentBlueprintResponse> GenerateBlueprintAsync(System.Guid agentId, string name, System.Threading.CancellationToken cancellationToken)
        {
            if (agentId == null)
                throw new System.ArgumentNullException("agentId");

            if (name == null)
                throw new System.ArgumentNullException("name");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AgentBluePrint/GenerateBluePrint?");
            urlBuilder_.Append(System.Uri.EscapeDataString("agentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(agentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgentBlueprintResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AgentBlueprintResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns a single agent pool associated with the provided id</summary>
        /// <param name="id">Keyfactor (GUID) identifier of the agent pool</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AgentPool> GetAgentPoolByIdAsync(System.Guid id)
        {
            return GetAgentPoolByIdAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a single agent pool associated with the provided id</summary>
        /// <param name="id">Keyfactor (GUID) identifier of the agent pool</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AgentPool> GetAgentPoolByIdAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AgentPools/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgentPool>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AgentPool);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes the agent pool associated with the provided id</summary>
        /// <param name="id">Keyfactor identifier (GUID) of the agent pool</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteAgentPoolAsync(System.Guid id)
        {
            return DeleteAgentPoolAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the agent pool associated with the provided id</summary>
        /// <param name="id">Keyfactor identifier (GUID) of the agent pool</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteAgentPoolAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AgentPools/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all agent pools according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentPool>> GetAgentPoolsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending5? pq_sortAscending)
        {
            return GetAgentPoolsAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all agent pools according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentPool>> GetAgentPoolsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending5? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AgentPools?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AgentPool>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<AgentPool>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates an existing agent pool with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Agent pool properties to be applied to the existing pool</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AgentPool> UpdateAgentPoolAsync(AgentPool body)
        {
            return UpdateAgentPoolAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates an existing agent pool with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Agent pool properties to be applied to the existing pool</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AgentPool> UpdateAgentPoolAsync(AgentPool body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AgentPools");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgentPool>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AgentPool);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates an agent pool with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Agent pool properties to be applied to the new pool</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AgentPool> CreateAgentPoolAsync(AgentPool body)
        {
            return CreateAgentPoolAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates an agent pool with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Agent pool properties to be applied to the new pool</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AgentPool> CreateAgentPoolAsync(AgentPool body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AgentPools");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgentPool>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AgentPool);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all agents for the default agent pool</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentPoolAgent>> GetDefaultAgentPoolAgentsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending6? pq_sortAscending)
        {
            return GetDefaultAgentPoolAgentsAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all agents for the default agent pool</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AgentPoolAgent>> GetDefaultAgentPoolAgentsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending6? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AgentPools/Agents?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AgentPoolAgent>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<AgentPoolAgent>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns the audit log entry associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the audit entry to be returned</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GetAuditLogAsync(int id)
        {
            return GetAuditLogAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the audit log entry associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the audit entry to be returned</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> GetAuditLogAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Audit/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Validates the audit log entry associated with the provided keyfactor id</summary>
        /// <param name="id">Keyfactor identifier of the audit log entry</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<bool> ValidateAuditLogAsync(int id)
        {
            return ValidateAuditLogAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Validates the audit log entry associated with the provided keyfactor id</summary>
        /// <param name="id">Keyfactor identifier of the audit log entry</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<bool> ValidateAuditLogAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Audit/{id}/Validate");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(bool);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all audit log entries according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuditLogEntry>> GetAuditLogsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending7? pq_sortAscending)
        {
            return GetAuditLogsAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all audit log entries according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuditLogEntry>> GetAuditLogsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending7? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Audit?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AuditLogEntry>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<AuditLogEntry>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns a Comma Separated file containing the audit log entries according to the provided filter</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> DownloadCSVAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending8? pq_sortAscending)
        {
            return DownloadCSVAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a Comma Separated file containing the audit log entries according to the provided filter</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> DownloadCSVAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending8? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Audit/Download?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns the audit log entry associated with the provided keyfactor id</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuditLogEntry>> GetRelatedEntitiesAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending9? pq_sortAscending)
        {
            return GetRelatedEntitiesAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the audit log entry associated with the provided keyfactor id</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuditLogEntry>> GetRelatedEntitiesAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending9? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Audit/RelatedEntities?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AuditLogEntry>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<AuditLogEntry>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Gets the list of Security Identities and which permissions they have on the given certificate.</summary>
        /// <param name="id">The Id of the certificate permissions are being checked on</param>
        /// <param name="collectionId">The Id of the collection the certificate belongs in. Defaults to no collection</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificatePermissions> GetCertificateSecurityAsync(int id, int? collectionId)
        {
            return GetCertificateSecurityAsync(id, collectionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the list of Security Identities and which permissions they have on the given certificate.</summary>
        /// <param name="id">The Id of the certificate permissions are being checked on</param>
        /// <param name="collectionId">The Id of the collection the certificate belongs in. Defaults to no collection</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificatePermissions> GetCertificateSecurityAsync(int id, int? collectionId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/{id}/Security?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificatePermissions>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificatePermissions);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Validates the certificate chain can be built.</summary>
        /// <param name="id">The Id of the certificate being checked</param>
        /// <param name="collectionId">An optional parameter for the collectin Id the certificate is in.  Defaults to no collection</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateValidationResponse> ValidateCertificateAsync(int id, int? collectionId)
        {
            return ValidateCertificateAsync(id, collectionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Validates the certificate chain can be built.</summary>
        /// <param name="id">The Id of the certificate being checked</param>
        /// <param name="collectionId">An optional parameter for the collectin Id the certificate is in.  Defaults to no collection</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateValidationResponse> ValidateCertificateAsync(int id, int? collectionId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/{id}/Validate?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateValidationResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateValidationResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns a list of locations the certificate is in</summary>
        /// <param name="id">Keyfactor certificate identifier</param>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateLocationsResponse> GetCertificateLocationsAsync(int id, int? collectionId)
        {
            return GetCertificateLocationsAsync(id, collectionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a list of locations the certificate is in</summary>
        /// <param name="id">Keyfactor certificate identifier</param>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateLocationsResponse> GetCertificateLocationsAsync(int id, int? collectionId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/Locations/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateLocationsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateLocationsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Audit identity permissions for certificate</summary>
        /// <param name="id">The Id of the certificate being checked</param>
        /// <param name="collectionId">An optional parameter for the collectin Id the certificate is in.  Defaults to no collection</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateIdentityAuditResponse>> IdentityAuditAsync(int id, int? collectionId)
        {
            return IdentityAuditAsync(id, collectionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Audit identity permissions for certificate</summary>
        /// <param name="id">The Id of the certificate being checked</param>
        /// <param name="collectionId">An optional parameter for the collectin Id the certificate is in.  Defaults to no collection</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateIdentityAuditResponse>> IdentityAuditAsync(int id, int? collectionId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/IdentityAudit/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CertificateIdentityAuditResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CertificateIdentityAuditResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns a single certificate that matches the id</summary>
        /// <param name="id">Keyfactor certificate identifier</param>
        /// <param name="includeLocations">Include locations data for the certificate to be returned</param>
        /// <param name="includeMetadata">Include metadata for the certificate to be returned</param>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateRetrievalResponse> GetCertificateAsync(int id, bool? includeLocations, bool? includeMetadata, int? collectionId, int? verbose)
        {
            return GetCertificateAsync(id, includeLocations, includeMetadata, collectionId, verbose, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a single certificate that matches the id</summary>
        /// <param name="id">Keyfactor certificate identifier</param>
        /// <param name="includeLocations">Include locations data for the certificate to be returned</param>
        /// <param name="includeMetadata">Include metadata for the certificate to be returned</param>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateRetrievalResponse> GetCertificateAsync(int id, bool? includeLocations, bool? includeMetadata, int? collectionId, int? verbose, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeLocations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeLocations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeLocations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMetadata != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMetadata") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMetadata, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (verbose != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("verbose") + "=").Append(System.Uri.EscapeDataString(ConvertToString(verbose, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateRetrievalResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateRetrievalResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes a persisted certificate by its unique id as well as the stored private key (if present) associated with it</summary>
        /// <param name="id">Keyfactor identifier of the certificate record</param>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCertificateAsync(int id, int? collectionId)
        {
            return DeleteCertificateAsync(id, collectionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a persisted certificate by its unique id as well as the stored private key (if present) associated with it</summary>
        /// <param name="id">Keyfactor identifier of the certificate record</param>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCertificateAsync(int id, int? collectionId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Compares the metadata value provided with the metadata value associated with the specified certificate</summary>
        /// <param name="certificateId">Certificate identifier</param>
        /// <param name="metadataFieldName">Metadata field being compared</param>
        /// <param name="value">Value to compare against</param>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<bool> CompareMetadataAsync(int certificateId, string metadataFieldName, string value, int? collectionId)
        {
            return CompareMetadataAsync(certificateId, metadataFieldName, value, collectionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Compares the metadata value provided with the metadata value associated with the specified certificate</summary>
        /// <param name="certificateId">Certificate identifier</param>
        /// <param name="metadataFieldName">Metadata field being compared</param>
        /// <param name="value">Value to compare against</param>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<bool> CompareMetadataAsync(int certificateId, string metadataFieldName, string value, int? collectionId, System.Threading.CancellationToken cancellationToken)
        {
            if (certificateId == null)
                throw new System.ArgumentNullException("certificateId");

            if (metadataFieldName == null)
                throw new System.ArgumentNullException("metadataFieldName");

            if (value == null)
                throw new System.ArgumentNullException("value");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/Metadata/Compare?");
            urlBuilder_.Append(System.Uri.EscapeDataString("certificateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(certificateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("metadataFieldName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(metadataFieldName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("value") + "=").Append(System.Uri.EscapeDataString(ConvertToString(value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(bool);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets the history of operations on a certificate</summary>
        /// <param name="id">The Id of the certificate</param>
        /// <param name="collectionId">The collection the certificate could be in.  Defaults to no collection.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateOperation>> CertificateHistoryAsync(int id, int? collectionId, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending10? query_sortAscending)
        {
            return CertificateHistoryAsync(id, collectionId, query_pageReturned, query_returnLimit, query_sortField, query_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the history of operations on a certificate</summary>
        /// <param name="id">The Id of the certificate</param>
        /// <param name="collectionId">The collection the certificate could be in.  Defaults to no collection.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateOperation>> CertificateHistoryAsync(int id, int? collectionId, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending10? query_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/{id}/History?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CertificateOperation>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CertificateOperation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all certificates according to the provided filter and output parameters</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="includeLocations">Include locations data for the certificates to be returned</param>
        /// <param name="includeMetadata">Include metadata for the certificates to be returned</param>
        /// <param name="includeHasPrivateKey">Include whether the certificates to be returned have private keys stored in the Keyfactor database</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="pq_includeRevoked">Select 'true' to include revoked certificates in the results</param>
        /// <param name="pq_includeExpired">Select 'true' to include expired certificates in the results</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateRetrievalResponse>> QueryCertificatesAsync(int? collectionId, bool? includeLocations, bool? includeMetadata, bool? includeHasPrivateKey, int? verbose, string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending11? pq_sortAscending, bool? pq_includeRevoked, bool? pq_includeExpired)
        {
            return QueryCertificatesAsync(collectionId, includeLocations, includeMetadata, includeHasPrivateKey, verbose, pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, pq_includeRevoked, pq_includeExpired, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all certificates according to the provided filter and output parameters</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="includeLocations">Include locations data for the certificates to be returned</param>
        /// <param name="includeMetadata">Include metadata for the certificates to be returned</param>
        /// <param name="includeHasPrivateKey">Include whether the certificates to be returned have private keys stored in the Keyfactor database</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="pq_includeRevoked">Select 'true' to include revoked certificates in the results</param>
        /// <param name="pq_includeExpired">Select 'true' to include expired certificates in the results</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateRetrievalResponse>> QueryCertificatesAsync(int? collectionId, bool? includeLocations, bool? includeMetadata, bool? includeHasPrivateKey, int? verbose, string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending11? pq_sortAscending, bool? pq_includeRevoked, bool? pq_includeExpired, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates?");
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeLocations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeLocations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeLocations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMetadata != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMetadata") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMetadata, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHasPrivateKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeHasPrivateKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeHasPrivateKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (verbose != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("verbose") + "=").Append(System.Uri.EscapeDataString(ConvertToString(verbose, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_includeRevoked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.includeRevoked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_includeRevoked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_includeExpired != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.includeExpired") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_includeExpired, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CertificateRetrievalResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CertificateRetrievalResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes multiple persisted certificates by their unique ids</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The array of ids for certificate that are to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCertificatesAsync(int? collectionId, System.Collections.Generic.IEnumerable<int> body)
        {
            return DeleteCertificatesAsync(collectionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes multiple persisted certificates by their unique ids</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The array of ids for certificate that are to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCertificatesAsync(int? collectionId, System.Collections.Generic.IEnumerable<int> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates?");
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates the metadata for the certificate associated with the identifier provided</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Contains the Keyfactor certificate identifier and the metadata to be updated</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdateMetadataAsync(int? collectionId, MetadataUpdateRequest body)
        {
            return UpdateMetadataAsync(collectionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the metadata for the certificate associated with the identifier provided</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Contains the Keyfactor certificate identifier and the metadata to be updated</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateMetadataAsync(int? collectionId, MetadataUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/Metadata?");
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates the metadata for certificates associated with the certificate identifiers or query provided</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Contains the Keyfactor certificate identifier and the metadata to be updated</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdateAllMetadataAsync(int? collectionId, MetadataAllUpdateRequest body)
        {
            return UpdateAllMetadataAsync(collectionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the metadata for certificates associated with the certificate identifiers or query provided</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Contains the Keyfactor certificate identifier and the metadata to be updated</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateAllMetadataAsync(int? collectionId, MetadataAllUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/Metadata/All?");
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Imports the provided certificate into the Keyfactor instance, including any provided associated data</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Request containing the base 64 encoded string and related certificate information, such as certificate stores, metadata, and password</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateImportResponseModel> PostImportCertificateAsync(CertificateImportRequestModel body)
        {
            return PostImportCertificateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Imports the provided certificate into the Keyfactor instance, including any provided associated data</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Request containing the base 64 encoded string and related certificate information, such as certificate stores, metadata, and password</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateImportResponseModel> PostImportCertificateAsync(CertificateImportRequestModel body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/Import");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateImportResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateImportResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Revokes the certificates associated with the provided identifiers and associates the provided data with the revocation</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Contains the Keyfactor certificate identifiers and revocation data</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RevocationResponse> RevokeAsync(RevokeCertificateRequest body)
        {
            return RevokeAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Revokes the certificates associated with the provided identifiers and associates the provided data with the revocation</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Contains the Keyfactor certificate identifiers and revocation data</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RevocationResponse> RevokeAsync(RevokeCertificateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/Revoke");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RevocationResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RevocationResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns the public information of the certificate</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The certificate to analyze</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateDetails>> AnalyzeCertAsync(AnalyzeCertificateRequest body)
        {
            return AnalyzeCertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the public information of the certificate</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The certificate to analyze</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateDetails>> AnalyzeCertAsync(AnalyzeCertificateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/Analyze");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CertificateDetails>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CertificateDetails>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Recovers the persisted certificate associated with the provided query</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Query to filter the certificate to be recovered</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RecoveryResponse> RecoverCertificateAsync(int? collectionId, CertificateRecoveryRequest body)
        {
            return RecoverCertificateAsync(collectionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Recovers the persisted certificate associated with the provided query</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Query to filter the certificate to be recovered</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RecoveryResponse> RecoverCertificateAsync(int? collectionId, CertificateRecoveryRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/Recover?");
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RecoveryResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RecoveryResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Downloads the persisted certificate associated with the provided query</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Query to filter the certificate to be recovered</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateDownloadResponse> DownloadCertificateAsync(int? collectionId, CertificateDownloadRequest body)
        {
            return DownloadCertificateAsync(collectionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Downloads the persisted certificate associated with the provided query</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Query to filter the certificate to be recovered</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateDownloadResponse> DownloadCertificateAsync(int? collectionId, CertificateDownloadRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/Download?");
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateDownloadResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateDownloadResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Revokes the certificates associated with the provided query and Collection Id and associates the provided data with the revocation</summary>
        /// <param name="collectionId">A collection Id to be used for permissions and part of the query to revoke certificates</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Contains the Keyfactor Query and revocation data</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RevocationResponse> RevokeAllAsync(int? collectionId, RevokeAllCertificatesRequest body)
        {
            return RevokeAllAsync(collectionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Revokes the certificates associated with the provided query and Collection Id and associates the provided data with the revocation</summary>
        /// <param name="collectionId">A collection Id to be used for permissions and part of the query to revoke certificates</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Contains the Keyfactor Query and revocation data</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RevocationResponse> RevokeAllAsync(int? collectionId, RevokeAllCertificatesRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/RevokeAll?");
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RevocationResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RevocationResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes multiple persisted certificate entities selected by a given query</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Query by which certificates should be filtered for deletion</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteByQueryAsync(int? collectionId, string body)
        {
            return DeleteByQueryAsync(collectionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes multiple persisted certificate entities selected by a given query</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Query by which certificates should be filtered for deletion</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteByQueryAsync(int? collectionId, string body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/Query?");
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes the persisted private keys of multiple certificates by the unique ids of the Certificates</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Keyfactor identifiers of the cetficiates for which the associated private keys should be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeletePrivateKeys0Async(int? collectionId, System.Collections.Generic.IEnumerable<int> body)
        {
            return DeletePrivateKeys0Async(collectionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the persisted private keys of multiple certificates by the unique ids of the Certificates</summary>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Keyfactor identifiers of the cetficiates for which the associated private keys should be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeletePrivateKeys0Async(int? collectionId, System.Collections.Generic.IEnumerable<int> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/PrivateKey?");
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes the persisted private key of the certificate associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifier of the certificate for which the associated private key should be deleted</param>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeletePrivateKeys1Async(int id, int? collectionId)
        {
            return DeletePrivateKeys1Async(id, collectionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the persisted private key of the certificate associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifier of the certificate for which the associated private key should be deleted</param>
        /// <param name="collectionId">Optional certificate collection identifier used to ensure user access to the certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeletePrivateKeys1Async(int id, int? collectionId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Certificates/PrivateKey/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns details for a single CA, specified by ID</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateAuthorityResponse> GetCaAsync(int id)
        {
            return GetCaAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns details for a single CA, specified by ID</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateAuthorityResponse> GetCaAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateAuthority/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateAuthorityResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateAuthorityResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes a CertificateAuthority from the system, specified by ID</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCAAsync(int id)
        {
            return DeleteCAAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a CertificateAuthority from the system, specified by ID</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCAAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateAuthority/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all certificate authorities</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateAuthorityResponse>> GetCasAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending12? pq_sortAscending)
        {
            return GetCasAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all certificate authorities</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateAuthorityResponse>> GetCasAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending12? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateAuthority?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CertificateAuthorityResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CertificateAuthorityResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates a CertificateAuthority object</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateAuthorityResponse> UpdateCAAsync(CertificateAuthorityRequest body)
        {
            return UpdateCAAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a CertificateAuthority object</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateAuthorityResponse> UpdateCAAsync(CertificateAuthorityRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateAuthority");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateAuthorityResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateAuthorityResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a new CertificateAuthority object</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateAuthorityResponse> CreateCAAsync(CertificateAuthorityRequest body)
        {
            return CreateCAAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new CertificateAuthority object</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateAuthorityResponse> CreateCAAsync(CertificateAuthorityRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateAuthority");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateAuthorityResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateAuthorityResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Validates the connection info for the CA provided by the model.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The CA being tested.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateAuthorityTestResponse> TestCertificateAuthorityAsync(CertificateAuthorityRequest body)
        {
            return TestCertificateAuthorityAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Validates the connection info for the CA provided by the model.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The CA being tested.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateAuthorityTestResponse> TestCertificateAuthorityAsync(CertificateAuthorityRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateAuthority/Test");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateAuthorityTestResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateAuthorityTestResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Publishes a CRL according to the provided request</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Host and logical name of the CA for which the CRL should be published</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PublishCRLAsync(CRLRequestModel body)
        {
            return PublishCRLAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Publishes a CRL according to the provided request</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Host and logical name of the CA for which the CRL should be published</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PublishCRLAsync(CRLRequestModel body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateAuthority/PublishCRL");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns the certificate collection definition associated with the provided Keyfactor identifier</summary>
        /// <param name="id">Identifier of the certificate collection</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateQuery> GetCollection0Async(int id)
        {
            return GetCollection0Async(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the certificate collection definition associated with the provided Keyfactor identifier</summary>
        /// <param name="id">Identifier of the certificate collection</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateQuery> GetCollection0Async(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateCollections/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateQuery>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateQuery);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns the certificate collection associated with the provided collection name</summary>
        /// <param name="name">Name of the Collection</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateQuery> GetCollection1Async(string name)
        {
            return GetCollection1Async(name, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the certificate collection associated with the provided collection name</summary>
        /// <param name="name">Name of the Collection</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateQuery> GetCollection1Async(string name, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateCollections/{name}");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateQuery>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateQuery);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all certificate collections</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateQuery>> GetCollectionsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending13? pq_sortAscending)
        {
            return GetCollectionsAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all certificate collections</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateQuery>> GetCollectionsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending13? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateCollections?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CertificateQuery>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CertificateQuery>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates an existing certificate collection with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information related to the certificate collection query</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateCollectionResponse> UpdateCollectionAsync(CertificateCollectionUpdateRequest body)
        {
            return UpdateCollectionAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates an existing certificate collection with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information related to the certificate collection query</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateCollectionResponse> UpdateCollectionAsync(CertificateCollectionUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateCollections");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateCollectionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateCollectionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a new certificate collection with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information related to the certificate collection query</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateCollectionResponse> CreateCollectionAsync(CertificateCollectionCreateRequest body)
        {
            return CreateCollectionAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new certificate collection with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information related to the certificate collection query</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateCollectionResponse> CreateCollectionAsync(CertificateCollectionCreateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateCollections");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateCollectionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateCollectionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a new certificate collection from an existing collection. The permissions, query and description of the 
        /// existing collection are copied when creating the new record, with the option to overwrite the query or description.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information related to the certificate collection query</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateCollectionResponse> CopyFromExistingCollectionAsync(CertificateCollectionCopyRequest body)
        {
            return CopyFromExistingCollectionAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new certificate collection from an existing collection. The permissions, query and description of the 
        /// existing collection are copied when creating the new record, with the option to overwrite the query or description.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information related to the certificate collection query</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateCollectionResponse> CopyFromExistingCollectionAsync(CertificateCollectionCopyRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateCollections/Copy");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateCollectionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateCollectionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Set the permissions for a collection</summary>
        /// <param name="id">The collection to set permissions on</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The collection Permissions object ['Read', 'EditMetadata', 'Recover', 'Revoke', 'Delete']</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task SetCollectionPermissionsAsync(int id, System.Collections.Generic.IEnumerable<CollectionRolePermissions> body)
        {
            return SetCollectionPermissionsAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Set the permissions for a collection</summary>
        /// <param name="id">The collection to set permissions on</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The collection Permissions object ['Read', 'EditMetadata', 'Recover', 'Revoke', 'Delete']</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task SetCollectionPermissionsAsync(int id, System.Collections.Generic.IEnumerable<CollectionRolePermissions> body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateCollections/{id}/Permissions");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Deletes multiple persisted certificate store entities by their identifiers</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Array of Keyfactor identifiers (GUID) for the certificate stores to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCertificateStoresAsync(System.Collections.Generic.IEnumerable<System.Guid> body)
        {
            return DeleteCertificateStoresAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes multiple persisted certificate store entities by their identifiers</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Array of Keyfactor identifiers (GUID) for the certificate stores to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCertificateStoresAsync(System.Collections.Generic.IEnumerable<System.Guid> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStores");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes a persisted certificate store by its Keyfactor identifier</summary>
        /// <param name="id">Keyfactor certificate store identifier (GUID)</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCertificateStoreAsync(System.Guid id)
        {
            return DeleteCertificateStoreAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a persisted certificate store by its Keyfactor identifier</summary>
        /// <param name="id">Keyfactor certificate store identifier (GUID)</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCertificateStoreAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStores/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns a single certificate store's inventory associated with the provided id</summary>
        /// <param name="id">Keyfactor identifier (GUID) of the certificate store</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateStoreInventory>> GetCertificateStoreInventoryAsync(System.Guid id, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending14? query_sortAscending)
        {
            return GetCertificateStoreInventoryAsync(id, query_pageReturned, query_returnLimit, query_sortField, query_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a single certificate store's inventory associated with the provided id</summary>
        /// <param name="id">Keyfactor identifier (GUID) of the certificate store</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateStoreInventory>> GetCertificateStoreInventoryAsync(System.Guid id, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending14? query_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStores/{id}/Inventory?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (query_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CertificateStoreInventory>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CertificateStoreInventory>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates a given certificate store server with the properties of the provided instance</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Server to be updated with the provided properties</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<CertificateStoreServerResponse> UpdateCertificateStoreServerAsync(CertificateStoreUpdateServerRequest body)
        {
            return UpdateCertificateStoreServerAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a given certificate store server with the properties of the provided instance</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Server to be updated with the provided properties</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<CertificateStoreServerResponse> UpdateCertificateStoreServerAsync(CertificateStoreUpdateServerRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStores/Server");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateStoreServerResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateStoreServerResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a new certificate store server with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Certificate store server to be created with the provided properties</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<CertificateStoreServerResponse> CreateCertificateStoreServerAsync(CertificateStoreCreateServerRequest body)
        {
            return CreateCertificateStoreServerAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new certificate store server with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Certificate store server to be created with the provided properties</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<CertificateStoreServerResponse> CreateCertificateStoreServerAsync(CertificateStoreCreateServerRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStores/Server");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateStoreServerResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateStoreServerResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Sets a password for the requested certificate store</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Identifier of the certificate store and the password to be applied to it</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SetPasswordAsync(CertStoreNewPasswordRequest body)
        {
            return SetPasswordAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sets a password for the requested certificate store</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Identifier of the certificate store and the password to be applied to it</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SetPasswordAsync(CertStoreNewPasswordRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStores/Password");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Configures a discovery job to locate currently unmanaged certificate stores</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Configuration properties of the discovery job</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ConfigureDiscoveryJobAsync(DiscoveryJobRequest body)
        {
            return ConfigureDiscoveryJobAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Configures a discovery job to locate currently unmanaged certificate stores</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Configuration properties of the discovery job</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ConfigureDiscoveryJobAsync(DiscoveryJobRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStores/DiscoveryJob");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Approves the provided certificate stores to make them available for management</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Certificate stores to be approved</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ApprovePendingAsync(System.Collections.Generic.IEnumerable<CertificateStoreApproveRequest> body)
        {
            return ApprovePendingAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Approves the provided certificate stores to make them available for management</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Certificate stores to be approved</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ApprovePendingAsync(System.Collections.Generic.IEnumerable<CertificateStoreApproveRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStores/Approve");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates an inventory schedule for the provided certificate stores</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Certificate store identifiers and the desired schedule</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ScheduleAsync(CertStoresSchedule body)
        {
            return ScheduleAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates an inventory schedule for the provided certificate stores</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Certificate store identifiers and the desired schedule</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ScheduleAsync(CertStoresSchedule body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStores/Schedule");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Schedules a certificate store for reenrollment</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">An object that contains a Keystore Id, a Agent Guid, a string SubjectName and string Alias</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ScheduleForReenrollmentAsync(ReenrollmentRequest body)
        {
            return ScheduleForReenrollmentAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Schedules a certificate store for reenrollment</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">An object that contains a Keystore Id, a Agent Guid, a string SubjectName and string Alias</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ScheduleForReenrollmentAsync(ReenrollmentRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStores/Reenrollment");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Configures a management job to add a certificate to one or more stores with the provided schedule</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Configuration details of the management job</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Guid>> AddCertificateAsync(AddCertificateRequest body)
        {
            return AddCertificateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Configures a management job to add a certificate to one or more stores with the provided schedule</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Configuration details of the management job</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Guid>> AddCertificateAsync(AddCertificateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStores/Certificates/Add");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Guid>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<System.Guid>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Configures a management job to remove a certificate from one or more stores with the provided schedule</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Configuration details of the management job</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Guid>> RemoveCertificateAsync(RemoveCertificateRequest body)
        {
            return RemoveCertificateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Configures a management job to remove a certificate from one or more stores with the provided schedule</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Configuration details of the management job</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Guid>> RemoveCertificateAsync(RemoveCertificateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStores/Certificates/Remove");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Guid>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<System.Guid>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns all certificate store container according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateStoreContainerListResponse>> GetAllCertificateStoreContainersAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending15? pq_sortAscending)
        {
            return GetAllCertificateStoreContainersAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all certificate store container according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateStoreContainerListResponse>> GetAllCertificateStoreContainersAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending15? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStoreContainers?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CertificateStoreContainerListResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CertificateStoreContainerListResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete a certificate store container</summary>
        /// <param name="id">Id for the certificate store container</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCertificateStoreContainersAsync(int id)
        {
            return DeleteCertificateStoreContainersAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a certificate store container</summary>
        /// <param name="id">Id for the certificate store container</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCertificateStoreContainersAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStoreContainers/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns a single certificate store type that matches id</summary>
        /// <param name="id">Keyfactor identifier of the certificate store type</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateStoreTypeResponse> GetCertificateStoreType0Async(int id)
        {
            return GetCertificateStoreType0Async(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a single certificate store type that matches id</summary>
        /// <param name="id">Keyfactor identifier of the certificate store type</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateStoreTypeResponse> GetCertificateStoreType0Async(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStoreTypes/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateStoreTypeResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateStoreTypeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes a certificate store type according to the provided identifier</summary>
        /// <param name="id">Keyfactor identifier of the certificate store type to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCertificateStoreTypeAsync(int id)
        {
            return DeleteCertificateStoreTypeAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a certificate store type according to the provided identifier</summary>
        /// <param name="id">Keyfactor identifier of the certificate store type to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCertificateStoreTypeAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStoreTypes/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns a single certificate store type that matches the provided short name</summary>
        /// <param name="name">Short name of the certificate store type to return</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateStoreTypeResponse>> GetCertificateStoreType1Async(string name)
        {
            return GetCertificateStoreType1Async(name, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a single certificate store type that matches the provided short name</summary>
        /// <param name="name">Short name of the certificate store type to return</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateStoreTypeResponse>> GetCertificateStoreType1Async(string name, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStoreTypes/Name/{name}");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CertificateStoreTypeResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CertificateStoreTypeResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all certificate store types according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="cstquery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="cstquery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="cstquery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="cstquery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="cstquery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateStoreTypeResponse>> GetTypesAsync(string cstquery_queryString, int? cstquery_pageReturned, int? cstquery_returnLimit, string cstquery_sortField, SortAscending16? cstquery_sortAscending)
        {
            return GetTypesAsync(cstquery_queryString, cstquery_pageReturned, cstquery_returnLimit, cstquery_sortField, cstquery_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all certificate store types according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="cstquery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="cstquery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="cstquery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="cstquery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="cstquery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateStoreTypeResponse>> GetTypesAsync(string cstquery_queryString, int? cstquery_pageReturned, int? cstquery_returnLimit, string cstquery_sortField, SortAscending16? cstquery_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStoreTypes?");
            if (cstquery_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cstquery.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cstquery_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cstquery_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cstquery.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cstquery_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cstquery_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cstquery.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cstquery_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cstquery_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cstquery.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cstquery_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cstquery_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cstquery.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cstquery_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CertificateStoreTypeResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CertificateStoreTypeResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates an existing certificate store type with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Certificate store type properties to be updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateStoreTypeResponse> UpdateCertificateStoreTypeAsync(CertificateStoreTypeUpdateRequest body)
        {
            return UpdateCertificateStoreTypeAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates an existing certificate store type with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Certificate store type properties to be updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateStoreTypeResponse> UpdateCertificateStoreTypeAsync(CertificateStoreTypeUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStoreTypes");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateStoreTypeResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateStoreTypeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a new certificate store type with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Certificate store type properties for the new type</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateStoreTypeResponse> CreateCertificateStoreTypeAsync(CertificateStoreTypeCreationRequest body)
        {
            return CreateCertificateStoreTypeAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new certificate store type with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Certificate store type properties for the new type</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateStoreTypeResponse> CreateCertificateStoreTypeAsync(CertificateStoreTypeCreationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStoreTypes");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateStoreTypeResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateStoreTypeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes certificate store types according to the provided identifiers</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Array of Keyfactor identifiers of the certificate store types to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCertificateStoreTypesAsync(System.Collections.Generic.IEnumerable<int> body)
        {
            return DeleteCertificateStoreTypesAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes certificate store types according to the provided identifiers</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Array of Keyfactor identifiers of the certificate store types to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCertificateStoreTypesAsync(System.Collections.Generic.IEnumerable<int> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CertificateStoreTypes");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns a previously generated CSR associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifier of the CSR</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CSRGenerationResponseModel> DownloadAsync(int id)
        {
            return DownloadAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a previously generated CSR associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifier of the CSR</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CSRGenerationResponseModel> DownloadAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CSRGeneration/Pending/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CSRGenerationResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CSRGenerationResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes a CSR associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the CSR to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCSRAsync(int id)
        {
            return DeleteCSRAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a CSR associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the CSR to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCSRAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CSRGeneration/Pending/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns a list of the currently pending CSRs according to the provided query</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="sq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="sq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="sq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="sq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="sq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PendingCSRResponse>> GetPendingCSRsAsync(string sq_queryString, int? sq_pageReturned, int? sq_returnLimit, string sq_sortField, SortAscending17? sq_sortAscending)
        {
            return GetPendingCSRsAsync(sq_queryString, sq_pageReturned, sq_returnLimit, sq_sortField, sq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a list of the currently pending CSRs according to the provided query</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="sq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="sq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="sq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="sq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="sq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PendingCSRResponse>> GetPendingCSRsAsync(string sq_queryString, int? sq_pageReturned, int? sq_returnLimit, string sq_sortField, SortAscending17? sq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CSRGeneration/Pending?");
            if (sq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PendingCSRResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<PendingCSRResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes the CSRs associated with the provided identifiers</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Array of Keyfactor identifiers for the CSRs to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCSRsAsync(System.Collections.Generic.IEnumerable<int> body)
        {
            return DeleteCSRsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the CSRs associated with the provided identifiers</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Array of Keyfactor identifiers for the CSRs to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCSRsAsync(System.Collections.Generic.IEnumerable<int> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CSRGeneration/Pending");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Generates a CSR according the properties provided</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">CSR properties used to define the request - Key type [RSA, ECC], Key sizes (ex: RSA 1024, 2048, 4096/ECC 256, 384, 521), template short name or OID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CSRContents> PostGenerateAsync(CSRGenerationRequest body)
        {
            return PostGenerateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Generates a CSR according the properties provided</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">CSR properties used to define the request - Key type [RSA, ECC], Key sizes (ex: RSA 1024, 2048, 4096/ECC 256, 384, 521), template short name or OID</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CSRContents> PostGenerateAsync(CSRGenerationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/CSRGeneration/Generate");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CSRContents>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CSRContents);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns a single custom job type associated with the provided id</summary>
        /// <param name="id">Keyfactor (GUID) identifier of the job type</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobTypeResponse> GetJobTypeByIdAsync(System.Guid id)
        {
            return GetJobTypeByIdAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a single custom job type associated with the provided id</summary>
        /// <param name="id">Keyfactor (GUID) identifier of the job type</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobTypeResponse> GetJobTypeByIdAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/JobTypes/Custom/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobTypeResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(JobTypeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes the custom job type associated with the provided id</summary>
        /// <param name="id">Keyfactor identifier (GUID) of the job type</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteJobTypeAsync(System.Guid id)
        {
            return DeleteJobTypeAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the custom job type associated with the provided id</summary>
        /// <param name="id">Keyfactor identifier (GUID) of the job type</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteJobTypeAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/JobTypes/Custom/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all custom job types according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<JobTypeResponse>> GetJobTypesAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending18? pq_sortAscending)
        {
            return GetJobTypesAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all custom job types according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<JobTypeResponse>> GetJobTypesAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending18? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/JobTypes/Custom?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<JobTypeResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<JobTypeResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates an existing custom job type with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">job type properties to be applied to the existing job type</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobTypeResponse> UpdateJobTypeAsync(JobTypeUpdateRequest body)
        {
            return UpdateJobTypeAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates an existing custom job type with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">job type properties to be applied to the existing job type</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobTypeResponse> UpdateJobTypeAsync(JobTypeUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/JobTypes/Custom");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobTypeResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(JobTypeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a custom job type with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">job type properties to be applied to the new job type</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobTypeResponse> CreateJobTypeAsync(JobTypeCreateRequest body)
        {
            return CreateJobTypeAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a custom job type with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">job type properties to be applied to the new job type</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobTypeResponse> CreateJobTypeAsync(JobTypeCreateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/JobTypes/Custom");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobTypeResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(JobTypeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Get a denied alert</summary>
        /// <param name="id">Id for the denied alert to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeniedAlertDefinitionResponse> GetDeniedAlertAsync(int id)
        {
            return GetDeniedAlertAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a denied alert</summary>
        /// <param name="id">Id for the denied alert to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeniedAlertDefinitionResponse> GetDeniedAlertAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Denied/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeniedAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(DeniedAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete a denied alert</summary>
        /// <param name="id">Id for the denied alert</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteDeniedAlertAsync(int id)
        {
            return DeleteDeniedAlertAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a denied alert</summary>
        /// <param name="id">Id for the denied alert</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteDeniedAlertAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Denied/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets all denied alerts according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeniedAlertDefinitionResponse>> GetDeniedAlertsAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending19? pagedQuery_sortAscending)
        {
            return GetDeniedAlertsAsync(pagedQuery_queryString, pagedQuery_pageReturned, pagedQuery_returnLimit, pagedQuery_sortField, pagedQuery_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all denied alerts according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeniedAlertDefinitionResponse>> GetDeniedAlertsAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending19? pagedQuery_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Denied?");
            if (pagedQuery_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DeniedAlertDefinitionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<DeniedAlertDefinitionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Edit a denied alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the denied alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeniedAlertDefinitionResponse> EditDeniedAlertAsync(DeniedAlertUpdateRequest body)
        {
            return EditDeniedAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Edit a denied alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the denied alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeniedAlertDefinitionResponse> EditDeniedAlertAsync(DeniedAlertUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Denied");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeniedAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(DeniedAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Add a denied alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeniedAlertDefinitionResponse> AddDeniedAlertAsync(DeniedAlertCreationRequest body)
        {
            return AddDeniedAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a denied alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeniedAlertDefinitionResponse> AddDeniedAlertAsync(DeniedAlertCreationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Denied");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeniedAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(DeniedAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Gets the template settings to use during enrollment. The response will be the resolved values for the settings.
        /// If there is a template specific setting, the template specific setting will be used in the response.
        /// If there is not a template specific setting, the global setting will be used in the response.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TemplateEnrollmentSettingsResponse> GetTemplateEnrollmentSettingsAsync(int id)
        {
            return GetTemplateEnrollmentSettingsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the template settings to use during enrollment. The response will be the resolved values for the settings.
        /// If there is a template specific setting, the template specific setting will be used in the response.
        /// If there is not a template specific setting, the global setting will be used in the response.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TemplateEnrollmentSettingsResponse> GetTemplateEnrollmentSettingsAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Enrollment/Settings/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TemplateEnrollmentSettingsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(TemplateEnrollmentSettingsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns the list of available CSR enrollment templates and their associated CA mappings that the calling user has permissions on</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EnrollmentTemplateCAResponse> GetMyCSRContextAsync(string x_keyfactor_api_version)
        {
            return GetMyCSRContextAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the list of available CSR enrollment templates and their associated CA mappings that the calling user has permissions on</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EnrollmentTemplateCAResponse> GetMyCSRContextAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Enrollment/CSR/Context/My");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnrollmentTemplateCAResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(EnrollmentTemplateCAResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns the list of available PFX enrollment templates and their associated CA mappings that the calling user has permissions on</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EnrollmentTemplateCAResponse> GetMyPFXContextAsync(string x_keyfactor_api_version)
        {
            return GetMyPFXContextAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the list of available PFX enrollment templates and their associated CA mappings that the calling user has permissions on</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EnrollmentTemplateCAResponse> GetMyPFXContextAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Enrollment/PFX/Context/My");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnrollmentTemplateCAResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(EnrollmentTemplateCAResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns the type of renewal available for a given certificate.</summary>
        /// <param name="id">The Keyfactor certificate Id</param>
        /// <param name="collectionId">The collection id for the given certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AvailableRenewal> AvailableRenewalIdAsync(int id, int? collectionId)
        {
            return AvailableRenewalIdAsync(id, collectionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the type of renewal available for a given certificate.</summary>
        /// <param name="id">The Keyfactor certificate Id</param>
        /// <param name="collectionId">The collection id for the given certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AvailableRenewal> AvailableRenewalIdAsync(int id, int? collectionId, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Enrollment/AvailableRenewal/Id/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AvailableRenewal>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AvailableRenewal);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns the type of renewal available for a given certificate.</summary>
        /// <param name="thumbprint">The certificate thumbprint</param>
        /// <param name="collectionId">The collection id for the given certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AvailableRenewal> AvailableRenewalThumbprintAsync(string thumbprint, int? collectionId)
        {
            return AvailableRenewalThumbprintAsync(thumbprint, collectionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the type of renewal available for a given certificate.</summary>
        /// <param name="thumbprint">The certificate thumbprint</param>
        /// <param name="collectionId">The collection id for the given certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AvailableRenewal> AvailableRenewalThumbprintAsync(string thumbprint, int? collectionId, System.Threading.CancellationToken cancellationToken)
        {
            if (thumbprint == null)
                throw new System.ArgumentNullException("thumbprint");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Enrollment/AvailableRenewal/Thumbprint/{thumbprint}?");
            urlBuilder_.Replace("{thumbprint}", System.Uri.EscapeDataString(ConvertToString(thumbprint, System.Globalization.CultureInfo.InvariantCulture)));
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AvailableRenewal>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AvailableRenewal);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Performs a CSR Enrollment based upon the provided request</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="x_certificateformat">Desired format [PEM, DER]</param>
        /// <param name="body">Information needed to perform the CSR Enrollment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CSREnrollmentResponse> PostCSREnrollAsync(string x_certificateformat, CSREnrollmentRequest body)
        {
            return PostCSREnrollAsync(x_certificateformat, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Performs a CSR Enrollment based upon the provided request</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="x_certificateformat">Desired format [PEM, DER]</param>
        /// <param name="body">Information needed to perform the CSR Enrollment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CSREnrollmentResponse> PostCSREnrollAsync(string x_certificateformat, CSREnrollmentRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Enrollment/CSR");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_certificateformat == null)
                        throw new System.ArgumentNullException("x_certificateformat");
                    request_.Headers.TryAddWithoutValidation("x-certificateformat", ConvertToString(x_certificateformat, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CSREnrollmentResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CSREnrollmentResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Performs a PFX Enrollment based upon the provided request</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="x_certificateformat">Desired format [PFX, Zip, STORE]</param>
        /// <param name="body">The information needed to perform the PFX Enrollment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PFXEnrollmentResponse> PostPFXEnrollAsync(string x_certificateformat, PFXEnrollmentRequest body)
        {
            return PostPFXEnrollAsync(x_certificateformat, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Performs a PFX Enrollment based upon the provided request</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="x_certificateformat">Desired format [PFX, Zip, STORE]</param>
        /// <param name="body">The information needed to perform the PFX Enrollment</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PFXEnrollmentResponse> PostPFXEnrollAsync(string x_certificateformat, PFXEnrollmentRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Enrollment/PFX");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_certificateformat == null)
                        throw new System.ArgumentNullException("x_certificateformat");
                    request_.Headers.TryAddWithoutValidation("x-certificateformat", ConvertToString(x_certificateformat, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PFXEnrollmentResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(PFXEnrollmentResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Parses the provided CSR and returns the properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">CSR to be parsed</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> PostParsedCSRAsync(CSRContents body)
        {
            return PostParsedCSRAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Parses the provided CSR and returns the properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">CSR to be parsed</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> PostParsedCSRAsync(CSRContents body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Enrollment/CSR/Parse");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<string>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates management jobs to install a newly enrolled pfx in to one or more certificate stores</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The request to create the management jobs, which includes the request Id of the new pfx and the Ids and management job properties of the cert stores to add the pfx to</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EnrollmentManagementResponse> InstallPFXToCertStoreAsync(EnrollmentManagementRequest body)
        {
            return InstallPFXToCertStoreAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates management jobs to install a newly enrolled pfx in to one or more certificate stores</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The request to create the management jobs, which includes the request Id of the new pfx and the Ids and management job properties of the cert stores to add the pfx to</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EnrollmentManagementResponse> InstallPFXToCertStoreAsync(EnrollmentManagementRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Enrollment/PFX/Deploy");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnrollmentManagementResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(EnrollmentManagementResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates management jobs to install a newly enrolled pfx into the same certificate stores as the previous certificate</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The request to create the management jobs, which includes the request Id of the new pfx and the Id of the existing certificate</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EnrollmentManagementResponse> AddToExistingCertStoresAsync(ExistingEnrollmentManagementRequest body)
        {
            return AddToExistingCertStoresAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates management jobs to install a newly enrolled pfx into the same certificate stores as the previous certificate</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The request to create the management jobs, which includes the request Id of the new pfx and the Id of the existing certificate</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EnrollmentManagementResponse> AddToExistingCertStoresAsync(ExistingEnrollmentManagementRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Enrollment/PFX/Replace");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EnrollmentManagementResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(EnrollmentManagementResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Performs a renewal based upon the passed in request</summary>
        /// <param name="collectionId">The collection id for the given certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The information needed to perform the renewal</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RenewalResponse> RenewAsync(int? collectionId, RenewalRequest body)
        {
            return RenewAsync(collectionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Performs a renewal based upon the passed in request</summary>
        /// <param name="collectionId">The collection id for the given certificate</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The information needed to perform the renewal</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RenewalResponse> RenewAsync(int? collectionId, RenewalRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Enrollment/Renew?");
            if (collectionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("collectionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(collectionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RenewalResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RenewalResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Get an expiration alert</summary>
        /// <param name="id">Id for the expiration alert to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExpirationAlertDefinitionResponse> GetExpirationAlertAsync(int id)
        {
            return GetExpirationAlertAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get an expiration alert</summary>
        /// <param name="id">Id for the expiration alert to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExpirationAlertDefinitionResponse> GetExpirationAlertAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Expiration/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExpirationAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ExpirationAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete an expiration alert</summary>
        /// <param name="id">Id for the expiration alert</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteExpirationAlertAsync(int id)
        {
            return DeleteExpirationAlertAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete an expiration alert</summary>
        /// <param name="id">Id for the expiration alert</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteExpirationAlertAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Expiration/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get the schedule for expiration alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AlertScheduleResponse> GetScheduleAsync_0(string x_keyfactor_api_version)
        {
            return GetScheduleAsync_0(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the schedule for expiration alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlertScheduleResponse> GetScheduleAsync_0(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Expiration/Schedule");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertScheduleResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AlertScheduleResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Edit schedule</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AlertScheduleResponse> EditScheduleAsync_0(AlertScheduleRequest body)
        {
            return EditScheduleAsync_0(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Edit schedule</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlertScheduleResponse> EditScheduleAsync_0(AlertScheduleRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Expiration/Schedule");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertScheduleResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AlertScheduleResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets all expiration alerts according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ExpirationAlertDefinitionResponse>> GetExpirationAlertsAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending20? pagedQuery_sortAscending)
        {
            return GetExpirationAlertsAsync(pagedQuery_queryString, pagedQuery_pageReturned, pagedQuery_returnLimit, pagedQuery_sortField, pagedQuery_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all expiration alerts according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ExpirationAlertDefinitionResponse>> GetExpirationAlertsAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending20? pagedQuery_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Expiration?");
            if (pagedQuery_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ExpirationAlertDefinitionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<ExpirationAlertDefinitionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Edit an expiration alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the expiration alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExpirationAlertDefinitionResponse> EditExpirationAlertAsync(ExpirationAlertUpdateRequest body)
        {
            return EditExpirationAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Edit an expiration alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the expiration alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExpirationAlertDefinitionResponse> EditExpirationAlertAsync(ExpirationAlertUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Expiration");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExpirationAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ExpirationAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Add an expiration alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExpirationAlertDefinitionResponse> AddExpirationAlertAsync(ExpirationAlertCreationRequest body)
        {
            return AddExpirationAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add an expiration alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExpirationAlertDefinitionResponse> AddExpirationAlertAsync(ExpirationAlertCreationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Expiration");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExpirationAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ExpirationAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Test an Expiration Alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information about the expiration alert test</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExpirationAlertTestResponse> TestExpirationAlertAsync(ExpirationAlertTestRequest body)
        {
            return TestExpirationAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Test an Expiration Alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information about the expiration alert test</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExpirationAlertTestResponse> TestExpirationAlertAsync(ExpirationAlertTestRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Expiration/Test");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExpirationAlertTestResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ExpirationAlertTestResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Test All Expiration Alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information about the expiration alert test</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExpirationAlertTestResponse> TestAllExpirationAlertAsync(ExpirationAlertTestAllRequest body)
        {
            return TestAllExpirationAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Test All Expiration Alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information about the expiration alert test</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExpirationAlertTestResponse> TestAllExpirationAlertAsync(ExpirationAlertTestAllRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Expiration/TestAll");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExpirationAlertTestResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ExpirationAlertTestResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Get a issued alert</summary>
        /// <param name="id">Id for the issued alert to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IssuedAlertDefinitionResponse> GetIssuedAlertAsync(int id)
        {
            return GetIssuedAlertAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a issued alert</summary>
        /// <param name="id">Id for the issued alert to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IssuedAlertDefinitionResponse> GetIssuedAlertAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Issued/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IssuedAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(IssuedAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete a issued alert</summary>
        /// <param name="id">Id for the issued alert</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteIssuedAlertAsync(int id)
        {
            return DeleteIssuedAlertAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a issued alert</summary>
        /// <param name="id">Id for the issued alert</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteIssuedAlertAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Issued/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get the schedule for issued alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AlertScheduleResponse> GetScheduleAsync_1(string x_keyfactor_api_version)
        {
            return GetScheduleAsync_1(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the schedule for issued alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlertScheduleResponse> GetScheduleAsync_1(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Issued/Schedule");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertScheduleResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AlertScheduleResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Edit schedule</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AlertScheduleResponse> EditScheduleAsync_1(AlertScheduleRequest body)
        {
            return EditScheduleAsync_1(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Edit schedule</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlertScheduleResponse> EditScheduleAsync_1(AlertScheduleRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Issued/Schedule");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertScheduleResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AlertScheduleResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets all issued alerts according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IssuedAlertDefinitionResponse>> GetIssuedAlertsAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending21? pagedQuery_sortAscending)
        {
            return GetIssuedAlertsAsync(pagedQuery_queryString, pagedQuery_pageReturned, pagedQuery_returnLimit, pagedQuery_sortField, pagedQuery_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all issued alerts according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IssuedAlertDefinitionResponse>> GetIssuedAlertsAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending21? pagedQuery_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Issued?");
            if (pagedQuery_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<IssuedAlertDefinitionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<IssuedAlertDefinitionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Edit a issued alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the issued alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IssuedAlertDefinitionResponse> EditIssuedAlertAsync(IssuedAlertUpdateRequest body)
        {
            return EditIssuedAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Edit a issued alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the issued alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IssuedAlertDefinitionResponse> EditIssuedAlertAsync(IssuedAlertUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Issued");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IssuedAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(IssuedAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Add a issued alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<IssuedAlertDefinitionResponse> AddIssuedAlertAsync(IssuedAlertCreationRequest body)
        {
            return AddIssuedAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a issued alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<IssuedAlertDefinitionResponse> AddIssuedAlertAsync(IssuedAlertCreationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Issued");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IssuedAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(IssuedAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns an unmanaged SSH key with provided id.</summary>
        /// <param name="id">The id of the key to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UnmanagedKeyResponse> GetUnmanagedKeyAsync(int id)
        {
            return GetUnmanagedKeyAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns an unmanaged SSH key with provided id.</summary>
        /// <param name="id">The id of the key to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<UnmanagedKeyResponse> GetUnmanagedKeyAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Keys/Unmanaged/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UnmanagedKeyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(UnmanagedKeyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes Unmanaged Key associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the Key to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteUnmanagedKeyAsync(int id)
        {
            return DeleteUnmanagedKeyAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes Unmanaged Key associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the Key to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteUnmanagedKeyAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Keys/Unmanaged/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns the current key of the requesting user</summary>
        /// <param name="includePrivateKey">Whether or not to include the private key. If true, you must supply the X-Keyfactor-Key-Passphrase header</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="x_keyfactor_key_passphrase">Key password</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<KeyResponse> GetMyKeyAsync(bool? includePrivateKey, string x_keyfactor_key_passphrase)
        {
            return GetMyKeyAsync(includePrivateKey, x_keyfactor_key_passphrase, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the current key of the requesting user</summary>
        /// <param name="includePrivateKey">Whether or not to include the private key. If true, you must supply the X-Keyfactor-Key-Passphrase header</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="x_keyfactor_key_passphrase">Key password</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<KeyResponse> GetMyKeyAsync(bool? includePrivateKey, string x_keyfactor_key_passphrase, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Keys/MyKey?");
            if (includePrivateKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePrivateKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePrivateKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_key_passphrase == null)
                        throw new System.ArgumentNullException("x_keyfactor_key_passphrase");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-key-passphrase", ConvertToString(x_keyfactor_key_passphrase, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KeyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(KeyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates the requesting user's SSH key</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Updated state of the SSH key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<KeyResponse> UpdateAsync(KeyUpdateRequest body)
        {
            return UpdateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the requesting user's SSH key</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Updated state of the SSH key</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<KeyResponse> UpdateAsync(KeyUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Keys/MyKey");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KeyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(KeyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Generates an SSH Key Pair for the requesting user.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Object containing information about the key to be generated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<KeyResponse> GenerateKeyAsync(KeyGenerationRequest body)
        {
            return GenerateKeyAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Generates an SSH Key Pair for the requesting user.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Object containing information about the key to be generated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<KeyResponse> GenerateKeyAsync(KeyGenerationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Keys/MyKey");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KeyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(KeyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns Unmanaged SSH keys</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UnmanagedKeyResponse>> GetUnmanagedKeysAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending22? pq_sortAscending)
        {
            return GetUnmanagedKeysAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns Unmanaged SSH keys</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UnmanagedKeyResponse>> GetUnmanagedKeysAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending22? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Keys/Unmanaged?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UnmanagedKeyResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<UnmanagedKeyResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes Unmanaged Keys associated with the provided identifiers</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Keyfactor identifers of the Keys to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteUnmanagedKeysAsync(System.Collections.Generic.IEnumerable<int> body)
        {
            return DeleteUnmanagedKeysAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes Unmanaged Keys associated with the provided identifiers</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Keyfactor identifers of the Keys to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteUnmanagedKeysAsync(System.Collections.Generic.IEnumerable<int> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Keys/Unmanaged");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Get a key rotation alert</summary>
        /// <param name="id">Id for the key rotation alert to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<KeyRotationAlertDefinitionResponse> GetKeyRotationAlertAsync(int id)
        {
            return GetKeyRotationAlertAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a key rotation alert</summary>
        /// <param name="id">Id for the key rotation alert to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<KeyRotationAlertDefinitionResponse> GetKeyRotationAlertAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/KeyRotation/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KeyRotationAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(KeyRotationAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete a key rotation alert</summary>
        /// <param name="id">Id for the key rotation alert</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteKeyRotationAlertAsync(int id)
        {
            return DeleteKeyRotationAlertAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a key rotation alert</summary>
        /// <param name="id">Id for the key rotation alert</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteKeyRotationAlertAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/KeyRotation/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get the schedule for key rotation alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AlertScheduleResponse> GetScheduleAsync_2(string x_keyfactor_api_version)
        {
            return GetScheduleAsync_2(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the schedule for key rotation alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlertScheduleResponse> GetScheduleAsync_2(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/KeyRotation/Schedule");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertScheduleResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AlertScheduleResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Edit schedule</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AlertScheduleResponse> EditScheduleAsync_2(AlertScheduleRequest body)
        {
            return EditScheduleAsync_2(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Edit schedule</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlertScheduleResponse> EditScheduleAsync_2(AlertScheduleRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/KeyRotation/Schedule");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertScheduleResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AlertScheduleResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets all key rotation alerts according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<KeyRotationAlertDefinitionResponse>> GetKeyRotationAlertsAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending23? pagedQuery_sortAscending)
        {
            return GetKeyRotationAlertsAsync(pagedQuery_queryString, pagedQuery_pageReturned, pagedQuery_returnLimit, pagedQuery_sortField, pagedQuery_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all key rotation alerts according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<KeyRotationAlertDefinitionResponse>> GetKeyRotationAlertsAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending23? pagedQuery_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/KeyRotation?");
            if (pagedQuery_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<KeyRotationAlertDefinitionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<KeyRotationAlertDefinitionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Edit a key rotation alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the key rotation alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<KeyRotationAlertDefinitionResponse> EditKeyRotationAlertAsync(KeyRotationAlertUpdateRequest body)
        {
            return EditKeyRotationAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Edit a key rotation alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the key rotation alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<KeyRotationAlertDefinitionResponse> EditKeyRotationAlertAsync(KeyRotationAlertUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/KeyRotation");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KeyRotationAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(KeyRotationAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Add a key rotation alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<KeyRotationAlertDefinitionResponse> AddKeyRotationAlertAsync(KeyRotationAlertCreationRequest body)
        {
            return AddKeyRotationAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a key rotation alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<KeyRotationAlertDefinitionResponse> AddKeyRotationAlertAsync(KeyRotationAlertCreationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/KeyRotation");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KeyRotationAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(KeyRotationAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Test An Alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Parameters used to test the alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<KeyRotationAlertTestResponse> TestKeyRotationAlertAsync(KeyRotationAlertTestRequest body)
        {
            return TestKeyRotationAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Test An Alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Parameters used to test the alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<KeyRotationAlertTestResponse> TestKeyRotationAlertAsync(KeyRotationAlertTestRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/KeyRotation/Test");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KeyRotationAlertTestResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(KeyRotationAlertTestResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Test All Alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information about the key rotation alert test</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<KeyRotationAlertTestResponse> TestAllKeyRotationAlertAsync(KeyRotationAlertTestAllRequest body)
        {
            return TestAllKeyRotationAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Test All Alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information about the key rotation alert test</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<KeyRotationAlertTestResponse> TestAllKeyRotationAlertAsync(KeyRotationAlertTestAllRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/KeyRotation/TestAll");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KeyRotationAlertTestResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(KeyRotationAlertTestResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Gets the current license</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LicenseResponse> GetCurrentLicenseAsync(string x_keyfactor_api_version)
        {
            return GetCurrentLicenseAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the current license</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LicenseResponse> GetCurrentLicenseAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/License");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LicenseResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(LicenseResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Fetches a Logon associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the Logon to be Fetched</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LogonResponse> GetLogonAsync(int id)
        {
            return GetLogonAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches a Logon associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the Logon to be Fetched</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LogonResponse> GetLogonAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Logons/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LogonResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(LogonResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes a Logon associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the Logon to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteAsync_0(int id)
        {
            return DeleteAsync_0(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a Logon associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the Logon to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteAsync_0(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Logons/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all Logons according to the provided filter parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LogonQueryResponse>> QueryLogonsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending24? pq_sortAscending)
        {
            return QueryLogonsAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all Logons according to the provided filter parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LogonQueryResponse>> QueryLogonsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending24? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Logons?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<LogonQueryResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<LogonQueryResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a logon with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Logon properties to be applied to the new logon</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LogonResponse> CreateLogonAsync(LogonCreationRequest body)
        {
            return CreateLogonAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a logon with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Logon properties to be applied to the new logon</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LogonResponse> CreateLogonAsync(LogonCreationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Logons");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LogonResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(LogonResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates the users with access to an existing logon</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Users to add the existing logon</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LogonUserAccessResponse> LogonAccessAsync(LogonAccessRequest body)
        {
            return LogonAccessAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the users with access to an existing logon</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Users to add the existing logon</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LogonUserAccessResponse> LogonAccessAsync(LogonAccessRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Logons/Access");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LogonUserAccessResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(LogonUserAccessResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Gets mac enrollment settings data</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MacEnrollmentAPIModel> MacEnrollmentAsync(string x_keyfactor_api_version)
        {
            return MacEnrollmentAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets mac enrollment settings data</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MacEnrollmentAPIModel> MacEnrollmentAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/MacEnrollment");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MacEnrollmentAPIModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(MacEnrollmentAPIModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates mac enrollment settings data</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MacEnrollmentAPIModel> EditMacEnrollmentAsync(MacEnrollmentAPIModel body)
        {
            return EditMacEnrollmentAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates mac enrollment settings data</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MacEnrollmentAPIModel> EditMacEnrollmentAsync(MacEnrollmentAPIModel body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/MacEnrollment");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MacEnrollmentAPIModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(MacEnrollmentAPIModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Gets a persisted metadata field type by its unique id</summary>
        /// <param name="id">The unique id of the metadata field type</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MetadataFieldTypeModel> GetMetadataField0Async(int id)
        {
            return GetMetadataField0Async(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a persisted metadata field type by its unique id</summary>
        /// <param name="id">The unique id of the metadata field type</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MetadataFieldTypeModel> GetMetadataField0Async(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/MetadataFields/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MetadataFieldTypeModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(MetadataFieldTypeModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes a persisted metadata field type by its unique id</summary>
        /// <param name="id">Keyfactor identifier of the metadata field type</param>
        /// <param name="force">Forces deletion of the metadata field type even if in-use</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteMetadataFieldAsync(int id, bool? force)
        {
            return DeleteMetadataFieldAsync(id, force, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a persisted metadata field type by its unique id</summary>
        /// <param name="id">Keyfactor identifier of the metadata field type</param>
        /// <param name="force">Forces deletion of the metadata field type even if in-use</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteMetadataFieldAsync(int id, bool? force, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/MetadataFields/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (force != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("force") + "=").Append(System.Uri.EscapeDataString(ConvertToString(force, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets a persisted metadata field type by its unique name</summary>
        /// <param name="name">The unique name of the metadata field.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MetadataFieldTypeModel> GetMetadataField1Async(string name)
        {
            return GetMetadataField1Async(name, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a persisted metadata field type by its unique name</summary>
        /// <param name="name">The unique name of the metadata field.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MetadataFieldTypeModel> GetMetadataField1Async(string name, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/MetadataFields/{name}");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MetadataFieldTypeModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(MetadataFieldTypeModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Determines if a metadata field type associated with the provided identifier is currently in use</summary>
        /// <param name="id">Keyfactor identitifer of the metadata field</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<bool> GetMetadataFieldInUseAsync(int id)
        {
            return GetMetadataFieldInUseAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Determines if a metadata field type associated with the provided identifier is currently in use</summary>
        /// <param name="id">Keyfactor identitifer of the metadata field</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<bool> GetMetadataFieldInUseAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/MetadataFields/{id}/InUse");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(bool);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all metadata field types according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetadataFieldTypeModel>> GetAllMetadataFieldsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending25? pq_sortAscending)
        {
            return GetAllMetadataFieldsAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all metadata field types according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetadataFieldTypeModel>> GetAllMetadataFieldsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending25? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/MetadataFields?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MetadataFieldTypeModel>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<MetadataFieldTypeModel>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates a persisted metadata field with the given metadata field type</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Properties of the metadata field type to be updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MetadataFieldResponse> UpdateMetadataFieldAsync(MetadataFieldUpdateRequest body)
        {
            return UpdateMetadataFieldAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a persisted metadata field with the given metadata field type</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Properties of the metadata field type to be updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MetadataFieldResponse> UpdateMetadataFieldAsync(MetadataFieldUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/MetadataFields");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MetadataFieldResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(MetadataFieldResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a new metadata field type with the given metadata field type properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Properties of the metadata field type to be created</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MetadataFieldResponse> CreateMetadataFieldAsync(MetadataFieldCreateRequest body)
        {
            return CreateMetadataFieldAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new metadata field type with the given metadata field type properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Properties of the metadata field type to be created</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MetadataFieldResponse> CreateMetadataFieldAsync(MetadataFieldCreateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/MetadataFields");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MetadataFieldResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(MetadataFieldResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes multiple persisted metadata field types by their unique ids</summary>
        /// <param name="force">Forces deletion of the metadata field type even if in-use</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Array of Keyfactor identifiers for metadata field types to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteMetadataFieldsAsync(bool? force, System.Collections.Generic.IEnumerable<int> body)
        {
            return DeleteMetadataFieldsAsync(force, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes multiple persisted metadata field types by their unique ids</summary>
        /// <param name="force">Forces deletion of the metadata field type even if in-use</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Array of Keyfactor identifiers for metadata field types to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteMetadataFieldsAsync(bool? force, System.Collections.Generic.IEnumerable<int> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/MetadataFields?");
            if (force != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("force") + "=").Append(System.Uri.EscapeDataString(ConvertToString(force, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Get a revocation monitoring endpoint</summary>
        /// <param name="id">Id for the endpoint to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RevocationMonitoringDefinitionResponse> GetRevocationMonitoringAsync(int id)
        {
            return GetRevocationMonitoringAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a revocation monitoring endpoint</summary>
        /// <param name="id">Id for the endpoint to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RevocationMonitoringDefinitionResponse> GetRevocationMonitoringAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Monitoring/Revocation/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RevocationMonitoringDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RevocationMonitoringDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete a revocation monitoring endpoint</summary>
        /// <param name="id">Id for the revocation monitoring endpoint</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteRevocationMonitoringAsync(int id)
        {
            return DeleteRevocationMonitoringAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a revocation monitoring endpoint</summary>
        /// <param name="id">Id for the revocation monitoring endpoint</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteRevocationMonitoringAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Monitoring/Revocation/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets all revocation monitoring endpoints according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RevocationMonitoringDefinitionResponse>> GetRevocationMonitoringEndpointsAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending26? pagedQuery_sortAscending)
        {
            return GetRevocationMonitoringEndpointsAsync(pagedQuery_queryString, pagedQuery_pageReturned, pagedQuery_returnLimit, pagedQuery_sortField, pagedQuery_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all revocation monitoring endpoints according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RevocationMonitoringDefinitionResponse>> GetRevocationMonitoringEndpointsAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending26? pagedQuery_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Monitoring/Revocation?");
            if (pagedQuery_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RevocationMonitoringDefinitionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<RevocationMonitoringDefinitionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Edit a revocation monitoring endpoint</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RevocationMonitoringDefinitionResponse> EditRevocationMonitoringAsync(RevocationMonitoringUpdateRequest body)
        {
            return EditRevocationMonitoringAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Edit a revocation monitoring endpoint</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RevocationMonitoringDefinitionResponse> EditRevocationMonitoringAsync(RevocationMonitoringUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Monitoring/Revocation");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RevocationMonitoringDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RevocationMonitoringDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Add a revocation monitoring endpoint</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RevocationMonitoringDefinitionResponse> AddRevocationMonitoringAsync(RevocationMonitoringCreationRequest body)
        {
            return AddRevocationMonitoringAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a revocation monitoring endpoint</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RevocationMonitoringDefinitionResponse> AddRevocationMonitoringAsync(RevocationMonitoringCreationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Monitoring/Revocation");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RevocationMonitoringDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RevocationMonitoringDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Resolve the Certificate authority given</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OCSPParametersResponse> ResolveOCSPAsync(OCSPParametersRequest body)
        {
            return ResolveOCSPAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resolve the Certificate authority given</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new endpoint</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OCSPParametersResponse> ResolveOCSPAsync(OCSPParametersRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Monitoring/ResolveOCSP");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OCSPParametersResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(OCSPParametersResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Test Alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information about the revocation monitoring alert test</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RevocationMonitoringAlertTestResponse> TestRevocationMonitoringAlertAsync(RevocationMonitoringAlertTestRequest body)
        {
            return TestRevocationMonitoringAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Test Alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information about the revocation monitoring alert test</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RevocationMonitoringAlertTestResponse> TestRevocationMonitoringAlertAsync(RevocationMonitoringAlertTestRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Monitoring/Revocation/Test");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RevocationMonitoringAlertTestResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RevocationMonitoringAlertTestResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Test All Alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information about the revocation monitoring alert test</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RevocationMonitoringAlertTestResponse> TestAllRevocationMonitoringAlertAsync(RevocationMonitoringAlertTestAllRequest body)
        {
            return TestAllRevocationMonitoringAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Test All Alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information about the revocation monitoring alert test</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RevocationMonitoringAlertTestResponse> TestAllRevocationMonitoringAlertAsync(RevocationMonitoringAlertTestAllRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Monitoring/Revocation/TestAll");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RevocationMonitoringAlertTestResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(RevocationMonitoringAlertTestResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Retrieves the results of a custom job using the provided information</summary>
        /// <param name="jobHistoryId">Identifier of the job history record to retrieve</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CustomJobResultDataResponse> GetCustomJobResultDataAsync(long jobHistoryId)
        {
            return GetCustomJobResultDataAsync(jobHistoryId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves the results of a custom job using the provided information</summary>
        /// <param name="jobHistoryId">Identifier of the job history record to retrieve</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomJobResultDataResponse> GetCustomJobResultDataAsync(long jobHistoryId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobHistoryId == null)
                throw new System.ArgumentNullException("jobHistoryId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/OrchestratorJobs/JobStatus/Data?");
            urlBuilder_.Append(System.Uri.EscapeDataString("jobHistoryId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(jobHistoryId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomJobResultDataResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CustomJobResultDataResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all histories of an orchestrator job according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<JobHistoryResponse>> GetJobHistoryAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending27? pq_sortAscending)
        {
            return GetJobHistoryAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all histories of an orchestrator job according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<JobHistoryResponse>> GetJobHistoryAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending27? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/OrchestratorJobs/JobHistory?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<JobHistoryResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<JobHistoryResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all scheduled orchestrator jobs according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Job>> GetScheduledJobsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending28? pq_sortAscending)
        {
            return GetScheduledJobsAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all scheduled orchestrator jobs according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Job>> GetScheduledJobsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending28? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/OrchestratorJobs/ScheduledJobs?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Job>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Job>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Schedules a job for a custom JobType on the agent using the provided information</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information to use to schedule the job, including the type of custom job, agent to use, and job-specific parameters.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobResponse> ScheduleJobAsync(ScheduleJobRequest body)
        {
            return ScheduleJobAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Schedules a job for a custom JobType on the agent using the provided information</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information to use to schedule the job, including the type of custom job, agent to use, and job-specific parameters.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobResponse> ScheduleJobAsync(ScheduleJobRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/OrchestratorJobs/Custom");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(JobResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Reschedules orchestrator jobs based on the provided information</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information to identify the jobs to reschedule, either a query or a list of job identifiers</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RescheduleJobsAsync(RescheduleJobRequest body)
        {
            return RescheduleJobsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reschedules orchestrator jobs based on the provided information</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information to identify the jobs to reschedule, either a query or a list of job identifiers</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RescheduleJobsAsync(RescheduleJobRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/OrchestratorJobs/Reschedule");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Unschedules orchestrator jobs based on the provided information</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information to identify the orchestrator jobs to unschedule, either a query or a list of job identifiers</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UnscheduleJobsAsync(UnscheduleJobRequest body)
        {
            return UnscheduleJobsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Unschedules orchestrator jobs based on the provided information</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information to identify the orchestrator jobs to unschedule, either a query or a list of job identifiers</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UnscheduleJobsAsync(UnscheduleJobRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/OrchestratorJobs/Unschedule");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Acknowledges orchestrator jobs based on the provided information</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information to identify the jobs to acknowledge, either a query or a list of job identifiers</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AcknowledgeJobsAsync(AcknowledgeJobRequest body)
        {
            return AcknowledgeJobsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Acknowledges orchestrator jobs based on the provided information</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information to identify the jobs to acknowledge, either a query or a list of job identifiers</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AcknowledgeJobsAsync(AcknowledgeJobRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/OrchestratorJobs/Acknowledge");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Schedules the same job for a custom JobType on the specified agents using the provided information</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information to use to schedule the jobs, including the type of custom job, agents to use, and job-specific parameters.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BulkJobResponse> ScheduleBulkJobAsync(ScheduleBulkJobRequest body)
        {
            return ScheduleBulkJobAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Schedules the same job for a custom JobType on the specified agents using the provided information</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information to use to schedule the jobs, including the type of custom job, agents to use, and job-specific parameters.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BulkJobResponse> ScheduleBulkJobAsync(ScheduleBulkJobRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/OrchestratorJobs/Custom/Bulk");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkJobResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BulkJobResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Deletes a PAM Provider</summary>
        /// <param name="id">Keyfactor identifier of the PAM provider to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeletePamProviderAsync(int id)
        {
            return DeletePamProviderAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a PAM Provider</summary>
        /// <param name="id">Keyfactor identifier of the PAM provider to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeletePamProviderAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/PamProviders/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a new PAM provider type with the associated properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">PAM provider type properties to be used</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ProviderTypeResponse> CreatePamProviderTypeAsync(ProviderTypeCreateRequest body)
        {
            return CreatePamProviderTypeAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new PAM provider type with the associated properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">PAM provider type properties to be used</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ProviderTypeResponse> CreatePamProviderTypeAsync(ProviderTypeCreateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/PamProviders/Types");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProviderTypeResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ProviderTypeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Get a pending alert</summary>
        /// <param name="id">Id for the pending alert to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PendingAlertDefinitionResponse> GetPendingAlertAsync(int id)
        {
            return GetPendingAlertAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a pending alert</summary>
        /// <param name="id">Id for the pending alert to get</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PendingAlertDefinitionResponse> GetPendingAlertAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Pending/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PendingAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(PendingAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete a pending alert</summary>
        /// <param name="id">Id for the pending alert</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeletePendingAlertAsync(int id)
        {
            return DeletePendingAlertAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a pending alert</summary>
        /// <param name="id">Id for the pending alert</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeletePendingAlertAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Pending/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get the schedule for pending alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AlertScheduleResponse> GetScheduleAsync_3(string x_keyfactor_api_version)
        {
            return GetScheduleAsync_3(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the schedule for pending alerts</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlertScheduleResponse> GetScheduleAsync_3(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Pending/Schedule");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertScheduleResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AlertScheduleResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Edit schedule</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AlertScheduleResponse> EditScheduleAsync_3(AlertScheduleRequest body)
        {
            return EditScheduleAsync_3(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Edit schedule</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlertScheduleResponse> EditScheduleAsync_3(AlertScheduleRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Pending/Schedule");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertScheduleResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AlertScheduleResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets all pending alerts according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PendingAlertDefinitionResponse>> GetPendingAlertsAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending29? pagedQuery_sortAscending)
        {
            return GetPendingAlertsAsync(pagedQuery_queryString, pagedQuery_pageReturned, pagedQuery_returnLimit, pagedQuery_sortField, pagedQuery_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all pending alerts according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PendingAlertDefinitionResponse>> GetPendingAlertsAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending29? pagedQuery_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Pending?");
            if (pagedQuery_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PendingAlertDefinitionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<PendingAlertDefinitionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Edit a pending alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the pending alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PendingAlertDefinitionResponse> EditPendingAlertAsync(PendingAlertUpdateRequest body)
        {
            return EditPendingAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Edit a pending alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the pending alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PendingAlertDefinitionResponse> EditPendingAlertAsync(PendingAlertUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Pending");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PendingAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(PendingAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Add a pending alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PendingAlertDefinitionResponse> AddPendingAlertAsync(PendingAlertCreationRequest body)
        {
            return AddPendingAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a pending alert</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the new alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PendingAlertDefinitionResponse> AddPendingAlertAsync(PendingAlertCreationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Pending");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PendingAlertDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(PendingAlertDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Test pending alert. Will send alert emails if SendAlerts is true</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the pending alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PendingAlertTestResponse> TestPendingAlertAsync(PendingAlertTestRequest body)
        {
            return TestPendingAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Test pending alert. Will send alert emails if SendAlerts is true</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the pending alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PendingAlertTestResponse> TestPendingAlertAsync(PendingAlertTestRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Pending/Test");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PendingAlertTestResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(PendingAlertTestResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Test all pending alerts. Will send alert emails if SendAlerts is true</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the pending alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PendingAlertTestResponse> TestAllPendingAlertAsync(PendingAlertTestAllRequest body)
        {
            return TestAllPendingAlertAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Test all pending alerts. Will send alert emails if SendAlerts is true</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Information for the pending alert</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PendingAlertTestResponse> TestAllPendingAlertAsync(PendingAlertTestAllRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alerts/Pending/TestAll");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PendingAlertTestResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(PendingAlertTestResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns a single built-in report that matches the id</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Report> GetReportAsync(int id)
        {
            return GetReportAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a single built-in report that matches the id</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Report> GetReportAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Report>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Report);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns a single custom report that matches the id</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CustomReport> GetCustomReportAsync(int id)
        {
            return GetCustomReportAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a single custom report that matches the id</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomReport> GetCustomReportAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports/Custom/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CustomReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete custom report that matches the id</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteReportAsync(int id)
        {
            return DeleteReportAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete custom report that matches the id</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteReportAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports/Custom/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get a built-in report's schedule that matches the id of the schedule.</summary>
        /// <param name="id">Report Schedule identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ReportSchedule> GetReportScheduleAsync(int id)
        {
            return GetReportScheduleAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a built-in report's schedule that matches the id of the schedule.</summary>
        /// <param name="id">Report Schedule identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReportSchedule> GetReportScheduleAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports/Schedules/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReportSchedule>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ReportSchedule);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete a built-in report's schedule that matches the id of the schedule.</summary>
        /// <param name="id">Report Schedule identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteReportScheduleAsync(int id)
        {
            return DeleteReportScheduleAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a built-in report's schedule that matches the id of the schedule.</summary>
        /// <param name="id">Report Schedule identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteReportScheduleAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports/Schedules/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get a built-in report's parameters that matches the id of the report.</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReportParameters>> GetReportParametersAsync(int id)
        {
            return GetReportParametersAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a built-in report's parameters that matches the id of the report.</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReportParameters>> GetReportParametersAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports/{id}/Parameters");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ReportParameters>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<ReportParameters>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update a built-in report's parameters that matches the id of the report.</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">A List of the parameters to be updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReportParameters>> UpdateReportParametersAsync(int id, System.Collections.Generic.IEnumerable<ReportParametersRequest> body)
        {
            return UpdateReportParametersAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a built-in report's parameters that matches the id of the report.</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">A List of the parameters to be updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReportParameters>> UpdateReportParametersAsync(int id, System.Collections.Generic.IEnumerable<ReportParametersRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports/{id}/Parameters");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ReportParameters>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<ReportParameters>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all built-in reports according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Report>> QueryReportsAsync(string query_queryString, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending30? query_sortAscending)
        {
            return QueryReportsAsync(query_queryString, query_pageReturned, query_returnLimit, query_sortField, query_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all built-in reports according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Report>> QueryReportsAsync(string query_queryString, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending30? query_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports?");
            if (query_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Report>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Report>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates a single built-in report that matches the id. Only some fields can be updated.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">This object is used to update the Favorite, In Navigator and the Remove Duplicates if the 'Uses Collections' is true.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Report> UpdateReportAsync(ReportRequestModel body)
        {
            return UpdateReportAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a single built-in report that matches the id. Only some fields can be updated.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">This object is used to update the Favorite, In Navigator and the Remove Duplicates if the 'Uses Collections' is true.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Report> UpdateReportAsync(ReportRequestModel body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Report>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Report);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all custom reports according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomReport>> QueryCustomReportsAsync(string query_queryString, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending31? query_sortAscending)
        {
            return QueryCustomReportsAsync(query_queryString, query_pageReturned, query_returnLimit, query_sortField, query_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all custom reports according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomReport>> QueryCustomReportsAsync(string query_queryString, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending31? query_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports/Custom?");
            if (query_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CustomReport>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CustomReport>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates a custom report that matches the id</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Report Information</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CustomReport> UpdateCustomReportAsync(CustomReportUpdateRequest body)
        {
            return UpdateCustomReportAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a custom report that matches the id</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Report Information</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomReport> UpdateCustomReportAsync(CustomReportUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports/Custom");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CustomReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a custom report</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Report Information</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CustomReport> CreateCustomReportAsync(CustomReportCreationRequest body)
        {
            return CreateCustomReportAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a custom report</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Report Information</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomReport> CreateCustomReportAsync(CustomReportCreationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports/Custom");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomReport>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CustomReport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get a built-in report's schedules that matches the id of the report.</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReportSchedule>> GetReportSchedulesAsync(int id, string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending32? pq_sortAscending)
        {
            return GetReportSchedulesAsync(id, pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a built-in report's schedules that matches the id of the report.</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReportSchedule>> GetReportSchedulesAsync(int id, string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending32? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports/{id}/Schedules?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ReportSchedule>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<ReportSchedule>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update a built-in report's schedule that matches the id of the report.</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Report Schedule</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ReportSchedule> UpdateReportScheduleAsync(int id, ReportSchedule body)
        {
            return UpdateReportScheduleAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a built-in report's schedule that matches the id of the report.</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Report Schedule</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReportSchedule> UpdateReportScheduleAsync(int id, ReportSchedule body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports/{id}/Schedules");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReportSchedule>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ReportSchedule);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Create a built-in report's schedule that matches the id of the report.</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Report Schedule</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ReportSchedule> CreateReportScheduleAsync(int id, ReportSchedule body)
        {
            return CreateReportScheduleAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a built-in report's schedule that matches the id of the report.</summary>
        /// <param name="id">Report identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Report Schedule</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReportSchedule> CreateReportScheduleAsync(int id, ReportSchedule body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Reports/{id}/Schedules");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReportSchedule>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ReportSchedule);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Gets an object representing the permissions of the identity associated with the provided identifier.</summary>
        /// <param name="id">The identifier of the security identity</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SecurityIdentityPermissionsResponse> IdentityPermissionsAsync(int id)
        {
            return IdentityPermissionsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets an object representing the permissions of the identity associated with the provided identifier.</summary>
        /// <param name="id">The identifier of the security identity</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SecurityIdentityPermissionsResponse> IdentityPermissionsAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Identities/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SecurityIdentityPermissionsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SecurityIdentityPermissionsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes the security identity whose ID is provided.</summary>
        /// <param name="id">The ID of the security identity to be deleted.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteSecurityIdentityAsync(int id)
        {
            return DeleteSecurityIdentityAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the security identity whose ID is provided.</summary>
        /// <param name="id">The ID of the security identity to be deleted.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteSecurityIdentityAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Identities/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Validates that the identity with the name given exists.</summary>
        /// <param name="accountName">The name of an identity we wish to check.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SecurityIdentityLookupResponse> LookupIdentityAsync(string accountName)
        {
            return LookupIdentityAsync(accountName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Validates that the identity with the name given exists.</summary>
        /// <param name="accountName">The name of an identity we wish to check.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SecurityIdentityLookupResponse> LookupIdentityAsync(string accountName, System.Threading.CancellationToken cancellationToken)
        {
            if (accountName == null)
                throw new System.ArgumentNullException("accountName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Identities/Lookup?");
            urlBuilder_.Append(System.Uri.EscapeDataString("accountName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accountName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SecurityIdentityLookupResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SecurityIdentityLookupResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns all permissions associated with the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AreaPermissionResponse>> GetPermissionsForRoleAsync(int id)
        {
            return GetPermissionsForRoleAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all permissions associated with the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AreaPermissionResponse>> GetPermissionsForRoleAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Roles/{id}/Permissions");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AreaPermissionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<AreaPermissionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all global permissions associated with the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GlobalPermissionResponse>> GetGlobalPermissionsForRoleAsync(int id)
        {
            return GetGlobalPermissionsForRoleAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all global permissions associated with the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GlobalPermissionResponse>> GetGlobalPermissionsForRoleAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Roles/{id}/Permissions/Global");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GlobalPermissionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<GlobalPermissionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Adds global permissions to the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Global permissions</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GlobalPermissionResponse>> SetGlobalPermissionsAsync(int id, System.Collections.Generic.IEnumerable<GlobalPermissionRequest> body)
        {
            return SetGlobalPermissionsAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Adds global permissions to the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Global permissions</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GlobalPermissionResponse>> SetGlobalPermissionsAsync(int id, System.Collections.Generic.IEnumerable<GlobalPermissionRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Roles/{id}/Permissions/Global");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GlobalPermissionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<GlobalPermissionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Adds global permissions to the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Global permissions</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GlobalPermissionResponse>> AddGlobalPermissionsAsync(int id, System.Collections.Generic.IEnumerable<GlobalPermissionRequest> body)
        {
            return AddGlobalPermissionsAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Adds global permissions to the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Global permissions</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GlobalPermissionResponse>> AddGlobalPermissionsAsync(int id, System.Collections.Generic.IEnumerable<GlobalPermissionRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Roles/{id}/Permissions/Global");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GlobalPermissionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<GlobalPermissionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all container permissions associated with the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContainerPermissionResponse>> GetContainerPermissionsForRoleAsync(int id)
        {
            return GetContainerPermissionsForRoleAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all container permissions associated with the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContainerPermissionResponse>> GetContainerPermissionsForRoleAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Roles/{id}/Permissions/Containers");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContainerPermissionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<ContainerPermissionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Sets container permissions to the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Container permissions</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContainerPermissionResponse>> SetContainerPermissionsAsync(int id, System.Collections.Generic.IEnumerable<ContainerPermissionRequest> body)
        {
            return SetContainerPermissionsAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sets container permissions to the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Container permissions</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContainerPermissionResponse>> SetContainerPermissionsAsync(int id, System.Collections.Generic.IEnumerable<ContainerPermissionRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Roles/{id}/Permissions/Containers");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContainerPermissionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<ContainerPermissionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Adds container permissions to the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Container permissions</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContainerPermissionResponse>> AddContainerPermissionsAsync(int id, System.Collections.Generic.IEnumerable<ContainerPermissionRequest> body)
        {
            return AddContainerPermissionsAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Adds container permissions to the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Container permissions</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContainerPermissionResponse>> AddContainerPermissionsAsync(int id, System.Collections.Generic.IEnumerable<ContainerPermissionRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Roles/{id}/Permissions/Containers");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContainerPermissionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<ContainerPermissionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all collection permissions associated with the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CollectionPermissionResponse>> GetCollectionPermissionsForRoleAsync(int id)
        {
            return GetCollectionPermissionsForRoleAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all collection permissions associated with the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CollectionPermissionResponse>> GetCollectionPermissionsForRoleAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Roles/{id}/Permissions/Collections");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CollectionPermissionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CollectionPermissionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Sets collection permissions to the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Collections permissions</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CollectionPermissionResponse>> SetCollectionPermissionsAsync(int id, System.Collections.Generic.IEnumerable<CollectionPermissionRequest> body)
        {
            return SetCollectionPermissionsAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sets collection permissions to the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Collections permissions</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CollectionPermissionResponse>> SetCollectionPermissionsAsync(int id, System.Collections.Generic.IEnumerable<CollectionPermissionRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Roles/{id}/Permissions/Collections");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CollectionPermissionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CollectionPermissionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Adds collection permissions to the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Collections permissions</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CollectionPermissionResponse>> AddCollectionPermissionsAsync(int id, System.Collections.Generic.IEnumerable<CollectionPermissionRequest> body)
        {
            return AddCollectionPermissionsAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Adds collection permissions to the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Collections permissions</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CollectionPermissionResponse>> AddCollectionPermissionsAsync(int id, System.Collections.Generic.IEnumerable<CollectionPermissionRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Roles/{id}/Permissions/Collections");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CollectionPermissionResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CollectionPermissionResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Deletes the security role whose ID is provided.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteSecurityRoleAsync(int id)
        {
            return DeleteSecurityRoleAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the security role whose ID is provided.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteSecurityRoleAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Roles/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all identities which have the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleIdentitiesResponse>> GetIdentitiesWithRoleAsync(int id)
        {
            return GetIdentitiesWithRoleAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all identities which have the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleIdentitiesResponse>> GetIdentitiesWithRoleAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Roles/{id}/Identities");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleIdentitiesResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<RoleIdentitiesResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates the identities which have the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Lists of Identity IDs to remove or add to the role</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleIdentitiesResponse>> UpdateIdentitiesWithRoleAsync(int id, RoleIdentitiesRequest body)
        {
            return UpdateIdentitiesWithRoleAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the identities which have the security role that matches the id.</summary>
        /// <param name="id">Security role identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Lists of Identity IDs to remove or add to the role</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleIdentitiesResponse>> UpdateIdentitiesWithRoleAsync(int id, RoleIdentitiesRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Security/Roles/{id}/Identities");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleIdentitiesResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<RoleIdentitiesResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns a Server associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifier of the Server</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServerResponse> GetAsync_0(int id)
        {
            return GetAsync_0(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a Server associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifier of the Server</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServerResponse> GetAsync_0(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Servers/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServerResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServerResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes a Server associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the Server to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteAsync_1(int id)
        {
            return DeleteAsync_1(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a Server associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the Server to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteAsync_1(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Servers/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Retrieves logons and users with access to those logons for an existing server</summary>
        /// <param name="id">Id of the existing server</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServerAccessResponse> GetAccessAsync(int id)
        {
            return GetAccessAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves logons and users with access to those logons for an existing server</summary>
        /// <param name="id">Id of the existing server</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServerAccessResponse> GetAccessAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Servers/Access/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServerAccessResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServerAccessResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all servers according to the provided filter parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerResponse>> QueryServersAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending33? pq_sortAscending)
        {
            return QueryServersAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all servers according to the provided filter parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerResponse>> QueryServersAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending33? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Servers?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ServerResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<ServerResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates an existing server with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Server properties to be applied to the existing server</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServerResponse> UpdateServerAsync(ServerUpdateRequest body)
        {
            return UpdateServerAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates an existing server with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Server properties to be applied to the existing server</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServerResponse> UpdateServerAsync(ServerUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Servers");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServerResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServerResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a server with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Server properties to be applied to the newserver</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServerResponse> CreateServerAsync(ServerCreationRequest body)
        {
            return CreateServerAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a server with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Server properties to be applied to the newserver</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServerResponse> CreateServerAsync(ServerCreationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Servers");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServerResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServerResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates logons and users with access to those logons for an existing server</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Logons and users to be applied to the existing server</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServerAccessResponse> AddAccessAsync(ServerAccessRequest body)
        {
            return AddAccessAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates logons and users with access to those logons for an existing server</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Logons and users to be applied to the existing server</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServerAccessResponse> AddAccessAsync(ServerAccessRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Servers/Access");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServerAccessResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServerAccessResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates logons and users with access to those logons for an existing server</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Logons and users to be removed from the existing server</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServerAccessResponse> RemoveAccessAsync(ServerAccessRequest body)
        {
            return RemoveAccessAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates logons and users with access to those logons for an existing server</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Logons and users to be removed from the existing server</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServerAccessResponse> RemoveAccessAsync(ServerAccessRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Servers/Access");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServerAccessResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServerAccessResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns a ServerGroup associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifier of the ServerGroup</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServerGroupResponse> GetGroupAsync(System.Guid id)
        {
            return GetGroupAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a ServerGroup associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifier of the ServerGroup</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServerGroupResponse> GetGroupAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServerGroups/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServerGroupResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServerGroupResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes a ServerGroup associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the ServerGroup to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteAsync_2(System.Guid id)
        {
            return DeleteAsync_2(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a ServerGroup associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the ServerGroup to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteAsync_2(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServerGroups/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns a ServerGroup associated with the provided identifier</summary>
        /// <param name="name">name of the ServerGroup</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServerGroupResponse> GetGroupByNameAsync(string name)
        {
            return GetGroupByNameAsync(name, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a ServerGroup associated with the provided identifier</summary>
        /// <param name="name">name of the ServerGroup</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServerGroupResponse> GetGroupByNameAsync(string name, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServerGroups/{name}");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServerGroupResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServerGroupResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Retrieves logons and users with access to those logons for an existing server group</summary>
        /// <param name="id">Id of the existing server group</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServerGroupAccessResponse> GetAccessAsync(System.Guid id)
        {
            return GetAccessAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves logons and users with access to those logons for an existing server group</summary>
        /// <param name="id">Id of the existing server group</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServerGroupAccessResponse> GetAccessAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServerGroups/Access/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServerGroupAccessResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServerGroupAccessResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all server groups according to the provided filter parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerGroupResponse>> QueryServerGroupsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending34? pq_sortAscending)
        {
            return QueryServerGroupsAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all server groups according to the provided filter parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerGroupResponse>> QueryServerGroupsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending34? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServerGroups?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ServerGroupResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<ServerGroupResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates an existing server group with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Server group properties to be applied to the existing group</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServerGroupResponse> UpdateServerGroupAsync(ServerGroupUpdateRequest body)
        {
            return UpdateServerGroupAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates an existing server group with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Server group properties to be applied to the existing group</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServerGroupResponse> UpdateServerGroupAsync(ServerGroupUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServerGroups");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServerGroupResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServerGroupResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a server group with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Server group properties to be applied to the new group</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServerGroupResponse> CreateServerGroupAsync(ServerGroupCreationRequest body)
        {
            return CreateServerGroupAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a server group with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Server group properties to be applied to the new group</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServerGroupResponse> CreateServerGroupAsync(ServerGroupCreationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServerGroups");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServerGroupResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServerGroupResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Add access rules to the server group</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServerGroupAccessResponse> AddAccessAsync(ServerGroupAccessRequest body)
        {
            return AddAccessAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add access rules to the server group</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServerGroupAccessResponse> AddAccessAsync(ServerGroupAccessRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServerGroups/Access");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServerGroupAccessResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServerGroupAccessResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Removes access mappings for the specified server group</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServerGroupAccessResponse> RemoveAccessAsync(ServerGroupAccessRequest body)
        {
            return RemoveAccessAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes access mappings for the specified server group</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServerGroupAccessResponse> RemoveAccessAsync(ServerGroupAccessRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServerGroups/Access");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServerGroupAccessResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServerGroupAccessResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns a ServiceAccount associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifier of the ServiceAccount</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServiceAccountResponse> GetAsync_1(int id)
        {
            return GetAsync_1(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a ServiceAccount associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifier of the ServiceAccount</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServiceAccountResponse> GetAsync_1(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServiceAccounts/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceAccountResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServiceAccountResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes a ServiceAccount associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the ServiceAccount to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteServiceAccountAsync(int id)
        {
            return DeleteServiceAccountAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a ServiceAccount associated with the provided identifier</summary>
        /// <param name="id">Keyfactor identifer of the ServiceAccount to be deleted</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteServiceAccountAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServiceAccounts/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns an SSH key with or without private key based on the provided parameters.</summary>
        /// <param name="id">The id of the service account to obtain information on</param>
        /// <param name="includePrivateKey">Whether or not to include the private key in the response</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<KeyResponse> GetServiceAccountKeyAsync(int id, bool? includePrivateKey)
        {
            return GetServiceAccountKeyAsync(id, includePrivateKey, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns an SSH key with or without private key based on the provided parameters.</summary>
        /// <param name="id">The id of the service account to obtain information on</param>
        /// <param name="includePrivateKey">Whether or not to include the private key in the response</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<KeyResponse> GetServiceAccountKeyAsync(int id, bool? includePrivateKey, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServiceAccounts/Key/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includePrivateKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePrivateKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePrivateKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KeyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(KeyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all ServiceAccounts according to the provided filter parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceAccountResponse>> QueryServiceAccountsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending35? pq_sortAscending)
        {
            return QueryServiceAccountsAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all ServiceAccounts according to the provided filter parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceAccountResponse>> QueryServiceAccountsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending35? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServiceAccounts?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ServiceAccountResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<ServiceAccountResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates an SSH key for a specified service account.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The id of the service account and the updated state of the SSH key.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServiceAccountResponse> UpdateServiceAccountAsync(ServiceAccountUpdateRequest body)
        {
            return UpdateServiceAccountAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates an SSH key for a specified service account.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The id of the service account and the updated state of the SSH key.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServiceAccountResponse> UpdateServiceAccountAsync(ServiceAccountUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServiceAccounts");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceAccountResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServiceAccountResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a ServiceAccount with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">ServiceAccount properties to be applied to the new ServiceAccount</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ServiceAccountResponse> CreateServiceAccountAsync(ServiceAccountCreationRequest body)
        {
            return CreateServiceAccountAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a ServiceAccount with the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">ServiceAccount properties to be applied to the new ServiceAccount</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ServiceAccountResponse> CreateServiceAccountAsync(ServiceAccountCreationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServiceAccounts");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceAccountResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ServiceAccountResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes Service Accounts associated with the provided identifiers</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Keyfactor identifers of the ServiceAccounts to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteServiceAccountsAsync(System.Collections.Generic.IEnumerable<int> body)
        {
            return DeleteServiceAccountsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes Service Accounts associated with the provided identifiers</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Keyfactor identifers of the ServiceAccounts to be deleted</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteServiceAccountsAsync(System.Collections.Generic.IEnumerable<int> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServiceAccounts");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Rotate an SSH key for a specified service account.</summary>
        /// <param name="id">The id of the service account and the updated state of the SSH key.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<KeyResponse> RotateServiceAccountKeyAsync(int id, KeyGenerationRequest body)
        {
            return RotateServiceAccountKeyAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Rotate an SSH key for a specified service account.</summary>
        /// <param name="id">The id of the service account and the updated state of the SSH key.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<KeyResponse> RotateServiceAccountKeyAsync(int id, KeyGenerationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/ServiceAccounts/Rotate/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KeyResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(KeyResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Gets SMTP profile data</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SMTPResponse> SMTPAsync(string x_keyfactor_api_version)
        {
            return SMTPAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets SMTP profile data</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SMTPResponse> SMTPAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SMTP");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SMTPResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SMTPResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates SMTP profile data</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SMTPResponse> UpdateSMTPAsync(SMTPRequest body)
        {
            return UpdateSMTPAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates SMTP profile data</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SMTPResponse> UpdateSMTPAsync(SMTPRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SMTP");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SMTPResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SMTPResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Tests SMTP profile data</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SMTPTestResponse> TestSMTPAsync(SMTPTestRequest body)
        {
            return TestSMTPAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Tests SMTP profile data</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SMTPTestResponse> TestSMTPAsync(SMTPTestRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SMTP/Test");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SMTPTestResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SMTPTestResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns the execution details of the associated network scan job part</summary>
        /// <param name="id">Keyfactor identifier of the scan job part</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ScanJobPart> ScanPartAsync(System.Guid id)
        {
            return ScanPartAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the execution details of the associated network scan job part</summary>
        /// <param name="id">Keyfactor identifier of the scan job part</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ScanJobPart> ScanPartAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Parts/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScanJobPart>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ScanJobPart);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns the details of the associated scanning endpoint</summary>
        /// <param name="id">Keyfactor identifier of the endpoint</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Endpoint> EndpointAsync(System.Guid id)
        {
            return EndpointAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the details of the associated scanning endpoint</summary>
        /// <param name="id">Keyfactor identifier of the endpoint</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Endpoint> EndpointAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Endpoints/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Endpoint>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Endpoint);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns the network range definitions for the provided network definition</summary>
        /// <param name="id">Keyfactor network identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NetworkDefinition>> GetNetworkRangesForNetworkAsync(System.Guid id)
        {
            return GetNetworkRangesForNetworkAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the network range definitions for the provided network definition</summary>
        /// <param name="id">Keyfactor network identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NetworkDefinition>> GetNetworkRangesForNetworkAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/NetworkRanges/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NetworkDefinition>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<NetworkDefinition>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Removes all network range definitions from the associated network definition</summary>
        /// <param name="id">Keyfactor network definition identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveAllNetworkRangesAsync(System.Guid id)
        {
            return RemoveAllNetworkRangesAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes all network range definitions from the associated network definition</summary>
        /// <param name="id">Keyfactor network definition identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveAllNetworkRangesAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/NetworkRanges/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns a defined SSL network according to the provided name</summary>
        /// <param name="identifier">Identifier (Guid or Name) of the defined network</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<NetworkResponse> GetNetworkAsync(string identifier)
        {
            return GetNetworkAsync(identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a defined SSL network according to the provided name</summary>
        /// <param name="identifier">Identifier (Guid or Name) of the defined network</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<NetworkResponse> GetNetworkAsync(string identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (identifier == null)
                throw new System.ArgumentNullException("identifier");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Networks/{identifier}");
            urlBuilder_.Replace("{identifier}", System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NetworkResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(NetworkResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns a list of the endpoint scan results according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SslScanResult>> ResultsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending36? pq_sortAscending)
        {
            return ResultsAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a list of the endpoint scan results according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SslScanResult>> ResultsAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending36? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SslScanResult>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<SslScanResult>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all defined SSL networks according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="sq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="sq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="sq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="sq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="sq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NetworkQueryResponse>> GetNetworksAsync(string sq_queryString, int? sq_pageReturned, int? sq_returnLimit, string sq_sortField, SortAscending37? sq_sortAscending)
        {
            return GetNetworksAsync(sq_queryString, sq_pageReturned, sq_returnLimit, sq_sortField, sq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all defined SSL networks according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="sq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="sq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="sq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="sq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="sq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NetworkQueryResponse>> GetNetworksAsync(string sq_queryString, int? sq_pageReturned, int? sq_returnLimit, string sq_sortField, SortAscending37? sq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Networks?");
            if (sq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NetworkQueryResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<NetworkQueryResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates an existing network definition according to the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Properties of the network definition to be updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<NetworkResponse> UpdateNetworkAsync(UpdateNetworkRequest body)
        {
            return UpdateNetworkAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates an existing network definition according to the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Properties of the network definition to be updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<NetworkResponse> UpdateNetworkAsync(UpdateNetworkRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Networks");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NetworkResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(NetworkResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a network definition according to the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Properties of the network definition to be created</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<NetworkResponse> CreateNetworkAsync(CreateNetworkRequest body)
        {
            return CreateNetworkAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a network definition according to the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Properties of the network definition to be created</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<NetworkResponse> CreateNetworkAsync(CreateNetworkRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Networks");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NetworkResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(NetworkResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns a list of the scan results for the provided endpoint according to the provided filter and output parameters</summary>
        /// <param name="id">Keyfactor identifier of the endpoint</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EndpointHistoryResponse>> EndpointHistoryAsync(System.Guid id, string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending38? pq_sortAscending)
        {
            return EndpointHistoryAsync(id, pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a list of the scan results for the provided endpoint according to the provided filter and output parameters</summary>
        /// <param name="id">Keyfactor identifier of the endpoint</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EndpointHistoryResponse>> EndpointHistoryAsync(System.Guid id, string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending38? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Endpoints/{id}/History?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EndpointHistoryResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<EndpointHistoryResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns the scan job components comprising the entire scan job to be executed</summary>
        /// <param name="id">Keyfactor network definition identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DisplayScanJobPart>> NetworkScanPartsAsync(System.Guid id, JobType? pagedQuery_jobType, string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending39? pagedQuery_sortAscending)
        {
            return NetworkScanPartsAsync(id, pagedQuery_jobType, pagedQuery_queryString, pagedQuery_pageReturned, pagedQuery_returnLimit, pagedQuery_sortField, pagedQuery_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the scan job components comprising the entire scan job to be executed</summary>
        /// <param name="id">Keyfactor network definition identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DisplayScanJobPart>> NetworkScanPartsAsync(System.Guid id, JobType? pagedQuery_jobType, string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending39? pagedQuery_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Networks/{id}/Parts?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (pagedQuery_jobType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.jobType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_jobType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DisplayScanJobPart>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<DisplayScanJobPart>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Configures network range definitions for the provided network</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Network range defitions and the network to which they should be set</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SetNetworkRangesAsync(NetworkRangesRequest body)
        {
            return SetNetworkRangesAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Configures network range definitions for the provided network</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Network range defitions and the network to which they should be set</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SetNetworkRangesAsync(NetworkRangesRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/NetworkRanges");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Adds the provided network range definitions to the associated network definition</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Network definition identifier and the ranges to be added</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AddNetworkRangesAsync(NetworkRangesRequest body)
        {
            return AddNetworkRangesAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Adds the provided network range definitions to the associated network definition</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Network definition identifier and the ranges to be added</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AddNetworkRangesAsync(NetworkRangesRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/NetworkRanges");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Sets the reviewed status according to the provided endpoint and boolean status</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Endpoints and statuses for each</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ReviewedStatusAsync(System.Collections.Generic.IEnumerable<EndpointStatusRequest> body)
        {
            return ReviewedStatusAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sets the reviewed status according to the provided endpoint and boolean status</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Endpoints and statuses for each</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ReviewedStatusAsync(System.Collections.Generic.IEnumerable<EndpointStatusRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Endpoints/ReviewStatus");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Sets the monitored status according to the provided endpoint and boolean status</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Endpoints and statuses to be set for each</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task MonitoringStatusAsync(System.Collections.Generic.IEnumerable<EndpointStatusRequest> body)
        {
            return MonitoringStatusAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sets the monitored status according to the provided endpoint and boolean status</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Endpoints and statuses to be set for each</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task MonitoringStatusAsync(System.Collections.Generic.IEnumerable<EndpointStatusRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Endpoints/MonitorStatus");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Sets all endpoints matching the provided query as 'reviewed'</summary>
        /// <param name="query">Query to filter the endpoints for which the status should be set</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ReviewAllAsync(string query)
        {
            return ReviewAllAsync(query, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sets all endpoints matching the provided query as 'reviewed'</summary>
        /// <param name="query">Query to filter the endpoints for which the status should be set</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ReviewAllAsync(string query, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Endpoints/ReviewAll?");
            if (query != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Sets all endpoints matching the provided query as 'monitored'</summary>
        /// <param name="query">Query to filter the endpoints for which the status should be set</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task MonitorAllAsync(string query)
        {
            return MonitorAllAsync(query, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sets all endpoints matching the provided query as 'monitored'</summary>
        /// <param name="query">Query to filter the endpoints for which the status should be set</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task MonitorAllAsync(string query, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Endpoints/MonitorAll?");
            if (query != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Starts an SSL Scan for the network according to the associated network definition</summary>
        /// <param name="id">Keyfactor network identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Request for an immediate SSL Scan</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ImmediateSslScanAsync(System.Guid id, ImmediateSslScanRequest body)
        {
            return ImmediateSslScanAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Starts an SSL Scan for the network according to the associated network definition</summary>
        /// <param name="id">Keyfactor network identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Request for an immediate SSL Scan</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ImmediateSslScanAsync(System.Guid id, ImmediateSslScanRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Networks/{id}/Scan");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Validates the format (using regular expressions) of the provided network range definitions</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">List of the network range definitions to verify</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ValidateNetworkRangesAsync(System.Collections.Generic.IEnumerable<string> body)
        {
            return ValidateNetworkRangesAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Validates the format (using regular expressions) of the provided network range definitions</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">List of the network range definitions to verify</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ValidateNetworkRangesAsync(System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/NetworkRanges/Validate");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Removes a network definition according to the provided identifier</summary>
        /// <param name="id">Keyfactor network identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveNetworkAsync(System.Guid id)
        {
            return RemoveNetworkAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes a network definition according to the provided identifier</summary>
        /// <param name="id">Keyfactor network identifier</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveNetworkAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSL/Networks/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns all endpoints to which the requesting identity has access</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetEndpointsAsync(string x_keyfactor_api_version)
        {
            return GetEndpointsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all endpoints to which the requesting identity has access</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetEndpointsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Status/Endpoints");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<string>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns the certificate template associated with the provided id</summary>
        /// <param name="id">Keyfactor identifier of the certificate template</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TemplateRetrievalResponse> GetTemplateAsync(int id)
        {
            return GetTemplateAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the certificate template associated with the provided id</summary>
        /// <param name="id">Keyfactor identifier of the certificate template</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TemplateRetrievalResponse> GetTemplateAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Templates/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TemplateRetrievalResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(TemplateRetrievalResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets the global template settings.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GlobalTemplateSettingsResponse> GetGlobalSettingsAsync(string x_keyfactor_api_version)
        {
            return GetGlobalSettingsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the global template settings.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GlobalTemplateSettingsResponse> GetGlobalSettingsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Templates/Settings");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GlobalTemplateSettingsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GlobalTemplateSettingsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Replaces the existing global template settings.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The new global template settings.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GlobalTemplateSettingsResponse> UpdateGlobalSettingsAsync(GlobalTemplateSettingsRequest body)
        {
            return UpdateGlobalSettingsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Replaces the existing global template settings.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The new global template settings.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GlobalTemplateSettingsResponse> UpdateGlobalSettingsAsync(GlobalTemplateSettingsRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Templates/Settings");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GlobalTemplateSettingsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(GlobalTemplateSettingsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ValidSubjectPartResponse>> GetValidSubjectPartsAsync(string x_keyfactor_api_version)
        {
            return GetValidSubjectPartsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ValidSubjectPartResponse>> GetValidSubjectPartsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Templates/SubjectParts");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ValidSubjectPartResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<ValidSubjectPartResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns all certificate templates according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="sq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="sq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="sq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="sq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="sq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TemplateCollectionRetrievalResponse>> GetTemplatesAsync(string sq_queryString, int? sq_pageReturned, int? sq_returnLimit, string sq_sortField, SortAscending40? sq_sortAscending)
        {
            return GetTemplatesAsync(sq_queryString, sq_pageReturned, sq_returnLimit, sq_sortField, sq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns all certificate templates according to the provided filter and output parameters</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="sq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="sq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="sq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="sq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="sq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TemplateCollectionRetrievalResponse>> GetTemplatesAsync(string sq_queryString, int? sq_pageReturned, int? sq_returnLimit, string sq_sortField, SortAscending40? sq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Templates?");
            if (sq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TemplateCollectionRetrievalResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<TemplateCollectionRetrievalResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates a certificate template according to the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Properties of the certificate template to be updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TemplateRetrievalResponse> UpdateTemplateAsync(TemplateUpdateRequest body)
        {
            return UpdateTemplateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a certificate template according to the provided properties</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Properties of the certificate template to be updated</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TemplateRetrievalResponse> UpdateTemplateAsync(TemplateUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Templates");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TemplateRetrievalResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(TemplateRetrievalResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Imports templates from the provided configuration tenant</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Configuration tenant to import from</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ImportAsync(ConfigurationTenantRequest body)
        {
            return ImportAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Imports templates from the provided configuration tenant</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Configuration tenant to import from</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ImportAsync(ConfigurationTenantRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Templates/Import");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Looks up information about an existing SSH user.</summary>
        /// <param name="id">The Id of the SSH user to retrieve.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SshUserResponse> GetUserAsync(int id)
        {
            return GetUserAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Looks up information about an existing SSH user.</summary>
        /// <param name="id">The Id of the SSH user to retrieve.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SshUserResponse> GetUserAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Users/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SshUserResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SshUserResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes an SSH user.</summary>
        /// <param name="id">The Id of the user to delete.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteUserAsync(int id)
        {
            return DeleteUserAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes an SSH user.</summary>
        /// <param name="id">The Id of the user to delete.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteUserAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Users/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Returns users matching the criteria from the provided query parameters</summary>
        /// <param name="showOwnedAccess">Whether or not to return only logons that have access to servers the requesting user owns</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SshUserResponse>> QueryUsersAsync(bool? showOwnedAccess, string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending41? pq_sortAscending)
        {
            return QueryUsersAsync(showOwnedAccess, pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns users matching the criteria from the provided query parameters</summary>
        /// <param name="showOwnedAccess">Whether or not to return only logons that have access to servers the requesting user owns</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SshUserResponse>> QueryUsersAsync(bool? showOwnedAccess, string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending41? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Users?");
            if (showOwnedAccess != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showOwnedAccess") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showOwnedAccess, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SshUserResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<SshUserResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates information about a given user.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The new state of the SSH user to update.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SshUserResponse> UpdateUserAsync(SshUserUpdateRequest body)
        {
            return UpdateUserAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates information about a given user.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The new state of the SSH user to update.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SshUserResponse> UpdateUserAsync(SshUserUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Users");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SshUserResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SshUserResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a new SSH User.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">SSH user to be created.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SshUserResponse> CreateUserAsync(SshUserCreationRequest body)
        {
            return CreateUserAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new SSH User.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">SSH user to be created.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SshUserResponse> CreateUserAsync(SshUserCreationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Users");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SshUserResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SshUserResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates logon access for a user</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Logons to add the existing user</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SshUserAccessResponse> UserAccessAsync(SshUserUpdateRequest body)
        {
            return UserAccessAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates logon access for a user</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Logons to add the existing user</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SshUserAccessResponse> UserAccessAsync(SshUserUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SSH/Users/Access");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SshUserAccessResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(SshUserAccessResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Returns certificate request details based on the provided ID.</summary>
        /// <param name="id">The ID of the certificate request.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CertificateRequestDetailsModel> GetCertificateRequestDetailsAsync(int id)
        {
            return GetCertificateRequestDetailsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns certificate request details based on the provided ID.</summary>
        /// <param name="id">The ID of the certificate request.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CertificateRequestDetailsModel> GetCertificateRequestDetailsAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Certificates/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateRequestDetailsModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(CertificateRequestDetailsModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets a collection of denied certificate requests based on the provided query.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateRequestModel>> GetDeniedAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending42? pagedQuery_sortAscending)
        {
            return GetDeniedAsync(pagedQuery_queryString, pagedQuery_pageReturned, pagedQuery_returnLimit, pagedQuery_sortField, pagedQuery_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a collection of denied certificate requests based on the provided query.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateRequestModel>> GetDeniedAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending42? pagedQuery_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Certificates/Denied?");
            if (pagedQuery_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CertificateRequestModel>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CertificateRequestModel>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets a collection of certificate requests based on the provided query.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateRequestModel>> GetAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending43? pagedQuery_sortAscending)
        {
            return GetAsync(pagedQuery_queryString, pagedQuery_pageReturned, pagedQuery_returnLimit, pagedQuery_sortField, pagedQuery_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a collection of certificate requests based on the provided query.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pagedQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pagedQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pagedQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pagedQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pagedQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateRequestModel>> GetAsync(string pagedQuery_queryString, int? pagedQuery_pageReturned, int? pagedQuery_returnLimit, string pagedQuery_sortField, SortAscending43? pagedQuery_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Certificates/Pending?");
            if (pagedQuery_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pagedQuery_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pagedQuery.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagedQuery_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CertificateRequestModel>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<CertificateRequestModel>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Denies pending certificate requests associated with the provided ids</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Keyfactor identifiers of the certificate requests to be denied and any denial comments</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApproveDenyResult> DenyPendingRequestsAsync(DenialRequest body)
        {
            return DenyPendingRequestsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Denies pending certificate requests associated with the provided ids</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Keyfactor identifiers of the certificate requests to be denied and any denial comments</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApproveDenyResult> DenyPendingRequestsAsync(DenialRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Certificates/Deny");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApproveDenyResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ApproveDenyResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Approves pending certificate requests associated with the provided ids</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Array of Keyfactor identifiers of the certificate requests</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApproveDenyResult> ApprovePendingRequestsAsync(System.Collections.Generic.IEnumerable<int> body)
        {
            return ApprovePendingRequestsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Approves pending certificate requests associated with the provided ids</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">Array of Keyfactor identifiers of the certificate requests</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ApproveDenyResult> ApprovePendingRequestsAsync(System.Collections.Generic.IEnumerable<int> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Certificates/Approve");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApproveDenyResult>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ApproveDenyResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Gets the schema of a given step with the specified extension name.</summary>
        /// <param name="extensionName">The extension name of a specific step in the step schema.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AvailableStepResponse> GetStepSchemaAsync(string extensionName)
        {
            return GetStepSchemaAsync(extensionName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the schema of a given step with the specified extension name.</summary>
        /// <param name="extensionName">The extension name of a specific step in the step schema.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AvailableStepResponse> GetStepSchemaAsync(string extensionName, System.Threading.CancellationToken cancellationToken)
        {
            if (extensionName == null)
                throw new System.ArgumentNullException("extensionName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Definitions/Steps/{extensionName}");
            urlBuilder_.Replace("{extensionName}", System.Uri.EscapeDataString(ConvertToString(extensionName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AvailableStepResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AvailableStepResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets a workflow definition.</summary>
        /// <param name="definitionId">The Id of the definition to retrieve.</param>
        /// <param name="definitionVersion">The version to retrieve. If this value is not specified, the latest version will be returned.</param>
        /// <param name="exportable">Indicates if the response should be cleansed of role ids for export.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DefinitionResponse> GetAsync(System.Guid definitionId, int? definitionVersion, bool? exportable)
        {
            return GetAsync(definitionId, definitionVersion, exportable, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a workflow definition.</summary>
        /// <param name="definitionId">The Id of the definition to retrieve.</param>
        /// <param name="definitionVersion">The version to retrieve. If this value is not specified, the latest version will be returned.</param>
        /// <param name="exportable">Indicates if the response should be cleansed of role ids for export.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DefinitionResponse> GetAsync(System.Guid definitionId, int? definitionVersion, bool? exportable, System.Threading.CancellationToken cancellationToken)
        {
            if (definitionId == null)
                throw new System.ArgumentNullException("definitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Definitions/{definitionId}?");
            urlBuilder_.Replace("{definitionId}", System.Uri.EscapeDataString(ConvertToString(definitionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (definitionVersion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("definitionVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(definitionVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportable != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("exportable") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportable, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(DefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Updates the existing definition's DisplayName and Description.</summary>
        /// <param name="definitionId">The Id of the definition to update.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The {KeyfactorApi.Models.Workflows.DefinitionUpdateRequest} holding the updated DispalyName and Description.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DefinitionResponse> UpdateExistingDefinitionAsync(System.Guid definitionId, DefinitionUpdateRequest body)
        {
            return UpdateExistingDefinitionAsync(definitionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the existing definition's DisplayName and Description.</summary>
        /// <param name="definitionId">The Id of the definition to update.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The {KeyfactorApi.Models.Workflows.DefinitionUpdateRequest} holding the updated DispalyName and Description.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DefinitionResponse> UpdateExistingDefinitionAsync(System.Guid definitionId, DefinitionUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (definitionId == null)
                throw new System.ArgumentNullException("definitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Definitions/{definitionId}");
            urlBuilder_.Replace("{definitionId}", System.Uri.EscapeDataString(ConvertToString(definitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(DefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes the definition matching the given Id.</summary>
        /// <param name="definitionId">The Workflow Definition Id.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteAsync(System.Guid definitionId)
        {
            return DeleteAsync(definitionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the definition matching the given Id.</summary>
        /// <param name="definitionId">The Workflow Definition Id.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteAsync(System.Guid definitionId, System.Threading.CancellationToken cancellationToken)
        {
            if (definitionId == null)
                throw new System.ArgumentNullException("definitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Definitions/{definitionId}");
            urlBuilder_.Replace("{definitionId}", System.Uri.EscapeDataString(ConvertToString(definitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets the Definitions matching the query specifications.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DefinitionQueryResponse>> QueryAsync(string query_queryString, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending44? query_sortAscending)
        {
            return QueryAsync(query_queryString, query_pageReturned, query_returnLimit, query_sortField, query_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the Definitions matching the query specifications.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DefinitionQueryResponse>> QueryAsync(string query_queryString, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending44? query_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Definitions?");
            if (query_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DefinitionQueryResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<DefinitionQueryResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Creates a new base definition without any steps.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">A {KeyfactorApi.Models.Workflows.DefinitionCreateRequest} with the display name, description, key and type of the definition.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DefinitionResponse> CreateNewDefinitionAsync(DefinitionCreateRequest body)
        {
            return CreateNewDefinitionAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new base definition without any steps.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">A {KeyfactorApi.Models.Workflows.DefinitionCreateRequest} with the display name, description, key and type of the definition.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DefinitionResponse> CreateNewDefinitionAsync(DefinitionCreateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Definitions");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(DefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets the result set of available steps for a given query.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AvailableStepQueryResponse>> QueryAvailableStepsAsync(string query_queryString, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending45? query_sortAscending)
        {
            return QueryAvailableStepsAsync(query_queryString, query_pageReturned, query_returnLimit, query_sortField, query_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the result set of available steps for a given query.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AvailableStepQueryResponse>> QueryAvailableStepsAsync(string query_queryString, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending45? query_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Definitions/Steps?");
            if (query_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AvailableStepQueryResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<AvailableStepQueryResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Performs a query against the workflow types in the system.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkflowTypeQueryResponse>> QueryWorkflowTypesAsync(string query_queryString, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending46? query_sortAscending)
        {
            return QueryWorkflowTypesAsync(query_queryString, query_pageReturned, query_returnLimit, query_sortField, query_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Performs a query against the workflow types in the system.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="query_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="query_pageReturned">The current page within the result set to be returned</param>
        /// <param name="query_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="query_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="query_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkflowTypeQueryResponse>> QueryWorkflowTypesAsync(string query_queryString, int? query_pageReturned, int? query_returnLimit, string query_sortField, SortAscending46? query_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Definitions/Types?");
            if (query_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WorkflowTypeQueryResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<WorkflowTypeQueryResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Sets the provided steps on the latest version of the definition.</summary>
        /// <param name="definitionId">The Id of the definition.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">A collection of {KeyfactorApi.Models.Workflows.DefinitionStepRequest} defining the steps to set on the definition.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DefinitionResponse> ConfigureDefinitionStepsAsync(System.Guid definitionId, System.Collections.Generic.IEnumerable<DefinitionStepRequest> body)
        {
            return ConfigureDefinitionStepsAsync(definitionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Sets the provided steps on the latest version of the definition.</summary>
        /// <param name="definitionId">The Id of the definition.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">A collection of {KeyfactorApi.Models.Workflows.DefinitionStepRequest} defining the steps to set on the definition.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DefinitionResponse> ConfigureDefinitionStepsAsync(System.Guid definitionId, System.Collections.Generic.IEnumerable<DefinitionStepRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            if (definitionId == null)
                throw new System.ArgumentNullException("definitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Definitions/{definitionId}/Steps");
            urlBuilder_.Replace("{definitionId}", System.Uri.EscapeDataString(ConvertToString(definitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(DefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Makes the most recent version of a Workflow Definition the published version.</summary>
        /// <param name="definitionId">The Workflow Definition Id.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DefinitionResponse> PublishDefinitionAsync(System.Guid definitionId)
        {
            return PublishDefinitionAsync(definitionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Makes the most recent version of a Workflow Definition the published version.</summary>
        /// <param name="definitionId">The Workflow Definition Id.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DefinitionResponse> PublishDefinitionAsync(System.Guid definitionId, System.Threading.CancellationToken cancellationToken)
        {
            if (definitionId == null)
                throw new System.ArgumentNullException("definitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Definitions/{definitionId}/Publish");
            urlBuilder_.Replace("{definitionId}", System.Uri.EscapeDataString(ConvertToString(definitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(DefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }








        /// <summary>Get information relevant for knowing where an instance is in its workflow.</summary>
        /// <param name="instanceId">The {System.Guid} identifying the instance.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<InstanceResponse> GetAsync(System.Guid instanceId)
        {
            return GetAsync(instanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get information relevant for knowing where an instance is in its workflow.</summary>
        /// <param name="instanceId">The {System.Guid} identifying the instance.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<InstanceResponse> GetAsync(System.Guid instanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Instances/{instanceId}");
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InstanceResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(InstanceResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Deletes the specified instance.</summary>
        /// <param name="instanceId">The Id of the instance to be deleted.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteInstanceAsync(System.Guid instanceId)
        {
            return DeleteInstanceAsync(instanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the specified instance.</summary>
        /// <param name="instanceId">The Id of the instance to be deleted.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteInstanceAsync(System.Guid instanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Instances/{instanceId}");
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets the workflow instances matching the query specifications.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InstanceQueryResponse>> QueryAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending47? pq_sortAscending)
        {
            return QueryAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the workflow instances matching the query specifications.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InstanceQueryResponse>> QueryAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending47? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Instances?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InstanceQueryResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<InstanceQueryResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets the workflow instances started by the user.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="instanceQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="instanceQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="instanceQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="instanceQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="instanceQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InstanceQueryResponse>> QueryInstancesStartedByMeAsync(string instanceQuery_queryString, int? instanceQuery_pageReturned, int? instanceQuery_returnLimit, string instanceQuery_sortField, SortAscending48? instanceQuery_sortAscending)
        {
            return QueryInstancesStartedByMeAsync(instanceQuery_queryString, instanceQuery_pageReturned, instanceQuery_returnLimit, instanceQuery_sortField, instanceQuery_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the workflow instances started by the user.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="instanceQuery_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="instanceQuery_pageReturned">The current page within the result set to be returned</param>
        /// <param name="instanceQuery_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="instanceQuery_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="instanceQuery_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InstanceQueryResponse>> QueryInstancesStartedByMeAsync(string instanceQuery_queryString, int? instanceQuery_pageReturned, int? instanceQuery_returnLimit, string instanceQuery_sortField, SortAscending48? instanceQuery_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Instances/My?");
            if (instanceQuery_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceQuery.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(instanceQuery_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (instanceQuery_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceQuery.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(instanceQuery_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (instanceQuery_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceQuery.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(instanceQuery_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (instanceQuery_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceQuery.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(instanceQuery_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (instanceQuery_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("instanceQuery.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(instanceQuery_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InstanceQueryResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<InstanceQueryResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Gets the workflow instances waiting on the user.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InstanceQueryResponse>> QueryInstancesAssignedToMeAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending49? pq_sortAscending)
        {
            return QueryInstancesAssignedToMeAsync(pq_queryString, pq_pageReturned, pq_returnLimit, pq_sortField, pq_sortAscending, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the workflow instances waiting on the user.</summary>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="pq_queryString">Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</param>
        /// <param name="pq_pageReturned">The current page within the result set to be returned</param>
        /// <param name="pq_returnLimit">Maximum number of records to be returned in a single call</param>
        /// <param name="pq_sortField">Field by which the results should be sorted (view results via Management Portal for sortable columns)</param>
        /// <param name="pq_sortAscending">Field sort direction [0=ascending, 1=descending]</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InstanceQueryResponse>> QueryInstancesAssignedToMeAsync(string pq_queryString, int? pq_pageReturned, int? pq_returnLimit, string pq_sortField, SortAscending49? pq_sortAscending, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Instances/AssignedToMe?");
            if (pq_queryString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_pageReturned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.pageReturned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_pageReturned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_returnLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.returnLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_returnLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pq_sortAscending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pq.sortAscending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pq_sortAscending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InstanceQueryResponse>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<InstanceQueryResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Rejects an instance, preventing it from continuing.</summary>
        /// <param name="instanceId">The Id of the instance to reject.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StopAsync(System.Guid instanceId)
        {
            return StopAsync(instanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Rejects an instance, preventing it from continuing.</summary>
        /// <param name="instanceId">The Id of the instance to reject.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task StopAsync(System.Guid instanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Instances/{instanceId}/Stop");
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Receives the given signal for the given instance.</summary>
        /// <param name="instanceId">The instance that is receiving the signal.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The signal to receive.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SignalAsync(System.Guid instanceId, SignalRequest body)
        {
            return SignalAsync(instanceId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receives the given signal for the given instance.</summary>
        /// <param name="instanceId">The instance that is receiving the signal.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <param name="body">The signal to receive.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SignalAsync(System.Guid instanceId, SignalRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Instances/{instanceId}/Signals");
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Restarts a failed instance against the specified definition version or the published version if no version is specified.</summary>
        /// <param name="instanceId">The instance Id to restart.</param>
        /// <param name="version">The version of the definition to restart the instance against. Defaults to the published version.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RestartAsync(System.Guid instanceId, int? version)
        {
            return RestartAsync(instanceId, version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Restarts a failed instance against the specified definition version or the published version if no version is specified.</summary>
        /// <param name="instanceId">The instance Id to restart.</param>
        /// <param name="version">The version of the definition to restart the instance against. Defaults to the published version.</param>
        /// <param name="x_keyfactor_api_version">Desired version of the api, if not provided defaults to v1</param>
        /// <param name="x_keyfactor_requested_with">Type of the request [XMLHttpRequest, APIClient]</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RestartAsync(System.Guid instanceId, int? version, System.Threading.CancellationToken cancellationToken)
        {
            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Workflow/Instances/{instanceId}/Restart?");
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));
            if (version != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("version") + "=").Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_keyfactor_api_version != null)
                        request_.Headers.TryAddWithoutValidation("x-keyfactor-api-version", ConvertToString(x_keyfactor_api_version, System.Globalization.CultureInfo.InvariantCulture));
                    if (x_keyfactor_requested_with == null)
                        throw new System.ArgumentNullException("x_keyfactor_requested_with");
                    request_.Headers.TryAddWithoutValidation("x-keyfactor-requested-with", ConvertToString(x_keyfactor_requested_with, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ( (int)response_.StatusCode ).ToString();
                        if (status_ == "204")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }






    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentResponse
    {
        [Newtonsoft.Json.JsonProperty("AgentId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentId { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientMachine", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ClientMachine { get; set; }

        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentPlatform", Required = Newtonsoft.Json.Required.AllowNull)]
        public AgentResponseAgentPlatform AgentPlatform { get; set; }

        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.AllowNull)]
        public AgentResponseStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("LastSeen", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset LastSeen { get; set; }

        [Newtonsoft.Json.JsonProperty("Capabilities", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Capabilities { get; set; }

        [Newtonsoft.Json.JsonProperty("Blueprint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Blueprint { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("LegacyThumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string LegacyThumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthCertificateReenrollment", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AuthCertificateReenrollment { get; set; }

        [Newtonsoft.Json.JsonProperty("LastThumbprintUsed", Required = Newtonsoft.Json.Required.AllowNull)]
        public string LastThumbprintUsed { get; set; }

        [Newtonsoft.Json.JsonProperty("LastErrorCode", Required = Newtonsoft.Json.Required.AllowNull)]
        public long LastErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("LastErrorMessage", Required = Newtonsoft.Json.Required.AllowNull)]
        public string LastErrorMessage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>A query result set with parameters to define the format of Agent records</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedAgentQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedAgentQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateOrchestratorAuthCertificateReenrollmentRequest
    {
        [Newtonsoft.Json.JsonProperty("OrchestratorIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> OrchestratorIds { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateOrchestratorAuthCertificateReenrollmentResponse
    {
        [Newtonsoft.Json.JsonProperty("FailedOrchestratorIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> FailedOrchestratorIds { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.AllowNull)]
        public UpdateOrchestratorAuthCertificateReenrollmentResponseStatus Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentBlueprintResponse
    {
        [Newtonsoft.Json.JsonProperty("AgentBlueprintId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentBlueprintId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("RequiredCapabilities", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> RequiredCapabilities { get; set; }

        [Newtonsoft.Json.JsonProperty("LastModified", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset LastModified { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedAgentBlueprintQuery
    {
        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Number of records to be skipped before inclusion in the result set</summary>
        [Newtonsoft.Json.JsonProperty("SkipCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? SkipCount { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedAgentBlueprintQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedAgentBlueprintJobsQuery
    {
        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Number of records to be skipped before inclusion in the result set</summary>
        [Newtonsoft.Json.JsonProperty("SkipCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? SkipCount { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedAgentBlueprintJobsQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentBlueprintJobsResponse
    {
        [Newtonsoft.Json.JsonProperty("AgentBlueprintJobId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentBlueprintJobId { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentBlueprintStoreId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentBlueprintStoreId { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentBlueprintId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentBlueprintId { get; set; }

        [Newtonsoft.Json.JsonProperty("JobType", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid JobType { get; set; }

        [Newtonsoft.Json.JsonProperty("JobTypeName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string JobTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? OperationType { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("Contents", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Contents { get; set; }

        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("PrivateKeyEntry", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? PrivateKeyEntry { get; set; }

        [Newtonsoft.Json.JsonProperty("Overwrite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Overwrite { get; set; }

        [Newtonsoft.Json.JsonProperty("HasEntryPassword", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? HasEntryPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("HasPfxPassword", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? HasPfxPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestTimestamp", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset RequestTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyfactorSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule KeyfactorSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Directories", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Directories { get; set; }

        [Newtonsoft.Json.JsonProperty("IgnoredDirectories", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IgnoredDirectories { get; set; }

        [Newtonsoft.Json.JsonProperty("SymLinks", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SymLinks { get; set; }

        [Newtonsoft.Json.JsonProperty("Compatibility", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Compatibility { get; set; }

        [Newtonsoft.Json.JsonProperty("FileExtensions", Required = Newtonsoft.Json.Required.AllowNull)]
        public string FileExtensions { get; set; }

        [Newtonsoft.Json.JsonProperty("FileNamePatterns", Required = Newtonsoft.Json.Required.AllowNull)]
        public string FileNamePatterns { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentBlueprintStores", Required = Newtonsoft.Json.Required.AllowNull)]
        public AgentBlueprintStoresResponse AgentBlueprintStores { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyfactorSchedule
    {
        [Newtonsoft.Json.JsonProperty("Immediate", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Immediate { get; set; }

        [Newtonsoft.Json.JsonProperty("Interval", Required = Newtonsoft.Json.Required.AllowNull)]
        public IntervalModel Interval { get; set; }

        [Newtonsoft.Json.JsonProperty("Daily", Required = Newtonsoft.Json.Required.AllowNull)]
        public TimeModel Daily { get; set; }

        [Newtonsoft.Json.JsonProperty("Weekly", Required = Newtonsoft.Json.Required.AllowNull)]
        public WeeklyModel Weekly { get; set; }

        [Newtonsoft.Json.JsonProperty("Monthly", Required = Newtonsoft.Json.Required.AllowNull)]
        public MonthlyModel Monthly { get; set; }

        [Newtonsoft.Json.JsonProperty("ExactlyOnce", Required = Newtonsoft.Json.Required.AllowNull)]
        public TimeModel ExactlyOnce { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentBlueprintStoresResponse
    {
        [Newtonsoft.Json.JsonProperty("AgentBlueprintStoreId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentBlueprintStoreId { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentBlueprintId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentBlueprintId { get; set; }

        [Newtonsoft.Json.JsonProperty("StorePath", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StorePath { get; set; }

        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ContainerId { get; set; }

        [Newtonsoft.Json.JsonProperty("CertStoreType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertStoreType { get; set; }

        [Newtonsoft.Json.JsonProperty("CertStoreTypeName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CertStoreTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Approved", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Approved { get; set; }

        [Newtonsoft.Json.JsonProperty("CreateIfMissing", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? CreateIfMissing { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Properties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IntervalModel
    {
        [Newtonsoft.Json.JsonProperty("Minutes", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Minutes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TimeModel
    {
        [Newtonsoft.Json.JsonProperty("Time", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeeklyModel
    {
        [Newtonsoft.Json.JsonProperty("Days", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<Days> Days { get; set; }

        [Newtonsoft.Json.JsonProperty("Time", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MonthlyModel
    {
        [Newtonsoft.Json.JsonProperty("Day", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Day { get; set; }

        [Newtonsoft.Json.JsonProperty("Time", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedAgentBlueprintStoresQuery
    {
        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Number of records to be skipped before inclusion in the result set</summary>
        [Newtonsoft.Json.JsonProperty("SkipCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? SkipCount { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedAgentBlueprintStoresQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Class representing an SSL agent pool</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentPool
    {
        /// <summary>GUID identifier of the agent pool</summary>
        [Newtonsoft.Json.JsonProperty("AgentPoolId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentPoolId { get; set; }

        /// <summary>Name of the agent pool</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>Number of agents that can perform discovery jobs</summary>
        [Newtonsoft.Json.JsonProperty("DiscoverAgentsCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? DiscoverAgentsCount { get; set; }

        /// <summary>Number of agents that can perform monitoring jobs</summary>
        [Newtonsoft.Json.JsonProperty("MonitorAgentsCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? MonitorAgentsCount { get; set; }

        /// <summary>List of the agents assigned to the pool</summary>
        [Newtonsoft.Json.JsonProperty("Agents", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<AgentPoolAgent> Agents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AgentPoolAgent
    {
        [Newtonsoft.Json.JsonProperty("AgentId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentId { get; set; }

        [Newtonsoft.Json.JsonProperty("EnableDiscover", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? EnableDiscover { get; set; }

        [Newtonsoft.Json.JsonProperty("EnableMonitor", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? EnableMonitor { get; set; }

        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowsDiscover", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AllowsDiscover { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowsMonitor", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AllowsMonitor { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientMachine", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ClientMachine { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedAgentPoolQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedAgentPoolQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedAgentPoolAgentsQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedAgentPoolAgentsQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedAuditLogQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedAuditLogQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AuditLogEntry
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Signature", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Signature { get; set; }

        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Category { get; set; }

        [Newtonsoft.Json.JsonProperty("Operation", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Operation { get; set; }

        [Newtonsoft.Json.JsonProperty("Level", Required = Newtonsoft.Json.Required.AllowNull)]
        public AuditLogEntryLevel Level { get; set; }

        [Newtonsoft.Json.JsonProperty("User", Required = Newtonsoft.Json.Required.AllowNull)]
        public string User { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string EntityType { get; set; }

        [Newtonsoft.Json.JsonProperty("AuditIdentifier", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AuditIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("ImmutableIdentifier", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ImmutableIdentifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>A list of permissions for a given certificate and which security role(s) granted them.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificatePermissions
    {
        [Newtonsoft.Json.JsonProperty("Roles", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<SecurityRoleResponseBase> Roles { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SecurityRoleResponseBase
    {
        /// <summary>The name of the created role</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        /// <summary>The permissions included in the created security role</summary>
        [Newtonsoft.Json.JsonProperty("Permissions", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateValidationResponse
    {
        /// <summary>States whether the certificate is valid or not</summary>
        [Newtonsoft.Json.JsonProperty("Valid", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Valid { get; set; }

        /// <summary>Lists any reasons why the certificate is not valid</summary>
        [Newtonsoft.Json.JsonProperty("Results", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> Results { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateLocationsResponse
    {
        [Newtonsoft.Json.JsonProperty("Details", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateLocationsGroup> Details { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateLocationsGroup
    {
        [Newtonsoft.Json.JsonProperty("StoreType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StoreType { get; set; }

        [Newtonsoft.Json.JsonProperty("StoreTypeId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StoreTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("StoreCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StoreCount { get; set; }

        [Newtonsoft.Json.JsonProperty("Locations", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateStoreLocationsDetail> Locations { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreLocationsDetail
    {
        [Newtonsoft.Json.JsonProperty("StoreId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid StoreId { get; set; }

        [Newtonsoft.Json.JsonProperty("StoreTypeId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StoreTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientMachine", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ClientMachine { get; set; }

        [Newtonsoft.Json.JsonProperty("StorePath", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StorePath { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentPool", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AgentPool { get; set; }

        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("IPAddress", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IPAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Port { get; set; }

        [Newtonsoft.Json.JsonProperty("NetworkName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string NetworkName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Represents an account with a list of permission granted to it on a given certificate by either a role or collection</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateIdentityAuditResponse
    {
        /// <summary>Id of the account represented by the audit response</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        /// <summary>Name of the account represented by the audit response</summary>
        [Newtonsoft.Json.JsonProperty("AccountName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AccountName { get; set; }

        /// <summary>The type of account represented by the audit response (User or Group)</summary>
        [Newtonsoft.Json.JsonProperty("IdentityType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IdentityType { get; set; }

        /// <summary>The SID of the account represented by the audit reponse</summary>
        [Newtonsoft.Json.JsonProperty("SID", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SID { get; set; }

        /// <summary>Permissions granted to the account represented by the audit reponse on the specified certifcate</summary>
        [Newtonsoft.Json.JsonProperty("Permissions", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificatePermission> Permissions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Represents a permission granted to an account for a certificate</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificatePermission
    {
        /// <summary>The name of the permission</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        /// <summary>A list of roles or collections that grant the given permission</summary>
        [Newtonsoft.Json.JsonProperty("GrantedBy", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> GrantedBy { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateRetrievalResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string SerialNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuedDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuedDN { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuedCN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuedCN { get; set; }

        [Newtonsoft.Json.JsonProperty("ImportDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset ImportDate { get; set; }

        [Newtonsoft.Json.JsonProperty("NotBefore", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset NotBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("NotAfter", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset NotAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuerDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuerDN { get; set; }

        [Newtonsoft.Json.JsonProperty("PrincipalId", Required = Newtonsoft.Json.Required.Default)]
        public int? PrincipalId { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("CertState", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateRetrievalResponseCertState CertState { get; set; }

        [Newtonsoft.Json.JsonProperty("KeySizeInBits", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeySizeInBits { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyType", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateRetrievalResponseKeyType KeyType { get; set; }

        [Newtonsoft.Json.JsonProperty("RequesterId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? RequesterId { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuedOU", Required = Newtonsoft.Json.Required.Default)]
        public string IssuedOU { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuedEmail", Required = Newtonsoft.Json.Required.Default)]
        public string IssuedEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyUsage", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyUsage { get; set; }

        [Newtonsoft.Json.JsonProperty("SigningAlgorithm", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SigningAlgorithm { get; set; }

        [Newtonsoft.Json.JsonProperty("CertStateString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CertStateString { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyTypeString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeyTypeString { get; set; }

        [Newtonsoft.Json.JsonProperty("RevocationEffDate", Required = Newtonsoft.Json.Required.Default)]
        public System.DateTimeOffset? RevocationEffDate { get; set; }

        [Newtonsoft.Json.JsonProperty("RevocationReason", Required = Newtonsoft.Json.Required.Default)]
        public CertificateRetrievalResponseRevocationReason? RevocationReason { get; set; }

        [Newtonsoft.Json.JsonProperty("RevocationComment", Required = Newtonsoft.Json.Required.Default)]
        public string RevocationComment { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateAuthorityId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertificateAuthorityId { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateAuthorityName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CertificateAuthorityName { get; set; }

        /// <summary>Full template display name.</summary>
        [Newtonsoft.Json.JsonProperty("TemplateName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string TemplateName { get; set; }

        [Newtonsoft.Json.JsonProperty("ArchivedKey", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ArchivedKey { get; set; }

        [Newtonsoft.Json.JsonProperty("HasPrivateKey", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? HasPrivateKey { get; set; }

        [Newtonsoft.Json.JsonProperty("PrincipalName", Required = Newtonsoft.Json.Required.Default)]
        public string PrincipalName { get; set; }

        [Newtonsoft.Json.JsonProperty("CertRequestId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertRequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("RequesterName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string RequesterName { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentBytes", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public byte[] ContentBytes { get; set; }

        [Newtonsoft.Json.JsonProperty("ExtendedKeyUsages", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ExtendedKeyUsageModel> ExtendedKeyUsages { get; set; }

        [Newtonsoft.Json.JsonProperty("SubjectAltNameElements", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<SubjectAlternativeNameModel> SubjectAltNameElements { get; set; }

        [Newtonsoft.Json.JsonProperty("CRLDistributionPoints", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CRLDistributionPointModel> CRLDistributionPoints { get; set; }

        [Newtonsoft.Json.JsonProperty("LocationsCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<LocationCountModel> LocationsCount { get; set; }

        [Newtonsoft.Json.JsonProperty("SSLLocations", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateStoreLocationDetailModel> SSLLocations { get; set; }

        [Newtonsoft.Json.JsonProperty("Locations", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateStoreInventoryItemModel> Locations { get; set; }

        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateKeyId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertificateKeyId { get; set; }

        [Newtonsoft.Json.JsonProperty("CARowIndex", Required = Newtonsoft.Json.Required.AllowNull)]
        public long CARowIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("CARecordId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CARecordId { get; set; }

        [Newtonsoft.Json.JsonProperty("DetailedKeyUsage", Required = Newtonsoft.Json.Required.AllowNull)]
        public DetailedKeyUsageModel DetailedKeyUsage { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyRecoverable", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? KeyRecoverable { get; set; }

        [Newtonsoft.Json.JsonProperty("Curve", Required = Newtonsoft.Json.Required.Default)]
        public string Curve { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExtendedKeyUsageModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Oid", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Oid { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SubjectAlternativeNameModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.AllowNull)]
        public SubjectAlternativeNameModelType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueHash", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string ValueHash { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CRLDistributionPointModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("UrlHash", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string UrlHash { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LocationCountModel
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreLocationDetailModel
    {
        [Newtonsoft.Json.JsonProperty("StorePath", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StorePath { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentPool", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AgentPool { get; set; }

        [Newtonsoft.Json.JsonProperty("IPAddress", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IPAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Port { get; set; }

        [Newtonsoft.Json.JsonProperty("NetworkName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string NetworkName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreInventoryItemModel
    {
        [Newtonsoft.Json.JsonProperty("StoreMachine", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StoreMachine { get; set; }

        [Newtonsoft.Json.JsonProperty("StorePath", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StorePath { get; set; }

        [Newtonsoft.Json.JsonProperty("StoreType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StoreType { get; set; }

        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("ChainLevel", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ChainLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("CertStoreId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid CertStoreId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DetailedKeyUsageModel
    {
        [Newtonsoft.Json.JsonProperty("CrlSign", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? CrlSign { get; set; }

        [Newtonsoft.Json.JsonProperty("DataEncipherment", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? DataEncipherment { get; set; }

        [Newtonsoft.Json.JsonProperty("DecipherOnly", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? DecipherOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("DigitalSignature", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? DigitalSignature { get; set; }

        [Newtonsoft.Json.JsonProperty("EncipherOnly", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? EncipherOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyAgreement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? KeyAgreement { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyCertSign", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? KeyCertSign { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyEncipherment", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? KeyEncipherment { get; set; }

        [Newtonsoft.Json.JsonProperty("NonRepudiation", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? NonRepudiation { get; set; }

        [Newtonsoft.Json.JsonProperty("HexCode", Required = Newtonsoft.Json.Required.AllowNull)]
        public string HexCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedCertificateHistoryQuery
    {
        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedCertificateHistoryQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Details of an operation done on a certificate.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateOperation
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationStart", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset OperationStart { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationEnd", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset OperationEnd { get; set; }

        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Action { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateQueryRequest
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateQueryRequestSortAscending SortAscending { get; set; }

        /// <summary>Select 'true' to include revoked certificates in the results</summary>
        [Newtonsoft.Json.JsonProperty("IncludeRevoked", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IncludeRevoked { get; set; }

        /// <summary>Select 'true' to include expired certificates in the results</summary>
        [Newtonsoft.Json.JsonProperty("IncludeExpired", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IncludeExpired { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MetadataUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MetadataAllUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Query", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Query { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> CertificateIds { get; set; }

        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MetadataSingleUpdateRequest> Metadata { get; set; } = new System.Collections.ObjectModel.Collection<MetadataSingleUpdateRequest>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MetadataSingleUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("MetadataName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string MetadataName { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("OverwriteExisting", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? OverwriteExisting { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Class representing a request to import a certificate into Keyfactor Command</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateImportRequestModel
    {
        /// <summary>Base64-encoded certificate contents</summary>
        [Newtonsoft.Json.JsonProperty("Certificate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Certificate { get; set; }

        /// <summary>Optional password associated if required for a PFX</summary>
        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Password { get; set; }

        /// <summary>Colleciton of metadata to be associated with the imported certificate</summary>
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        /// <summary>List of the Keyfactor certificate store identifiers (GUID) with which the imported certificate should be associated</summary>
        [Newtonsoft.Json.JsonProperty("StoreIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<System.Guid> StoreIds { get; set; }

        /// <summary>List of the certificate store types with with the imported certificate should be associated</summary>
        [Newtonsoft.Json.JsonProperty("StoreTypes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ManagementStoreType> StoreTypes { get; set; }

        /// <summary>Schedule on which the certificate should be imported</summary>
        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset Schedule { get; set; }

        /// <summary>Whether or not we should validate and import the certificate's metadata.</summary>
        [Newtonsoft.Json.JsonProperty("ImportMetadata", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ImportMetadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagementStoreType
    {
        [Newtonsoft.Json.JsonProperty("StoreTypeId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StoreTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("Overwrite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Overwrite { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<object> Properties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateImportResponseModel
    {
        [Newtonsoft.Json.JsonProperty("ImportStatus", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateImportResponseModelImportStatus ImportStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("JobStatus", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateImportResponseModelJobStatus JobStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("InvalidKeystores", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<InvalidKeystore> InvalidKeystores { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string Thumbprint { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InvalidKeystore
    {
        [Newtonsoft.Json.JsonProperty("KeystoreId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid KeystoreId { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientMachine", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ClientMachine { get; set; }

        [Newtonsoft.Json.JsonProperty("StorePath", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StorePath { get; set; }

        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.AllowNull)]
        public InvalidKeystoreReason Reason { get; set; }

        [Newtonsoft.Json.JsonProperty("Explanation", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Explanation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RevokeCertificateRequest
    {
        [Newtonsoft.Json.JsonProperty("CertificateIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> CertificateIds { get; set; }

        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.AllowNull)]
        public RevokeCertificateRequestReason Reason { get; set; }

        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("EffectiveDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset EffectiveDate { get; set; }

        [Newtonsoft.Json.JsonProperty("CollectionId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CollectionId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RevocationResponse
    {
        [Newtonsoft.Json.JsonProperty("RevokedIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> RevokedIds { get; set; }

        [Newtonsoft.Json.JsonProperty("SuspendedCerts", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<SuspendedRevocationResponse> SuspendedCerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SuspendedRevocationResponse
    {
        [Newtonsoft.Json.JsonProperty("CertId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertId { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkflowId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid WorkflowId { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AnalyzeCertificateRequest
    {
        [Newtonsoft.Json.JsonProperty("Certificate", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Certificate { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateDetails
    {
        [Newtonsoft.Json.JsonProperty("IssuedDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuedDN { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuerDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuerDN { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("NotAfter", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset NotAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("NotBefore", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset NotBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEndEntity", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IsEndEntity { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateRecoveryRequest
    {
        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("CertID", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertID { get; set; }

        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string SerialNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuerDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuerDN { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("IncludeChain", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IncludeChain { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RecoveryResponse
    {
        [Newtonsoft.Json.JsonProperty("PFX", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public byte[] PFX { get; set; }

        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string FileName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateDownloadRequest
    {
        [Newtonsoft.Json.JsonProperty("CertID", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertID { get; set; }

        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string SerialNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuerDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuerDN { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("IncludeChain", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IncludeChain { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateDownloadResponse
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public byte[] Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Information for revoking all certifictes in a query</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RevokeAllCertificatesRequest
    {
        /// <summary>The query string of the certificates to revoke</summary>
        [Newtonsoft.Json.JsonProperty("Query", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Query { get; set; }

        /// <summary>The Reason for revocation</summary>
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Always)]
        public RevokeAllCertificatesRequestReason Reason { get; set; }

        /// <summary>A comment for auditing purposes</summary>
        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Comment { get; set; }

        /// <summary>The date when the certificates are to appear on the revocation list</summary>
        [Newtonsoft.Json.JsonProperty("EffectiveDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset EffectiveDate { get; set; }

        /// <summary>A flag telling the query to include revoked certificates</summary>
        [Newtonsoft.Json.JsonProperty("IncludeRevoked", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IncludeRevoked { get; set; }

        /// <summary>A flag telling the query to include expired certificates</summary>
        [Newtonsoft.Json.JsonProperty("IncludeExpired", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IncludeExpired { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateAuthorityResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("LogicalName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string LogicalName { get; set; }

        [Newtonsoft.Json.JsonProperty("HostName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string HostName { get; set; }

        [Newtonsoft.Json.JsonProperty("Delegate", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Delegate { get; set; }

        [Newtonsoft.Json.JsonProperty("DelegateEnrollment", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? DelegateEnrollment { get; set; }

        [Newtonsoft.Json.JsonProperty("ForestRoot", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ForestRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("ConfigurationTenant", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ConfigurationTenant { get; set; }

        [Newtonsoft.Json.JsonProperty("Remote", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Remote { get; set; }

        [Newtonsoft.Json.JsonProperty("Agent", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Agent { get; set; }

        [Newtonsoft.Json.JsonProperty("Standalone", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Standalone { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorThresholds", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? MonitorThresholds { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuanceMax", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? IssuanceMax { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuanceMin", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? IssuanceMin { get; set; }

        [Newtonsoft.Json.JsonProperty("DenialMax", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? DenialMax { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureMax", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? FailureMax { get; set; }

        [Newtonsoft.Json.JsonProperty("RFCEnforcement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RFCEnforcement { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedEnrollmentTypes", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateAuthorityResponseAllowedEnrollmentTypes AllowedEnrollmentTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyRetention", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateAuthorityResponseKeyRetention KeyRetention { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyRetentionDays", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyRetentionDays { get; set; }

        [Newtonsoft.Json.JsonProperty("ExplicitCredentials", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ExplicitCredentials { get; set; }

        [Newtonsoft.Json.JsonProperty("SubscriberTerms", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SubscriberTerms { get; set; }

        [Newtonsoft.Json.JsonProperty("ExplicitUser", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ExplicitUser { get; set; }

        [Newtonsoft.Json.JsonProperty("ExplicitPassword", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorAPISecret ExplicitPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("UseAllowedRequesters", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UseAllowedRequesters { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedRequesters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> AllowedRequesters { get; set; }

        [Newtonsoft.Json.JsonProperty("FullScan", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule FullScan { get; set; }

        [Newtonsoft.Json.JsonProperty("IncrementalScan", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule IncrementalScan { get; set; }

        [Newtonsoft.Json.JsonProperty("ThresholdCheck", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule ThresholdCheck { get; set; }

        [Newtonsoft.Json.JsonProperty("CAType", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateAuthorityResponseCAType CAType { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthCertificate", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateAuthorityAuthCertificate AuthCertificate { get; set; }

        [Newtonsoft.Json.JsonProperty("EnforceUniqueDN", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? EnforceUniqueDN { get; set; }

        [Newtonsoft.Json.JsonProperty("LastScan", Required = Newtonsoft.Json.Required.AllowNull)]
        public string LastScan { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyfactorAPISecret
    {
        [Newtonsoft.Json.JsonProperty("SecretValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SecretValue { get; set; }

        [Newtonsoft.Json.JsonProperty("Parameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; }

        [Newtonsoft.Json.JsonProperty("Provider", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Provider { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateAuthorityAuthCertificate
    {
        [Newtonsoft.Json.JsonProperty("IssuedDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuedDN { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuerDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuerDN { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset ExpirationDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedCertificateAuthorityQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedCertificateAuthorityQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateAuthorityRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("LogicalName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string LogicalName { get; set; }

        [Newtonsoft.Json.JsonProperty("HostName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string HostName { get; set; }

        [Newtonsoft.Json.JsonProperty("Delegate", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Delegate { get; set; }

        [Newtonsoft.Json.JsonProperty("DelegateEnrollment", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? DelegateEnrollment { get; set; }

        [Newtonsoft.Json.JsonProperty("ForestRoot", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ForestRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("ConfigurationTenant", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ConfigurationTenant { get; set; }

        [Newtonsoft.Json.JsonProperty("Remote", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Remote { get; set; }

        [Newtonsoft.Json.JsonProperty("Agent", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Agent { get; set; }

        [Newtonsoft.Json.JsonProperty("Standalone", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Standalone { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorThresholds", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? MonitorThresholds { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuanceMax", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? IssuanceMax { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuanceMin", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? IssuanceMin { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureMax", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? FailureMax { get; set; }

        [Newtonsoft.Json.JsonProperty("RFCEnforcement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RFCEnforcement { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedEnrollmentTypes", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateAuthorityRequestAllowedEnrollmentTypes AllowedEnrollmentTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyRetention", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateAuthorityRequestKeyRetention KeyRetention { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyRetentionDays", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyRetentionDays { get; set; }

        [Newtonsoft.Json.JsonProperty("ExplicitCredentials", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ExplicitCredentials { get; set; }

        [Newtonsoft.Json.JsonProperty("SubscriberTerms", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SubscriberTerms { get; set; }

        [Newtonsoft.Json.JsonProperty("ExplicitUser", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ExplicitUser { get; set; }

        [Newtonsoft.Json.JsonProperty("ExplicitPassword", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorAPISecret ExplicitPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("UseAllowedRequesters", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UseAllowedRequesters { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedRequesters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> AllowedRequesters { get; set; }

        [Newtonsoft.Json.JsonProperty("FullScan", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule FullScan { get; set; }

        [Newtonsoft.Json.JsonProperty("IncrementalScan", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule IncrementalScan { get; set; }

        [Newtonsoft.Json.JsonProperty("ThresholdCheck", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule ThresholdCheck { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthCertificatePassword", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorAPISecret AuthCertificatePassword { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthCertificate", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorAPISecret AuthCertificate { get; set; }

        [Newtonsoft.Json.JsonProperty("CAType", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateAuthorityRequestCAType CAType { get; set; }

        [Newtonsoft.Json.JsonProperty("EnforceUniqueDN", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? EnforceUniqueDN { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>A DTO for CA tests.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateAuthorityTestResponse
    {
        /// <summary>Whether the test succeeded or failed.</summary>
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Success { get; set; }

        /// <summary>The message returned by the test.</summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CRLRequestModel
    {
        [Newtonsoft.Json.JsonProperty("CertificateAuthorityLogicalName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CertificateAuthorityLogicalName { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateAuthorityHostName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CertificateAuthorityHostName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateQuery
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Automated", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Automated { get; set; }

        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Content { get; set; }

        [Newtonsoft.Json.JsonProperty("DuplicationField", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateQueryDuplicationField DuplicationField { get; set; }

        [Newtonsoft.Json.JsonProperty("ShowOnDashboard", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ShowOnDashboard { get; set; }

        [Newtonsoft.Json.JsonProperty("Favorite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Favorite { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>A query result set with parameters to define the format of records</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateCollectionUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Query", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Query { get; set; }

        [Newtonsoft.Json.JsonProperty("DuplicationField", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateCollectionUpdateRequestDuplicationField DuplicationField { get; set; }

        [Newtonsoft.Json.JsonProperty("ShowOnDashboard", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ShowOnDashboard { get; set; }

        [Newtonsoft.Json.JsonProperty("Favorite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Favorite { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateCollectionResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Content { get; set; }

        [Newtonsoft.Json.JsonProperty("Query", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Query { get; set; }

        [Newtonsoft.Json.JsonProperty("DuplicationField", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateCollectionResponseDuplicationField DuplicationField { get; set; }

        [Newtonsoft.Json.JsonProperty("ShowOnDashboard", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ShowOnDashboard { get; set; }

        [Newtonsoft.Json.JsonProperty("Favorite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Favorite { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateCollectionCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("CopyFromId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CopyFromId { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Query", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Query { get; set; }

        [Newtonsoft.Json.JsonProperty("DuplicationField", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateCollectionCreateRequestDuplicationField DuplicationField { get; set; }

        [Newtonsoft.Json.JsonProperty("ShowOnDashboard", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ShowOnDashboard { get; set; }

        [Newtonsoft.Json.JsonProperty("Favorite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Favorite { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateCollectionCopyRequest
    {
        [Newtonsoft.Json.JsonProperty("CopyFromId", Required = Newtonsoft.Json.Required.Always)]
        public int? CopyFromId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Query", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Query { get; set; }

        [Newtonsoft.Json.JsonProperty("DuplicationField", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateCollectionCopyRequestDuplicationField DuplicationField { get; set; }

        [Newtonsoft.Json.JsonProperty("ShowOnDashboard", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ShowOnDashboard { get; set; }

        [Newtonsoft.Json.JsonProperty("Favorite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Favorite { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionRolePermissions
    {
        [Newtonsoft.Json.JsonProperty("RoleId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? RoleId { get; set; }

        [Newtonsoft.Json.JsonProperty("Permissions", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedCertificateStoreQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedCertificateStoreQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReenrollmentStatus
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Data { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentId { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("JobProperties", Required = Newtonsoft.Json.Required.AllowNull)]
        public string JobProperties { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomAliasAllowed", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CustomAliasAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("EntryParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateStoreTypeEntryParameter> EntryParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreTypeEntryParameter
    {
        [Newtonsoft.Json.JsonProperty("StoreTypeId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StoreTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateStoreTypeEntryParameterType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("RequiredWhen", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, bool> RequiredWhen { get; set; }

        [Newtonsoft.Json.JsonProperty("DependsOn", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DependsOn { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Options { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ContainerId { get; set; }

        [Newtonsoft.Json.JsonProperty("CreateIfMissing", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? CreateIfMissing { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentId { get; set; }

        [Newtonsoft.Json.JsonProperty("InventorySchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule InventorySchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorAPISecret Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ContainerId { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientMachine", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ClientMachine { get; set; }

        [Newtonsoft.Json.JsonProperty("Storepath", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Storepath { get; set; }

        [Newtonsoft.Json.JsonProperty("CertStoreType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertStoreType { get; set; }

        [Newtonsoft.Json.JsonProperty("CreateIfMissing", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? CreateIfMissing { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentId { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentAssigned", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AgentAssigned { get; set; }

        [Newtonsoft.Json.JsonProperty("InventorySchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule InventorySchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorAPISecret Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedCertificateStoreInventoryQuery
    {
        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (OperationStart, OperationEnd, UserName)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedCertificateStoreInventoryQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreInventory
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Certificates", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateStoreInventoryCertificates> Certificates { get; set; }

        [Newtonsoft.Json.JsonProperty("Parameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, object> Parameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreInventoryCertificates
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuedDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuedDN { get; set; }

        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SerialNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("NotBefore", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset NotBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("NotAfter", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset NotAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("SigningAlgorithm", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SigningAlgorithm { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuerDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuerDN { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("CertStoreInventoryItemId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertStoreInventoryItemId { get; set; }

        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, object> Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedCertificateStoreServerQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedCertificateStoreServerQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreUpdateServerRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public KeyfactorAPISecret Username { get; set; } = new KeyfactorAPISecret();

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public KeyfactorAPISecret Password { get; set; } = new KeyfactorAPISecret();

        [Newtonsoft.Json.JsonProperty("UseSSL", Required = Newtonsoft.Json.Required.Always)]
        public bool? UseSSL { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Container", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Container { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreServerResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("UseSSL", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UseSSL { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ServerType { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreCreateServerRequest
    {
        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public KeyfactorAPISecret Username { get; set; } = new KeyfactorAPISecret();

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public KeyfactorAPISecret Password { get; set; } = new KeyfactorAPISecret();

        [Newtonsoft.Json.JsonProperty("UseSSL", Required = Newtonsoft.Json.Required.Always)]
        public bool? UseSSL { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerType", Required = Newtonsoft.Json.Required.Always)]
        public int? ServerType { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Container", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Container { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>NewPassword must be provided and be of type string or KeyfactorAPISecret.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertStoreNewPasswordRequest
    {
        [Newtonsoft.Json.JsonProperty("CertStoreId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid CertStoreId { get; set; }

        [Newtonsoft.Json.JsonProperty("NewPassword", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object NewPassword { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DiscoveryJobRequest
    {
        [Newtonsoft.Json.JsonProperty("ClientMachine", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ClientMachine { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentId { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        public int? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("JobExecutionTimestamp", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset JobExecutionTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("Dirs", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Dirs { get; set; }

        [Newtonsoft.Json.JsonProperty("IgnoredDirs", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IgnoredDirs { get; set; }

        [Newtonsoft.Json.JsonProperty("Extensions", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Extensions { get; set; }

        [Newtonsoft.Json.JsonProperty("NamePatterns", Required = Newtonsoft.Json.Required.AllowNull)]
        public string NamePatterns { get; set; }

        [Newtonsoft.Json.JsonProperty("SymLinks", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SymLinks { get; set; }

        [Newtonsoft.Json.JsonProperty("Compatibility", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Compatibility { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerUsername", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorAPISecret ServerUsername { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerPassword", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorAPISecret ServerPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerUseSsl", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ServerUseSsl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContainerAssignment
    {
        [Newtonsoft.Json.JsonProperty("CertStoreContainerId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertStoreContainerId { get; set; }

        [Newtonsoft.Json.JsonProperty("NewContainerName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string NewContainerName { get; set; }

        [Newtonsoft.Json.JsonProperty("NewContainerType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? NewContainerType { get; set; }

        [Newtonsoft.Json.JsonProperty("KeystoreIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<System.Guid> KeystoreIds { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreApproveRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ContainerId { get; set; }

        [Newtonsoft.Json.JsonProperty("CertStoreType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertStoreType { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorAPISecret Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertStoresSchedule
    {
        [Newtonsoft.Json.JsonProperty("StoreIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<System.Guid> StoreIds { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();

        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule Schedule { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReenrollmentRequest
    {
        [Newtonsoft.Json.JsonProperty("KeystoreId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid KeystoreId { get; set; }

        [Newtonsoft.Json.JsonProperty("SubjectName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SubjectName { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentGuid", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentGuid { get; set; }

        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("JobProperties", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, object> JobProperties { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateAuthority", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CertificateAuthority { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateTemplate", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CertificateTemplate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddCertificateRequest
    {
        [Newtonsoft.Json.JsonProperty("CertificateId", Required = Newtonsoft.Json.Required.Always)]
        public int? CertificateId { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateStores", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CertificateStoreEntry> CertificateStores { get; set; } = new System.Collections.ObjectModel.Collection<CertificateStoreEntry>();

        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public KeyfactorSchedule Schedule { get; set; } = new KeyfactorSchedule();

        [Newtonsoft.Json.JsonProperty("CollectionId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CollectionId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreEntry
    {
        [Newtonsoft.Json.JsonProperty("CertificateStoreId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid CertificateStoreId { get; set; }

        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("JobFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, object> JobFields { get; set; }

        [Newtonsoft.Json.JsonProperty("Overwrite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Overwrite { get; set; }

        [Newtonsoft.Json.JsonProperty("EntryPassword", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorAPISecret EntryPassword { get; set; }

        /// <summary>The PFX password.</summary>
        [Newtonsoft.Json.JsonProperty("PfxPassword", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PfxPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("IncludePrivateKey", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IncludePrivateKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RemoveCertificateRequest
    {
        [Newtonsoft.Json.JsonProperty("CertificateStores", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CertificateLocationSpecifier> CertificateStores { get; set; } = new System.Collections.ObjectModel.Collection<CertificateLocationSpecifier>();

        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public KeyfactorSchedule Schedule { get; set; } = new KeyfactorSchedule();

        [Newtonsoft.Json.JsonProperty("CollectionId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CollectionId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateLocationSpecifier
    {
        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateStoreId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid CertificateStoreId { get; set; }

        [Newtonsoft.Json.JsonProperty("JobFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, object> JobFields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedCertificateStoreContainerQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedCertificateStoreContainerQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreContainerListResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("OverwriteSchedules", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? OverwriteSchedules { get; set; }

        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Schedule { get; set; }

        [Newtonsoft.Json.JsonProperty("CertStoreType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertStoreType { get; set; }

        [Newtonsoft.Json.JsonProperty("StoreCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StoreCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStore
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ContainerId { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientMachine", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ClientMachine { get; set; }

        [Newtonsoft.Json.JsonProperty("Storepath", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Storepath { get; set; }

        [Newtonsoft.Json.JsonProperty("CertStoreInventoryJobId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid CertStoreInventoryJobId { get; set; }

        [Newtonsoft.Json.JsonProperty("CertStoreType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertStoreType { get; set; }

        [Newtonsoft.Json.JsonProperty("Approved", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Approved { get; set; }

        [Newtonsoft.Json.JsonProperty("CreateIfMissing", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? CreateIfMissing { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentId { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentAssigned", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AgentAssigned { get; set; }

        [Newtonsoft.Json.JsonProperty("ContainerName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ContainerName { get; set; }

        [Newtonsoft.Json.JsonProperty("InventorySchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule InventorySchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("ReenrollmentStatus", Required = Newtonsoft.Json.Required.AllowNull)]
        public ReenrollmentStatus ReenrollmentStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("SetNewPasswordAllowed", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SetNewPasswordAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreTypeResponse
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ShortName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ShortName { get; set; }

        [Newtonsoft.Json.JsonProperty("Capability", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Capability { get; set; }

        [Newtonsoft.Json.JsonProperty("StoreType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StoreType { get; set; }

        [Newtonsoft.Json.JsonProperty("ImportType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ImportType { get; set; }

        [Newtonsoft.Json.JsonProperty("LocalStore", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? LocalStore { get; set; }

        [Newtonsoft.Json.JsonProperty("SupportedOperations", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertStoreTypeSupportedOperations SupportedOperations { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateStoreTypeProperty> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("EntryParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateStoreTypeEntryParameter> EntryParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("PasswordOptions", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertStoreTypePasswordOptions PasswordOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("StorePathType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StorePathType { get; set; }

        [Newtonsoft.Json.JsonProperty("StorePathValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StorePathValue { get; set; }

        [Newtonsoft.Json.JsonProperty("PrivateKeyAllowed", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateStoreTypeResponsePrivateKeyAllowed PrivateKeyAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("JobProperties", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> JobProperties { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerRequired", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ServerRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerShell", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? PowerShell { get; set; }

        [Newtonsoft.Json.JsonProperty("BlueprintAllowed", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? BlueprintAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomAliasAllowed", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateStoreTypeResponseCustomAliasAllowed CustomAliasAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerRegistration", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ServerRegistration { get; set; }

        [Newtonsoft.Json.JsonProperty("InventoryEndpoint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string InventoryEndpoint { get; set; }

        [Newtonsoft.Json.JsonProperty("InventoryJobType", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid InventoryJobType { get; set; }

        [Newtonsoft.Json.JsonProperty("ManagementJobType", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid ManagementJobType { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoveryJobType", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid DiscoveryJobType { get; set; }

        [Newtonsoft.Json.JsonProperty("EnrollmentJobType", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid EnrollmentJobType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertStoreTypeSupportedOperations
    {
        [Newtonsoft.Json.JsonProperty("Add", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Add { get; set; }

        [Newtonsoft.Json.JsonProperty("Create", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Create { get; set; }

        [Newtonsoft.Json.JsonProperty("Discovery", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Discovery { get; set; }

        [Newtonsoft.Json.JsonProperty("Enrollment", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Enrollment { get; set; }

        [Newtonsoft.Json.JsonProperty("Remove", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Remove { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreTypeProperty
    {
        [Newtonsoft.Json.JsonProperty("StoreTypeId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StoreTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateStoreTypePropertyType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("DependsOn", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DependsOn { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("Required", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Required { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertStoreTypePasswordOptions
    {
        [Newtonsoft.Json.JsonProperty("EntrySupported", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? EntrySupported { get; set; }

        [Newtonsoft.Json.JsonProperty("StoreRequired", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? StoreRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("Style", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertStoreTypePasswordOptionsStyle Style { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreTypeUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("StoreType", Required = Newtonsoft.Json.Required.Always)]
        public int? StoreType { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ShortName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ShortName { get; set; }

        [Newtonsoft.Json.JsonProperty("Capability", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(220)]
        public string Capability { get; set; }

        [Newtonsoft.Json.JsonProperty("LocalStore", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? LocalStore { get; set; }

        [Newtonsoft.Json.JsonProperty("SupportedOperations", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertStoreTypeSupportedOperations SupportedOperations { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateStoreTypeProperty> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("PasswordOptions", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertStoreTypePasswordOptions PasswordOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("StorePathType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StorePathType { get; set; }

        [Newtonsoft.Json.JsonProperty("StorePathValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StorePathValue { get; set; }

        [Newtonsoft.Json.JsonProperty("PrivateKeyAllowed", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateStoreTypeUpdateRequestPrivateKeyAllowed PrivateKeyAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerRequired", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ServerRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerShell", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? PowerShell { get; set; }

        [Newtonsoft.Json.JsonProperty("BlueprintAllowed", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? BlueprintAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomAliasAllowed", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateStoreTypeUpdateRequestCustomAliasAllowed CustomAliasAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("EntryParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateStoreTypeEntryParameter> EntryParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateStoreTypeCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ShortName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ShortName { get; set; }

        [Newtonsoft.Json.JsonProperty("Capability", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(220)]
        public string Capability { get; set; }

        [Newtonsoft.Json.JsonProperty("LocalStore", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? LocalStore { get; set; }

        [Newtonsoft.Json.JsonProperty("SupportedOperations", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertStoreTypeSupportedOperations SupportedOperations { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateStoreTypeProperty> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("PasswordOptions", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertStoreTypePasswordOptions PasswordOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("StorePathType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StorePathType { get; set; }

        [Newtonsoft.Json.JsonProperty("StorePathValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StorePathValue { get; set; }

        [Newtonsoft.Json.JsonProperty("PrivateKeyAllowed", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateStoreTypeCreationRequestPrivateKeyAllowed PrivateKeyAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerRequired", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ServerRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("PowerShell", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? PowerShell { get; set; }

        [Newtonsoft.Json.JsonProperty("BlueprintAllowed", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? BlueprintAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomAliasAllowed", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateStoreTypeCreationRequestCustomAliasAllowed CustomAliasAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerRegistration", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ServerRegistration { get; set; }

        [Newtonsoft.Json.JsonProperty("InventoryEndpoint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string InventoryEndpoint { get; set; }

        [Newtonsoft.Json.JsonProperty("InventoryJobTypeId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid InventoryJobTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("ManagementJobTypeId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid ManagementJobTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoveryJobTypeId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid DiscoveryJobTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("EnrollmentJobTypeId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid EnrollmentJobTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("EntryParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateStoreTypeEntryParameter> EntryParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CSRGenerationResponseModel
    {
        [Newtonsoft.Json.JsonProperty("CSRFilePath", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CSRFilePath { get; set; }

        [Newtonsoft.Json.JsonProperty("CSRText", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CSRText { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedPendingCSRQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedPendingCSRQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PendingCSRResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("CSR", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CSR { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestTime", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset RequestTime { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Subject { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CSRGenerationRequest
    {
        /// <summary>Subject for the requested certificate</summary>
        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subject { get; set; }

        /// <summary>Certificate key type [RSA, ECC]</summary>
        [Newtonsoft.Json.JsonProperty("KeyType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string KeyType { get; set; }

        /// <summary>Size of the certificate key (ex: RSA 1024, 2048, 4096/ECC 256, 384, 521)</summary>
        [Newtonsoft.Json.JsonProperty("KeyLength", Required = Newtonsoft.Json.Required.Always)]
        public int? KeyLength { get; set; }

        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Template { get; set; }

        [Newtonsoft.Json.JsonProperty("SANs", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> SANs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CSRContents
    {
        [Newtonsoft.Json.JsonProperty("CSR", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CSR { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobTypeResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("JobTypeName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string JobTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("JobTypeFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<JobTypeFieldResponse> JobTypeFields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobTypeFieldResponse
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.AllowNull)]
        public JobTypeFieldResponseType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("Required", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Required { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobTypeUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("JobTypeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JobTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("JobTypeFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<JobTypeFieldRequest> JobTypeFields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobTypeFieldRequest
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        public JobTypeFieldRequestType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("Required", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Required { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobTypeCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("JobTypeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JobTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("JobTypeFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<JobTypeFieldRequest> JobTypeFields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeniedAlertDefinitionResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.AllowNull)]
        public AlertTemplateResponse Template { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerResponse RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterResponse> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertTemplateResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("ForestRoot", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ForestRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("ConfigurationTenant", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ConfigurationTenant { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RegisteredEventHandlerResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("UseHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UseHandler { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EventHandlerParameterResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("ParameterType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ParameterType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedDeniedAlertQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedDeniedAlertQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeniedAlertUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerRequest RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterRequest> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RegisteredEventHandlerRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("UseHandler", Required = Newtonsoft.Json.Required.Always)]
        public bool? UseHandler { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EventHandlerParameterRequest
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("ParameterType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParameterType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeniedAlertCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerRequest RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterRequest> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateEnrollmentSettingsResponse
    {
        /// <summary>The regular expressions to use for validation during enrollment.</summary>
        [Newtonsoft.Json.JsonProperty("TemplateRegexes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateEnrollmentRegexResponse> TemplateRegexes { get; set; }

        /// <summary>The default values to use during enrollment.</summary>
        [Newtonsoft.Json.JsonProperty("TemplateDefaults", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateEnrollmentDefaultResponse> TemplateDefaults { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplatePolicy", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateEnrollmentPolicyResponse TemplatePolicy { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateEnrollmentRegexResponse
    {
        /// <summary>The subject part to apply the regular expression to.</summary>
        [Newtonsoft.Json.JsonProperty("SubjectPart", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SubjectPart { get; set; }

        /// <summary>The regular expression to apply to the subject part.</summary>
        [Newtonsoft.Json.JsonProperty("Regex", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Regex { get; set; }

        /// <summary>The error message to show when the regex validation fails.</summary>
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateEnrollmentDefaultResponse
    {
        /// <summary>The subject part to apply the default to.</summary>
        [Newtonsoft.Json.JsonProperty("SubjectPart", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SubjectPart { get; set; }

        /// <summary>The value to apply by default.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateEnrollmentPolicyResponse
    {
        /// <summary>The allowed RSA key sizes.</summary>
        [Newtonsoft.Json.JsonProperty("RSAValidKeySizes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> RSAValidKeySizes { get; set; }

        /// <summary>The allowed ECC curves.</summary>
        [Newtonsoft.Json.JsonProperty("ECCValidCurves", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> ECCValidCurves { get; set; }

        /// <summary>Whether or not keys can be reused.</summary>
        [Newtonsoft.Json.JsonProperty("AllowKeyReuse", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AllowKeyReuse { get; set; }

        /// <summary>Whether or not wildcards can be used.</summary>
        [Newtonsoft.Json.JsonProperty("AllowWildcards", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AllowWildcards { get; set; }

        /// <summary>Whether or not RFC 2818 compliance should be enforced.</summary>
        [Newtonsoft.Json.JsonProperty("RFCEnforcement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RFCEnforcement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnrollmentTemplateCAResponse
    {
        [Newtonsoft.Json.JsonProperty("Templates", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EnrollmentTemplate> Templates { get; set; }

        [Newtonsoft.Json.JsonProperty("StandaloneCAs", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EnrollmentCA> StandaloneCAs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnrollmentTemplate
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Forest", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Forest { get; set; }

        [Newtonsoft.Json.JsonProperty("KeySize", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeySize { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeyType { get; set; }

        [Newtonsoft.Json.JsonProperty("RequiresApproval", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RequiresApproval { get; set; }

        [Newtonsoft.Json.JsonProperty("RFCEnforcement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RFCEnforcement { get; set; }

        [Newtonsoft.Json.JsonProperty("CAs", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EnrollmentCA> CAs { get; set; }

        [Newtonsoft.Json.JsonProperty("EnrollmentFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateEnrollmentField> EnrollmentFields { get; set; }

        [Newtonsoft.Json.JsonProperty("MetadataFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateMetadataField> MetadataFields { get; set; }

        [Newtonsoft.Json.JsonProperty("Regexes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateRegex> Regexes { get; set; }

        [Newtonsoft.Json.JsonProperty("ExtendedKeyUsages", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ExtendedKeyUsage> ExtendedKeyUsages { get; set; }

        [Newtonsoft.Json.JsonProperty("Curve", Required = Newtonsoft.Json.Required.Default)]
        public string Curve { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnrollmentCA
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("RFCEnforcement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RFCEnforcement { get; set; }

        [Newtonsoft.Json.JsonProperty("SubscriberTerms", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SubscriberTerms { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateEnrollmentField
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Options { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateEnrollmentFieldDataType DataType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateMetadataField
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("MetadataId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? MetadataId { get; set; }

        [Newtonsoft.Json.JsonProperty("Validation", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Validation { get; set; }

        [Newtonsoft.Json.JsonProperty("Enrollment", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateMetadataFieldEnrollment Enrollment { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateRegex
    {
        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("SubjectPart", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SubjectPart { get; set; }

        [Newtonsoft.Json.JsonProperty("Regex", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Regex { get; set; }

        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExtendedKeyUsage
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Oid", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Oid { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AvailableRenewal
    {
        [Newtonsoft.Json.JsonProperty("AvailableRenewalType", Required = Newtonsoft.Json.Required.AllowNull)]
        public AvailableRenewalType AvailableRenewalType { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CSREnrollmentRequest
    {
        [Newtonsoft.Json.JsonProperty("CSR", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CSR { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateAuthority", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CertificateAuthority { get; set; }

        [Newtonsoft.Json.JsonProperty("IncludeChain", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IncludeChain { get; set; }

        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.AllowNull)]
        public object Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("AdditionalEnrollmentFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, object> AdditionalEnrollmentFields { get; set; }

        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Template { get; set; }

        [Newtonsoft.Json.JsonProperty("SANs", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> SANs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CSREnrollmentResponse
    {
        [Newtonsoft.Json.JsonProperty("CertificateInformation", Required = Newtonsoft.Json.Required.AllowNull)]
        public Pkcs10CertificateResponse CertificateInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Pkcs10CertificateResponse
    {
        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SerialNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuerDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuerDN { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Thumbprint { get; set; }

        /// <summary>The integer ID of the certificate in the keyfactor database, if Issued</summary>
        [Newtonsoft.Json.JsonProperty("KeyfactorID", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyfactorID { get; set; }

        [Newtonsoft.Json.JsonProperty("Certificates", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Certificates { get; set; }

        /// <summary>The integer id of the certificate request in the Keyfactor database, if one exists.</summary>
        [Newtonsoft.Json.JsonProperty("KeyfactorRequestId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyfactorRequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestDisposition", Required = Newtonsoft.Json.Required.AllowNull)]
        public string RequestDisposition { get; set; }

        [Newtonsoft.Json.JsonProperty("DispositionMessage", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DispositionMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("EnrollmentContext", Required = Newtonsoft.Json.Required.Default)]
        public System.Collections.Generic.IDictionary<string, string> EnrollmentContext { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PFXEnrollmentRequest
    {
        [Newtonsoft.Json.JsonProperty("CustomFriendlyName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CustomFriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("PopulateMissingValuesFromAD", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? PopulateMissingValuesFromAD { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("IncludeChain", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IncludeChain { get; set; }

        [Newtonsoft.Json.JsonProperty("RenewalCertificateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? RenewalCertificateId { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateAuthority", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CertificateAuthority { get; set; }

        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.AllowNull)]
        public object Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("AdditionalEnrollmentFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, object> AdditionalEnrollmentFields { get; set; }

        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Template { get; set; }

        [Newtonsoft.Json.JsonProperty("SANs", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> SANs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PFXEnrollmentResponse
    {
        [Newtonsoft.Json.JsonProperty("CertificateInformation", Required = Newtonsoft.Json.Required.AllowNull)]
        public Pkcs12CertificateResponse CertificateInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Pkcs12CertificateResponse
    {
        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SerialNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuerDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuerDN { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyfactorId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyfactorId { get; set; }

        [Newtonsoft.Json.JsonProperty("Pkcs12Blob", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Pkcs12Blob { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Password { get; set; }

        /// <summary>The integer id of the certificate request in the Keyfactor database, if one exists.</summary>
        [Newtonsoft.Json.JsonProperty("KeyfactorRequestId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyfactorRequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestDisposition", Required = Newtonsoft.Json.Required.AllowNull)]
        public string RequestDisposition { get; set; }

        [Newtonsoft.Json.JsonProperty("DispositionMessage", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DispositionMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("EnrollmentContext", Required = Newtonsoft.Json.Required.Default)]
        public System.Collections.Generic.IDictionary<string, string> EnrollmentContext { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnrollmentManagementRequest
    {
        /// <summary>The stores to add the certificate to. Values in this collection will take precedence over values in {Models.Enrollment.SpecificEnrollmentManagementRequest.StoreTypes}.</summary>
        [Newtonsoft.Json.JsonProperty("Stores", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ManagementStoreRequest> Stores { get; set; }

        [Newtonsoft.Json.JsonProperty("StoreIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<System.Guid> StoreIds { get; set; }

        [Newtonsoft.Json.JsonProperty("StoreTypes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ManagementStoreTypeRequest> StoreTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertificateId { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? RequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("JobTime", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset JobTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagementStoreRequest
    {
        [Newtonsoft.Json.JsonProperty("StoreId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid StoreId { get; set; }

        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("Overwrite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Overwrite { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManagementStoreTypeRequest
    {
        [Newtonsoft.Json.JsonProperty("StoreTypeId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StoreTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("Overwrite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Overwrite { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<object> Properties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnrollmentManagementResponse
    {
        [Newtonsoft.Json.JsonProperty("SuccessfulStores", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<System.Guid> SuccessfulStores { get; set; }

        [Newtonsoft.Json.JsonProperty("FailedStores", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<System.Guid> FailedStores { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExistingEnrollmentManagementRequest
    {
        [Newtonsoft.Json.JsonProperty("ExistingCertificateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ExistingCertificateId { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertificateId { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? RequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("JobTime", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset JobTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RenewalRequest
    {
        [Newtonsoft.Json.JsonProperty("CertificateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertificateId { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateAuthority", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CertificateAuthority { get; set; }

        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Template { get; set; }

        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RenewalResponse
    {
        [Newtonsoft.Json.JsonProperty("KeyfactorId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyfactorId { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyfactorRequestId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyfactorRequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SerialNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuerDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuerDN { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestDisposition", Required = Newtonsoft.Json.Required.AllowNull)]
        public string RequestDisposition { get; set; }

        [Newtonsoft.Json.JsonProperty("DispositionMessage", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DispositionMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExpirationAlertDefinitionResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationWarningDays", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ExpirationWarningDays { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateQuery", Required = Newtonsoft.Json.Required.AllowNull)]
        public AlertCertificateQueryResponse CertificateQuery { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerResponse RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterResponse> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertCertificateQueryResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertScheduleResponse
    {
        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule Schedule { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertScheduleRequest
    {
        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule Schedule { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedExpirationAlertQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedExpirationAlertQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExpirationAlertUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationWarningDays", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? ExpirationWarningDays { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateQueryId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertificateQueryId { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerRequest RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterRequest> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExpirationAlertCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationWarningDays", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? ExpirationWarningDays { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateQueryId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertificateQueryId { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerRequest RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterRequest> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExpirationAlertTestRequest
    {
        [Newtonsoft.Json.JsonProperty("AlertId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AlertId { get; set; }

        [Newtonsoft.Json.JsonProperty("EvaluationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset EvaluationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("PreviousEvaluationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset PreviousEvaluationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("SendAlerts", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SendAlerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExpirationAlertTestResponse
    {
        [Newtonsoft.Json.JsonProperty("ExpirationAlerts", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ExpirationAlertResponse> ExpirationAlerts { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertBuildResult", Required = Newtonsoft.Json.Required.AllowNull)]
        public ExpirationAlertTestResponseAlertBuildResult AlertBuildResult { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExpirationAlertResponse
    {
        [Newtonsoft.Json.JsonProperty("CAName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CAName { get; set; }

        [Newtonsoft.Json.JsonProperty("CARow", Required = Newtonsoft.Json.Required.AllowNull)]
        public long CARow { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuedCN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuedCN { get; set; }

        [Newtonsoft.Json.JsonProperty("Expiry", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Expiry { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("SendDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SendDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExpirationAlertTestAllRequest
    {
        [Newtonsoft.Json.JsonProperty("EvaluationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset EvaluationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("PreviousEvaluationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset PreviousEvaluationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("SendAlerts", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SendAlerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IssuedAlertDefinitionResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.AllowNull)]
        public AlertTemplateResponse Template { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerResponse RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterResponse> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedIssuedAlertQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedIssuedAlertQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IssuedAlertUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerRequest RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterRequest> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IssuedAlertCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerRequest RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterRequest> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UnmanagedKeyResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Fingerprint", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string Fingerprint { get; set; }

        [Newtonsoft.Json.JsonProperty("PublicKey", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PublicKey { get; set; }

        [Newtonsoft.Json.JsonProperty("PrivateKey", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PrivateKey { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeyType { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyLength", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyLength { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoveredDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset DiscoveredDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("LogonCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? LogonCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Fingerprint", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string Fingerprint { get; set; }

        [Newtonsoft.Json.JsonProperty("PublicKey", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PublicKey { get; set; }

        [Newtonsoft.Json.JsonProperty("PrivateKey", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PrivateKey { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeyType { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyLength", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyLength { get; set; }

        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("StaleDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset StaleDate { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("LogonCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? LogonCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyGenerationRequest
    {
        [Newtonsoft.Json.JsonProperty("KeyType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string KeyType { get; set; }

        [Newtonsoft.Json.JsonProperty("PrivateKeyFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PrivateKeyFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyLength", Required = Newtonsoft.Json.Required.Always)]
        public int? KeyLength { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedSSHUnmanagedKeyQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedSSHUnmanagedKeyQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyRotationAlertDefinitionResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipient", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Recipient { get; set; }

        [Newtonsoft.Json.JsonProperty("RotationWarningDays", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? RotationWarningDays { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerResponse RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterResponse> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedKeyRotationAlertQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedKeyRotationAlertQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyRotationAlertUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("RotationWarningDays", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? RotationWarningDays { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerRequest RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterRequest> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyRotationAlertCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("RotationWarningDays", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? RotationWarningDays { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerRequest RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterRequest> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyRotationAlertTestRequest
    {
        [Newtonsoft.Json.JsonProperty("AlertId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AlertId { get; set; }

        [Newtonsoft.Json.JsonProperty("EvaluationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset EvaluationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("PreviousEvaluationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset PreviousEvaluationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("SendAlerts", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SendAlerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyRotationAlertTestResponse
    {
        [Newtonsoft.Json.JsonProperty("KeyRotationAlerts", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<KeyRotationAlertResponse> KeyRotationAlerts { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertBuildResult", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyRotationAlertTestResponseAlertBuildResult AlertBuildResult { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyRotationAlertResponse
    {
        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipient", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Recipient { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KeyRotationAlertTestAllRequest
    {
        [Newtonsoft.Json.JsonProperty("EvaluationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset EvaluationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("PreviousEvaluationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset PreviousEvaluationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("SendAlerts", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SendAlerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LicenseResponse
    {
        [Newtonsoft.Json.JsonProperty("KeyfactorVersion", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeyfactorVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("LicenseData", Required = Newtonsoft.Json.Required.AllowNull)]
        public License LicenseData { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class License
    {
        [Newtonsoft.Json.JsonProperty("LicenseId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string LicenseId { get; set; }

        [Newtonsoft.Json.JsonProperty("Customer", Required = Newtonsoft.Json.Required.AllowNull)]
        public LicensedCustomer Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuedDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset IssuedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset ExpirationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("LicensedProducts", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<LicensedProduct> LicensedProducts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LicensedCustomer
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LicensedProduct
    {
        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ProductId { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("MajorRev", Required = Newtonsoft.Json.Required.AllowNull)]
        public string MajorRev { get; set; }

        [Newtonsoft.Json.JsonProperty("MinorRev", Required = Newtonsoft.Json.Required.AllowNull)]
        public string MinorRev { get; set; }

        [Newtonsoft.Json.JsonProperty("LicensedFeatures", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<LicensedFeature> LicensedFeatures { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LicensedFeature
    {
        [Newtonsoft.Json.JsonProperty("FeatureID", Required = Newtonsoft.Json.Required.AllowNull)]
        public string FeatureID { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset ExpirationDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LogonResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("LastLogon", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset LastLogon { get; set; }

        [Newtonsoft.Json.JsonProperty("Server", Required = Newtonsoft.Json.Required.AllowNull)]
        public ServerResponse Server { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyCount { get; set; }

        [Newtonsoft.Json.JsonProperty("Access", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<SshUserResponse> Access { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServerResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentId { get; set; }

        [Newtonsoft.Json.JsonProperty("Hostname", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Hostname { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerGroupId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid ServerGroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("SyncSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule SyncSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("UnderManagement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UnderManagement { get; set; }

        [Newtonsoft.Json.JsonProperty("Owner", Required = Newtonsoft.Json.Required.AllowNull)]
        public SshUserResponse Owner { get; set; }

        [Newtonsoft.Json.JsonProperty("GroupName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string GroupName { get; set; }

        [Newtonsoft.Json.JsonProperty("Orchestrator", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Orchestrator { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Port { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SshUserResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyResponse Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("LogonIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> LogonIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedSSHLogonQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedSSHLogonQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LogonQueryResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("LastLogon", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset LastLogon { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ServerId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ServerName { get; set; }

        [Newtonsoft.Json.JsonProperty("GroupName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string GroupName { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyCount { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerUnderManagement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? ServerUnderManagement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LogonCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerId", Required = Newtonsoft.Json.Required.Always)]
        public int? ServerId { get; set; }

        [Newtonsoft.Json.JsonProperty("UserIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> UserIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LogonAccessRequest
    {
        [Newtonsoft.Json.JsonProperty("LogonId", Required = Newtonsoft.Json.Required.Always)]
        public int? LogonId { get; set; }

        [Newtonsoft.Json.JsonProperty("UserIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> UserIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LogonUserAccessResponse
    {
        [Newtonsoft.Json.JsonProperty("LogonId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? LogonId { get; set; }

        [Newtonsoft.Json.JsonProperty("LogonName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string LogonName { get; set; }

        [Newtonsoft.Json.JsonProperty("Users", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<SshUserResponse> Users { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MacEnrollmentAPIModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("Interval", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Interval { get; set; }

        [Newtonsoft.Json.JsonProperty("UseMetadata", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UseMetadata { get; set; }

        [Newtonsoft.Json.JsonProperty("MetadataField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string MetadataField { get; set; }

        [Newtonsoft.Json.JsonProperty("MetadataValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string MetadataValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MetadataFieldTypeModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.AllowNull)]
        public MetadataFieldTypeModelDataType DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("Hint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Hint { get; set; }

        [Newtonsoft.Json.JsonProperty("Validation", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Validation { get; set; }

        [Newtonsoft.Json.JsonProperty("Enrollment", Required = Newtonsoft.Json.Required.AllowNull)]
        public MetadataFieldTypeModelEnrollment Enrollment { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Options { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayOrder", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? DisplayOrder { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedMetadataFieldQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedMetadataFieldQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MetadataFieldUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.Always)]
        public MetadataFieldUpdateRequestDataType DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("Hint", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Hint { get; set; }

        [Newtonsoft.Json.JsonProperty("Validation", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Validation { get; set; }

        [Newtonsoft.Json.JsonProperty("Enrollment", Required = Newtonsoft.Json.Required.AllowNull)]
        public MetadataFieldUpdateRequestEnrollment Enrollment { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Options { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayOrder", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? DisplayOrder { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MetadataFieldResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.AllowNull)]
        public MetadataFieldResponseDataType DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("Hint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Hint { get; set; }

        [Newtonsoft.Json.JsonProperty("Validation", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Validation { get; set; }

        [Newtonsoft.Json.JsonProperty("Enrollment", Required = Newtonsoft.Json.Required.AllowNull)]
        public MetadataFieldResponseEnrollment Enrollment { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Options { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayOrder", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? DisplayOrder { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MetadataFieldCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.Always)]
        public MetadataFieldCreateRequestDataType DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("Hint", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Hint { get; set; }

        [Newtonsoft.Json.JsonProperty("Validation", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Validation { get; set; }

        [Newtonsoft.Json.JsonProperty("Enrollment", Required = Newtonsoft.Json.Required.AllowNull)]
        public MetadataFieldCreateRequestEnrollment Enrollment { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Options { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayOrder", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? DisplayOrder { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RevocationMonitoringDefinitionResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string EndpointType { get; set; }

        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Location { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.AllowNull)]
        public EmailResponse Email { get; set; }

        [Newtonsoft.Json.JsonProperty("Dashboard", Required = Newtonsoft.Json.Required.AllowNull)]
        public DashboardResponse Dashboard { get; set; }

        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule Schedule { get; set; }

        [Newtonsoft.Json.JsonProperty("OCSPParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public OCSPParametersResponse OCSPParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EmailResponse
    {
        [Newtonsoft.Json.JsonProperty("EnableReminder", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? EnableReminder { get; set; }

        [Newtonsoft.Json.JsonProperty("WarningDays", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? WarningDays { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DashboardResponse
    {
        [Newtonsoft.Json.JsonProperty("Show", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Show { get; set; }

        [Newtonsoft.Json.JsonProperty("WarningHours", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? WarningHours { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OCSPParametersResponse
    {
        [Newtonsoft.Json.JsonProperty("CertificateAuthorityId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertificateAuthorityId { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthorityName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AuthorityName { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthorityNameId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AuthorityNameId { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthorityKeyId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AuthorityKeyId { get; set; }

        [Newtonsoft.Json.JsonProperty("SampleSerialNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SampleSerialNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedRevocationMonitoringQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedRevocationMonitoringQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RevocationMonitoringUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EndpointType { get; set; }

        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Location { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.AllowNull)]
        public EmailRequest Email { get; set; }

        [Newtonsoft.Json.JsonProperty("Dashboard", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DashboardRequest Dashboard { get; set; } = new DashboardRequest();

        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule Schedule { get; set; }

        [Newtonsoft.Json.JsonProperty("OCSPParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public OCSPParametersRequest OCSPParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EmailRequest
    {
        [Newtonsoft.Json.JsonProperty("EnableReminder", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? EnableReminder { get; set; }

        [Newtonsoft.Json.JsonProperty("WarningDays", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? WarningDays { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DashboardRequest
    {
        [Newtonsoft.Json.JsonProperty("Show", Required = Newtonsoft.Json.Required.Always)]
        public bool? Show { get; set; }

        [Newtonsoft.Json.JsonProperty("WarningHours", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? WarningHours { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OCSPParametersRequest
    {
        [Newtonsoft.Json.JsonProperty("CertificateContents", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CertificateContents { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateAuthorityId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertificateAuthorityId { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthorityName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AuthorityName { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthorityNameId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AuthorityNameId { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthorityKeyId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AuthorityKeyId { get; set; }

        [Newtonsoft.Json.JsonProperty("SampleSerialNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SampleSerialNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RevocationMonitoringCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EndpointType { get; set; }

        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Location { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.AllowNull)]
        public EmailRequest Email { get; set; }

        [Newtonsoft.Json.JsonProperty("Dashboard", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DashboardRequest Dashboard { get; set; } = new DashboardRequest();

        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule Schedule { get; set; }

        [Newtonsoft.Json.JsonProperty("OCSPParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public OCSPParametersRequest OCSPParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RevocationMonitoringAlertTestRequest
    {
        [Newtonsoft.Json.JsonProperty("AlertId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AlertId { get; set; }

        [Newtonsoft.Json.JsonProperty("EvaluationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset EvaluationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("SendAlerts", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SendAlerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RevocationMonitoringAlertTestResponse
    {
        [Newtonsoft.Json.JsonProperty("RevocationMonitoringAlerts", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<RevocationMonitoringAlertResponse> RevocationMonitoringAlerts { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertBuildResult", Required = Newtonsoft.Json.Required.AllowNull)]
        public RevocationMonitoringAlertTestResponseAlertBuildResult AlertBuildResult { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RevocationMonitoringAlertResponse
    {
        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RevocationMonitoringAlertTestAllRequest
    {
        [Newtonsoft.Json.JsonProperty("EvaluationDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset EvaluationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("SendAlerts", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SendAlerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CustomJobResultDataResponse
    {
        [Newtonsoft.Json.JsonProperty("JobHistoryId", Required = Newtonsoft.Json.Required.AllowNull)]
        public long JobHistoryId { get; set; }

        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedAgentJobHistoryQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedAgentJobHistoryQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobHistoryResponse
    {
        [Newtonsoft.Json.JsonProperty("JobHistoryId", Required = Newtonsoft.Json.Required.AllowNull)]
        public long JobHistoryId { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentMachine", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AgentMachine { get; set; }

        [Newtonsoft.Json.JsonProperty("JobId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule Schedule { get; set; }

        [Newtonsoft.Json.JsonProperty("JobType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string JobType { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationStart", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset OperationStart { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationEnd", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset OperationEnd { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Result", Required = Newtonsoft.Json.Required.AllowNull)]
        public JobHistoryResponseResult Result { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.AllowNull)]
        public JobHistoryResponseStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("StorePath", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StorePath { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientMachine", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ClientMachine { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedAgentJobQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedAgentJobQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Job
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientMachine", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ClientMachine { get; set; }

        [Newtonsoft.Json.JsonProperty("Target", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Target { get; set; }

        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule Schedule { get; set; }

        [Newtonsoft.Json.JsonProperty("Requested", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Requested { get; set; }

        [Newtonsoft.Json.JsonProperty("JobType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string JobType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScheduleJobRequest
    {
        [Newtonsoft.Json.JsonProperty("AgentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid AgentId { get; set; }

        [Newtonsoft.Json.JsonProperty("JobTypeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JobTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule Schedule { get; set; }

        [Newtonsoft.Json.JsonProperty("JobFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> JobFields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobResponse
    {
        [Newtonsoft.Json.JsonProperty("JobId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("OrchestratorId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid OrchestratorId { get; set; }

        [Newtonsoft.Json.JsonProperty("JobTypeName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string JobTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule Schedule { get; set; }

        [Newtonsoft.Json.JsonProperty("JobFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<JobFieldResponse> JobFields { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestTimestamp", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset RequestTimestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobFieldResponse
    {
        [Newtonsoft.Json.JsonProperty("JobTypeField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string JobTypeField { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Class representing orchestrator jobs to be rescheduled</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RescheduleJobRequest
    {
        /// <summary>List of orchestrator job audit ids to be rescheduled</summary>
        [Newtonsoft.Json.JsonProperty("JobAuditIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<long> JobAuditIds { get; set; }

        /// <summary>Query identifying orchestrator jobs to be rescheduled</summary>
        [Newtonsoft.Json.JsonProperty("Query", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Query { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Class representing orchestrator jobs to be unscheduled</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UnscheduleJobRequest
    {
        /// <summary>List of orchestrator job ids to be unscheduled</summary>
        [Newtonsoft.Json.JsonProperty("JobIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<System.Guid> JobIds { get; set; }

        /// <summary>Query identifying orchestrator jobs to be unscheduled</summary>
        [Newtonsoft.Json.JsonProperty("Query", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Query { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AcknowledgeJobRequest
    {
        /// <summary>List of orchestrator job audit ids to be acknowledged</summary>
        [Newtonsoft.Json.JsonProperty("JobAuditIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<long> JobAuditIds { get; set; }

        /// <summary>Query identifying orchestrator jobs to be acknowledged</summary>
        [Newtonsoft.Json.JsonProperty("Query", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Query { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScheduleBulkJobRequest
    {
        [Newtonsoft.Json.JsonProperty("OrchestratorIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<System.Guid> OrchestratorIds { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();

        [Newtonsoft.Json.JsonProperty("JobTypeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JobTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule Schedule { get; set; }

        [Newtonsoft.Json.JsonProperty("JobFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> JobFields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BulkJobResponse
    {
        [Newtonsoft.Json.JsonProperty("OrchestratorJobPairs", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<BulkOrchestratorJobPair> OrchestratorJobPairs { get; set; }

        [Newtonsoft.Json.JsonProperty("FailedOrchestratorIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<System.Guid> FailedOrchestratorIds { get; set; }

        [Newtonsoft.Json.JsonProperty("JobTypeName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string JobTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule Schedule { get; set; }

        [Newtonsoft.Json.JsonProperty("JobFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<JobFieldResponse> JobFields { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestTimestamp", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset RequestTimestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BulkOrchestratorJobPair
    {
        [Newtonsoft.Json.JsonProperty("JobId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("OrchestratorId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid OrchestratorId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProviderTypeCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Parameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ProviderTypeParameterCreateRequest> Parameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProviderTypeParameterCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.AllowNull)]
        public ProviderTypeParameterCreateRequestDataType DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("InstanceLevel", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? InstanceLevel { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProviderTypeResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Parameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ProviderTypeParameterResponse> Parameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProviderTypeParameterResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.AllowNull)]
        public ProviderTypeParameterResponseDataType DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("InstanceLevel", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? InstanceLevel { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PendingAlertDefinitionResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.AllowNull)]
        public AlertTemplateResponse Template { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerResponse RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterResponse> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedPendingAlertQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedPendingAlertQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PendingAlertUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerRequest RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterRequest> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PendingAlertCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("RegisteredEventHandler", Required = Newtonsoft.Json.Required.AllowNull)]
        public RegisteredEventHandlerRequest RegisteredEventHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("EventHandlerParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EventHandlerParameterRequest> EventHandlerParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PendingAlertTestRequest
    {
        [Newtonsoft.Json.JsonProperty("AlertId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AlertId { get; set; }

        [Newtonsoft.Json.JsonProperty("SendAlerts", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SendAlerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PendingAlertTestResponse
    {
        [Newtonsoft.Json.JsonProperty("PendingAlerts", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<PendingAlertResponse> PendingAlerts { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertBuildResult", Required = Newtonsoft.Json.Required.AllowNull)]
        public PendingAlertTestResponseAlertBuildResult AlertBuildResult { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PendingAlertResponse
    {
        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Recipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Recipients { get; set; }

        [Newtonsoft.Json.JsonProperty("CARequestId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CARequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("CommonName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CommonName { get; set; }

        [Newtonsoft.Json.JsonProperty("LogicalName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string LogicalName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PendingAlertTestAllRequest
    {
        [Newtonsoft.Json.JsonProperty("SendAlerts", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SendAlerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Report
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Scheduled", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Scheduled { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ReportPath", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ReportPath { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        public string VersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("Categories", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Categories { get; set; }

        [Newtonsoft.Json.JsonProperty("ShortName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ShortName { get; set; }

        [Newtonsoft.Json.JsonProperty("InNavigator", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? InNavigator { get; set; }

        [Newtonsoft.Json.JsonProperty("Favorite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Favorite { get; set; }

        [Newtonsoft.Json.JsonProperty("RemoveDuplicates", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RemoveDuplicates { get; set; }

        [Newtonsoft.Json.JsonProperty("UsesCollection", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UsesCollection { get; set; }

        [Newtonsoft.Json.JsonProperty("ReportParameter", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ReportParameters> ReportParameter { get; set; }

        [Newtonsoft.Json.JsonProperty("Schedules", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ReportSchedule> Schedules { get; set; }

        [Newtonsoft.Json.JsonProperty("AcceptedScheduleFormats", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> AcceptedScheduleFormats { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReportParameters
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ParameterName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ParameterName { get; set; }

        [Newtonsoft.Json.JsonProperty("ParameterType", Required = Newtonsoft.Json.Required.AllowNull)]
        public ReportParametersParameterType ParameterType { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayOrder", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? DisplayOrder { get; set; }

        [Newtonsoft.Json.JsonProperty("ParameterVisibility", Required = Newtonsoft.Json.Required.AllowNull)]
        public ReportParametersParameterVisibility ParameterVisibility { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReportSchedule
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("SendReport", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SendReport { get; set; }

        [Newtonsoft.Json.JsonProperty("SaveReport", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SaveReport { get; set; }

        [Newtonsoft.Json.JsonProperty("SaveReportPath", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SaveReportPath { get; set; }

        [Newtonsoft.Json.JsonProperty("ReportFormat", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ReportFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyfactorSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule KeyfactorSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateCollectionId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CertificateCollectionId { get; set; }

        [Newtonsoft.Json.JsonProperty("EmailRecipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> EmailRecipients { get; set; }

        [Newtonsoft.Json.JsonProperty("RuntimeParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> RuntimeParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>The CustomReport can be used to create and update a custom report.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CustomReport
    {
        [Newtonsoft.Json.JsonProperty("CustomURL", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CustomURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("InNavigator", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? InNavigator { get; set; }

        [Newtonsoft.Json.JsonProperty("Favorite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Favorite { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReportParametersRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DefaultValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedReportQuery
    {
        [Newtonsoft.Json.JsonProperty("AmmendedQuery", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AmmendedQuery { get; set; }

        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedReportQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>The ReportRequestModel can be used to update a report.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReportRequestModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("InNavigator", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? InNavigator { get; set; }

        [Newtonsoft.Json.JsonProperty("Favorite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Favorite { get; set; }

        [Newtonsoft.Json.JsonProperty("RemoveDuplicates", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RemoveDuplicates { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedCustomReportQuery
    {
        [Newtonsoft.Json.JsonProperty("AmmendedQuery", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AmmendedQuery { get; set; }

        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedCustomReportQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>The CustomReport can be used to create and update a custom report.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CustomReportUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("CustomURL", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CustomURL { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("InNavigator", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? InNavigator { get; set; }

        [Newtonsoft.Json.JsonProperty("Favorite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Favorite { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>The CustomReport can be used to create and update a custom report.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CustomReportCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("CustomURL", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomURL { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("InNavigator", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? InNavigator { get; set; }

        [Newtonsoft.Json.JsonProperty("Favorite", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Favorite { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedReportScheduleQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedReportScheduleQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SecurityIdentityPermissionsResponse
    {
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Identity { get; set; }

        [Newtonsoft.Json.JsonProperty("SecuredAreaPermissions", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<PermissionRolesPairResponse> SecuredAreaPermissions { get; set; }

        [Newtonsoft.Json.JsonProperty("CollectionPermissions", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<PermissionRolesPairResponse> CollectionPermissions { get; set; }

        [Newtonsoft.Json.JsonProperty("ContainerPermissions", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<PermissionRolesPairResponse> ContainerPermissions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PermissionRolesPairResponse
    {
        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Permission { get; set; }

        [Newtonsoft.Json.JsonProperty("GrantedByRoles", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> GrantedByRoles { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>A public DTO representing the result of a security identity lookup.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SecurityIdentityLookupResponse
    {
        /// <summary>Whether or not the identity is valid.</summary>
        [Newtonsoft.Json.JsonProperty("Valid", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Valid { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Paged query for security identities.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedSecurityIdentityQuery
    {
        /// <summary>Whether to audit the signed xml for every identity requested by the query</summary>
        [Newtonsoft.Json.JsonProperty("Validate", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Validate { get; set; }

        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedSecurityIdentityQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Model for requesting a security identity.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SecurityIdentityRequest
    {
        /// <summary>The username of the security identity.</summary>
        [Newtonsoft.Json.JsonProperty("AccountName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AreaPermissionResponse
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Area", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Area { get; set; }

        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Permission { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlobalPermissionResponse
    {
        [Newtonsoft.Json.JsonProperty("Area", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Area { get; set; }

        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Permission { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlobalPermissionRequest
    {
        [Newtonsoft.Json.JsonProperty("Area", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Area { get; set; }

        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Permission { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContainerPermissionResponse
    {
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ContainerId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Permission { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContainerPermissionRequest
    {
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ContainerId { get; set; }

        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Permission { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionPermissionResponse
    {
        [Newtonsoft.Json.JsonProperty("CollectionId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CollectionId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Permission { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionPermissionRequest
    {
        [Newtonsoft.Json.JsonProperty("CollectionId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CollectionId { get; set; }

        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Permission { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoleIdentitiesResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoleIdentitiesRequest
    {
        [Newtonsoft.Json.JsonProperty("Ids", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> Ids { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Paged query for security identities.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedSecurityRoleQuery
    {
        /// <summary>Whether to audit the signed xml for every role requested by the query</summary>
        [Newtonsoft.Json.JsonProperty("Validate", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Validate { get; set; }

        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedSecurityRoleQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SecurityRoleUpdateRequest
    {
        /// <summary>The Id of the security role to update</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int? Id { get; set; }

        /// <summary>The name of the security role to update</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>The description to be used on the updated security role</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>Whether or not the security role should be enabled</summary>
        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Enabled { get; set; }

        /// <summary>Whether or not the security role should be private</summary>
        [Newtonsoft.Json.JsonProperty("Private", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Private { get; set; }

        /// <summary>The permissions to include in the role. These must be supplied in the format "Area:Permission"</summary>
        [Newtonsoft.Json.JsonProperty("Permissions", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; }

        /// <summary>The Keyfactor identities to assign to the updated role</summary>
        [Newtonsoft.Json.JsonProperty("Identities", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<SecurityIdentityIdentifier> Identities { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Model for looking up a security identity</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SecurityIdentityIdentifier
    {
        /// <summary>The username of the security identity.</summary>
        [Newtonsoft.Json.JsonProperty("AccountName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AccountName { get; set; }

        /// <summary>The SID of the security identity.</summary>
        [Newtonsoft.Json.JsonProperty("SID", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SID { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SecurityRoleCreationRequest
    {
        /// <summary>The name of the security role to create</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>The description to be used on the created security role</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>Whether or not the security role should be enabled</summary>
        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Enabled { get; set; }

        /// <summary>Whether or not the security role should be private</summary>
        [Newtonsoft.Json.JsonProperty("Private", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Private { get; set; }

        /// <summary>The permissions to include in the role. These must be supplied in the format "Area:Permission"</summary>
        [Newtonsoft.Json.JsonProperty("Permissions", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; }

        /// <summary>The Keyfactor identities to assign to the created role</summary>
        [Newtonsoft.Json.JsonProperty("Identities", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<SecurityIdentityIdentifier> Identities { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SecurityRoleCopyRequest
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServerAccessResponse
    {
        [Newtonsoft.Json.JsonProperty("ServerId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ServerId { get; set; }

        [Newtonsoft.Json.JsonProperty("LogonUsers", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<LogonUserAccessResponse> LogonUsers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedSSHServerQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedSSHServerQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServerUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("UnderManagement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UnderManagement { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Port { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServerCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("AgentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid AgentId { get; set; }

        [Newtonsoft.Json.JsonProperty("Hostname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Hostname { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerGroupId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid ServerGroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("UnderManagement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UnderManagement { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Port { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServerAccessRequest
    {
        [Newtonsoft.Json.JsonProperty("ServerId", Required = Newtonsoft.Json.Required.Always)]
        public int? ServerId { get; set; }

        [Newtonsoft.Json.JsonProperty("LogonUsers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LogonUserAccessRequest> LogonUsers { get; set; } = new System.Collections.ObjectModel.Collection<LogonUserAccessRequest>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LogonUserAccessRequest
    {
        [Newtonsoft.Json.JsonProperty("LogonName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string LogonName { get; set; }

        [Newtonsoft.Json.JsonProperty("Users", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Users { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServerGroupResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Owner", Required = Newtonsoft.Json.Required.AllowNull)]
        public SshUserResponse Owner { get; set; }

        [Newtonsoft.Json.JsonProperty("GroupName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string GroupName { get; set; }

        [Newtonsoft.Json.JsonProperty("SyncSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule SyncSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("UnderManagement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UnderManagement { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ServerCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServerGroupAccessResponse
    {
        [Newtonsoft.Json.JsonProperty("ServerGroupId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid ServerGroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("LogonUsers", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<LogonUserAccessResponse> LogonUsers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedSSHServerGroupQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedSSHServerGroupQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServerGroupUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("OwnerName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OwnerName { get; set; }

        [Newtonsoft.Json.JsonProperty("GroupName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GroupName { get; set; }

        [Newtonsoft.Json.JsonProperty("SyncSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule SyncSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("UnderManagement", Required = Newtonsoft.Json.Required.Always)]
        public bool? UnderManagement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServerGroupCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("OwnerName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OwnerName { get; set; }

        [Newtonsoft.Json.JsonProperty("GroupName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GroupName { get; set; }

        [Newtonsoft.Json.JsonProperty("SyncSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule SyncSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("UnderManagement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UnderManagement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServerGroupAccessRequest
    {
        [Newtonsoft.Json.JsonProperty("ServerGroupId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid ServerGroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("LogonUsers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LogonUserAccessRequest> LogonUsers { get; set; } = new System.Collections.ObjectModel.Collection<LogonUserAccessRequest>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServiceAccountResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientHostname", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ClientHostname { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerGroup", Required = Newtonsoft.Json.Required.AllowNull)]
        public ServerGroupResponse ServerGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("User", Required = Newtonsoft.Json.Required.AllowNull)]
        public SshUserResponse User { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedSSHServiceAccountQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedSSHServiceAccountQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServiceAccountUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("KeyUpdateRequest", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public KeyUpdateRequest KeyUpdateRequest { get; set; } = new KeyUpdateRequest();

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int? Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServiceAccountCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("KeyGenerationRequest", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public KeyGenerationRequest KeyGenerationRequest { get; set; } = new KeyGenerationRequest();

        [Newtonsoft.Json.JsonProperty("User", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ServiceAccountUserCreationRequest User { get; set; } = new ServiceAccountUserCreationRequest();

        [Newtonsoft.Json.JsonProperty("ClientHostname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ClientHostname { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerGroupId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid ServerGroupId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServiceAccountUserCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("LogonIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> LogonIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SMTPResponse
    {
        [Newtonsoft.Json.JsonProperty("Host", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Host { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Port { get; set; }

        [Newtonsoft.Json.JsonProperty("RelayAuthenticationType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? RelayAuthenticationType { get; set; }

        [Newtonsoft.Json.JsonProperty("RelayUsername", Required = Newtonsoft.Json.Required.AllowNull)]
        public string RelayUsername { get; set; }

        [Newtonsoft.Json.JsonProperty("SenderAccount", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SenderAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("SenderName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SenderName { get; set; }

        [Newtonsoft.Json.JsonProperty("UseSSL", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UseSSL { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SMTPRequest
    {
        [Newtonsoft.Json.JsonProperty("Host", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Host { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Port { get; set; }

        [Newtonsoft.Json.JsonProperty("RelayAuthenticationType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? RelayAuthenticationType { get; set; }

        [Newtonsoft.Json.JsonProperty("RelayPassword", Required = Newtonsoft.Json.Required.AllowNull)]
        public string RelayPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("RelayUsername", Required = Newtonsoft.Json.Required.AllowNull)]
        public string RelayUsername { get; set; }

        [Newtonsoft.Json.JsonProperty("SenderAccount", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SenderAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("SenderName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SenderName { get; set; }

        [Newtonsoft.Json.JsonProperty("UseSSL", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UseSSL { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SMTPTestRequest
    {
        [Newtonsoft.Json.JsonProperty("Host", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Host { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Port { get; set; }

        [Newtonsoft.Json.JsonProperty("RelayAuthenticationType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? RelayAuthenticationType { get; set; }

        [Newtonsoft.Json.JsonProperty("RelayPassword", Required = Newtonsoft.Json.Required.AllowNull)]
        public string RelayPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("RelayUsername", Required = Newtonsoft.Json.Required.AllowNull)]
        public string RelayUsername { get; set; }

        [Newtonsoft.Json.JsonProperty("SenderAccount", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SenderAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("SenderName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SenderName { get; set; }

        [Newtonsoft.Json.JsonProperty("TestRecipient", Required = Newtonsoft.Json.Required.AllowNull)]
        public string TestRecipient { get; set; }

        [Newtonsoft.Json.JsonProperty("UseSSL", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UseSSL { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SMTPTestResponse
    {
        [Newtonsoft.Json.JsonProperty("Host", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Host { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Port { get; set; }

        [Newtonsoft.Json.JsonProperty("RelayAuthenticationType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? RelayAuthenticationType { get; set; }

        [Newtonsoft.Json.JsonProperty("RelayUsername", Required = Newtonsoft.Json.Required.AllowNull)]
        public string RelayUsername { get; set; }

        [Newtonsoft.Json.JsonProperty("SenderAccount", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SenderAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("SenderName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SenderName { get; set; }

        [Newtonsoft.Json.JsonProperty("TestRecipient", Required = Newtonsoft.Json.Required.AllowNull)]
        public string TestRecipient { get; set; }

        [Newtonsoft.Json.JsonProperty("UseSSL", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UseSSL { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScanJobPart
    {
        [Newtonsoft.Json.JsonProperty("ScanJobPartId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid ScanJobPartId { get; set; }

        [Newtonsoft.Json.JsonProperty("LogicalScanJobId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid LogicalScanJobId { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentJobId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentJobId { get; set; }

        [Newtonsoft.Json.JsonProperty("EstimatedEndpointCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? EstimatedEndpointCount { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.AllowNull)]
        public ScanJobPartStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("StatTotalEndpointCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StatTotalEndpointCount { get; set; }

        [Newtonsoft.Json.JsonProperty("StatTimedOutConnectingCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StatTimedOutConnectingCount { get; set; }

        [Newtonsoft.Json.JsonProperty("StatConnectionRefusedCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StatConnectionRefusedCount { get; set; }

        [Newtonsoft.Json.JsonProperty("StatTimedOutDownloadingCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StatTimedOutDownloadingCount { get; set; }

        [Newtonsoft.Json.JsonProperty("StatExceptionDownloadingCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StatExceptionDownloadingCount { get; set; }

        [Newtonsoft.Json.JsonProperty("StatNotSslCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StatNotSslCount { get; set; }

        [Newtonsoft.Json.JsonProperty("StatBadSslHandshakeCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StatBadSslHandshakeCount { get; set; }

        [Newtonsoft.Json.JsonProperty("StatCertificateFoundCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StatCertificateFoundCount { get; set; }

        [Newtonsoft.Json.JsonProperty("StatNoCertificateCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? StatNoCertificateCount { get; set; }

        [Newtonsoft.Json.JsonProperty("ScanJobPartDefinitions", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ScanJobPartDefinition> ScanJobPartDefinitions { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset EndTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ScanJobPartDefinition
    {
        [Newtonsoft.Json.JsonProperty("ItemType", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ItemType { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Endpoint
    {
        [Newtonsoft.Json.JsonProperty("EndpointId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid EndpointId { get; set; }

        [Newtonsoft.Json.JsonProperty("NetworkId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid NetworkId { get; set; }

        [Newtonsoft.Json.JsonProperty("LastHistoryId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid LastHistoryId { get; set; }

        [Newtonsoft.Json.JsonProperty("IpAddressBytes", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public byte[] IpAddressBytes { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Port { get; set; }

        [Newtonsoft.Json.JsonProperty("SNIName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SNIName { get; set; }

        [Newtonsoft.Json.JsonProperty("EnableMonitor", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? EnableMonitor { get; set; }

        [Newtonsoft.Json.JsonProperty("Reviewed", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Reviewed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NetworkDefinition
    {
        [Newtonsoft.Json.JsonProperty("ItemType", Required = Newtonsoft.Json.Required.AllowNull)]
        public NetworkDefinitionItemType ItemType { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NetworkResponse
    {
        [Newtonsoft.Json.JsonProperty("NetworkId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid NetworkId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentPoolName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AgentPoolName { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentPoolId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentPoolId { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule DiscoverSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule MonitorSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverPercentComplete", Required = Newtonsoft.Json.Required.AllowNull)]
        public double DiscoverPercentComplete { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorPercentComplete", Required = Newtonsoft.Json.Required.AllowNull)]
        public double MonitorPercentComplete { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverStatus", Required = Newtonsoft.Json.Required.AllowNull)]
        public NetworkResponseDiscoverStatus DiscoverStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorStatus", Required = Newtonsoft.Json.Required.AllowNull)]
        public NetworkResponseMonitorStatus MonitorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverLastScanned", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset DiscoverLastScanned { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorLastScanned", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset MonitorLastScanned { get; set; }

        [Newtonsoft.Json.JsonProperty("SslAlertRecipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> SslAlertRecipients { get; set; }

        [Newtonsoft.Json.JsonProperty("AutoMonitor", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AutoMonitor { get; set; }

        [Newtonsoft.Json.JsonProperty("GetRobots", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? GetRobots { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverTimeoutMs", Required = Newtonsoft.Json.Required.AllowNull)]
        public double DiscoverTimeoutMs { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorTimeoutMs", Required = Newtonsoft.Json.Required.AllowNull)]
        public double MonitorTimeoutMs { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationAlertDays", Required = Newtonsoft.Json.Required.AllowNull)]
        public double ExpirationAlertDays { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverJobParts", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? DiscoverJobParts { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorJobParts", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? MonitorJobParts { get; set; }

        [Newtonsoft.Json.JsonProperty("QuietHours", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<QuietHourResponse> QuietHours { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuietHourResponse
    {
        [Newtonsoft.Json.JsonProperty("StartDay", Required = Newtonsoft.Json.Required.AllowNull)]
        public QuietHourResponseStartDay StartDay { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndDay", Required = Newtonsoft.Json.Required.AllowNull)]
        public QuietHourResponseEndDay EndDay { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset EndTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedSslResultQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedSslResultQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SslScanResult
    {
        [Newtonsoft.Json.JsonProperty("EndpointId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid EndpointId { get; set; }

        [Newtonsoft.Json.JsonProperty("ReverseDNS", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ReverseDNS { get; set; }

        [Newtonsoft.Json.JsonProperty("SNIName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SNIName { get; set; }

        [Newtonsoft.Json.JsonProperty("IpAddress", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IpAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Port { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateFound", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? CertificateFound { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentPoolName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AgentPoolName { get; set; }

        [Newtonsoft.Json.JsonProperty("NetworkName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string NetworkName { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorStatus", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? MonitorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateCN", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CertificateCN { get; set; }

        [Newtonsoft.Json.JsonProperty("Reviewed", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Reviewed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NetworkQueryResponse
    {
        [Newtonsoft.Json.JsonProperty("NetworkId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid NetworkId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentPoolName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AgentPoolName { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentPoolId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid AgentPoolId { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule DiscoverSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule MonitorSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverPercentComplete", Required = Newtonsoft.Json.Required.AllowNull)]
        public double DiscoverPercentComplete { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorPercentComplete", Required = Newtonsoft.Json.Required.AllowNull)]
        public double MonitorPercentComplete { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverStatus", Required = Newtonsoft.Json.Required.AllowNull)]
        public NetworkQueryResponseDiscoverStatus DiscoverStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorStatus", Required = Newtonsoft.Json.Required.AllowNull)]
        public NetworkQueryResponseMonitorStatus MonitorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverLastScanned", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset DiscoverLastScanned { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorLastScanned", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset MonitorLastScanned { get; set; }

        [Newtonsoft.Json.JsonProperty("SslAlertRecipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> SslAlertRecipients { get; set; }

        [Newtonsoft.Json.JsonProperty("AutoMonitor", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AutoMonitor { get; set; }

        [Newtonsoft.Json.JsonProperty("GetRobots", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? GetRobots { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverTimeoutMs", Required = Newtonsoft.Json.Required.AllowNull)]
        public double DiscoverTimeoutMs { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorTimeoutMs", Required = Newtonsoft.Json.Required.AllowNull)]
        public double MonitorTimeoutMs { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationAlertDays", Required = Newtonsoft.Json.Required.AllowNull)]
        public double ExpirationAlertDays { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverJobParts", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? DiscoverJobParts { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorJobParts", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? MonitorJobParts { get; set; }

        [Newtonsoft.Json.JsonProperty("QuietHours", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<QuietHourResponse> QuietHours { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateNetworkRequest
    {
        [Newtonsoft.Json.JsonProperty("NetworkId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid NetworkId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentPoolName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AgentPoolName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule DiscoverSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule MonitorSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("SslAlertRecipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> SslAlertRecipients { get; set; }

        [Newtonsoft.Json.JsonProperty("AutoMonitor", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AutoMonitor { get; set; }

        [Newtonsoft.Json.JsonProperty("GetRobots", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? GetRobots { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverTimeoutMs", Required = Newtonsoft.Json.Required.AllowNull)]
        public double DiscoverTimeoutMs { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorTimeoutMs", Required = Newtonsoft.Json.Required.AllowNull)]
        public double MonitorTimeoutMs { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationAlertDays", Required = Newtonsoft.Json.Required.AllowNull)]
        public double ExpirationAlertDays { get; set; }

        [Newtonsoft.Json.JsonProperty("QuietHours", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<QuietHourRequest> QuietHours { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuietHourRequest
    {
        [Newtonsoft.Json.JsonProperty("StartDay", Required = Newtonsoft.Json.Required.AllowNull)]
        public QuietHourRequestStartDay StartDay { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndDay", Required = Newtonsoft.Json.Required.AllowNull)]
        public QuietHourRequestEndDay EndDay { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset EndTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateNetworkRequest
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("AgentPoolName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AgentPoolName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule DiscoverSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyfactorSchedule MonitorSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("SslAlertRecipients", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> SslAlertRecipients { get; set; }

        [Newtonsoft.Json.JsonProperty("AutoMonitor", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AutoMonitor { get; set; }

        [Newtonsoft.Json.JsonProperty("GetRobots", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? GetRobots { get; set; }

        [Newtonsoft.Json.JsonProperty("DiscoverTimeoutMs", Required = Newtonsoft.Json.Required.AllowNull)]
        public double DiscoverTimeoutMs { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorTimeoutMs", Required = Newtonsoft.Json.Required.AllowNull)]
        public double MonitorTimeoutMs { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationAlertDays", Required = Newtonsoft.Json.Required.AllowNull)]
        public double ExpirationAlertDays { get; set; }

        [Newtonsoft.Json.JsonProperty("QuietHours", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<QuietHourRequest> QuietHours { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EndpointHistoryResponse
    {
        [Newtonsoft.Json.JsonProperty("HistoryId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid HistoryId { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid EndpointId { get; set; }

        [Newtonsoft.Json.JsonProperty("AuditId", Required = Newtonsoft.Json.Required.AllowNull)]
        public long AuditId { get; set; }

        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.AllowNull)]
        public EndpointHistoryResponseStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("JobType", Required = Newtonsoft.Json.Required.AllowNull)]
        public EndpointHistoryResponseJobType JobType { get; set; }

        [Newtonsoft.Json.JsonProperty("ProbeType", Required = Newtonsoft.Json.Required.AllowNull)]
        public EndpointHistoryResponseProbeType ProbeType { get; set; }

        [Newtonsoft.Json.JsonProperty("ReverseDNS", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ReverseDNS { get; set; }

        [Newtonsoft.Json.JsonProperty("HistoryCertificates", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateModel> HistoryCertificates { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuedDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuedDN { get; set; }

        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string SerialNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("NotBefore", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset NotBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("NotAfter", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset NotAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("SigningAlgorithm", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SigningAlgorithm { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuerDN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuerDN { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuedCN", Required = Newtonsoft.Json.Required.Default)]
        public string IssuedCN { get; set; }

        [Newtonsoft.Json.JsonProperty("SubjectAltNameElements", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<SubjectAlternativeName> SubjectAltNameElements { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SubjectAlternativeName
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.AllowNull)]
        public SubjectAlternativeNameType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueHash", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
        public string ValueHash { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedScanJobPartsQuery
    {
        [Newtonsoft.Json.JsonProperty("JobType", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedScanJobPartsQueryJobType JobType { get; set; }

        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedScanJobPartsQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisplayScanJobPart
    {
        [Newtonsoft.Json.JsonProperty("ScanJobPartId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid ScanJobPartId { get; set; }

        [Newtonsoft.Json.JsonProperty("Agent", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Agent { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.AllowNull)]
        public DisplayScanJobPartStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset EndTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointCount", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? EndpointCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NetworkRangesRequest
    {
        [Newtonsoft.Json.JsonProperty("NetworkId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid NetworkId { get; set; }

        [Newtonsoft.Json.JsonProperty("Ranges", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Ranges { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EndpointStatusRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        public bool? Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ImmediateSslScanRequest
    {
        [Newtonsoft.Json.JsonProperty("Discovery", Required = Newtonsoft.Json.Required.Always)]
        public bool? Discovery { get; set; }

        [Newtonsoft.Json.JsonProperty("Monitoring", Required = Newtonsoft.Json.Required.Always)]
        public bool? Monitoring { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateRetrievalResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("CommonName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CommonName { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string TemplateName { get; set; }

        [Newtonsoft.Json.JsonProperty("Oid", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Oid { get; set; }

        [Newtonsoft.Json.JsonProperty("KeySize", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeySize { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeyType { get; set; }

        [Newtonsoft.Json.JsonProperty("ForestRoot", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ForestRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("ConfigurationTenant", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ConfigurationTenant { get; set; }

        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string FriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyRetention", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateRetrievalResponseKeyRetention KeyRetention { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyRetentionDays", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyRetentionDays { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyArchival", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? KeyArchival { get; set; }

        [Newtonsoft.Json.JsonProperty("EnrollmentFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateEnrollmentFieldModel> EnrollmentFields { get; set; }

        [Newtonsoft.Json.JsonProperty("MetadataFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateMetadataFieldModel> MetadataFields { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedEnrollmentTypes", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateRetrievalResponseAllowedEnrollmentTypes AllowedEnrollmentTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateRegexes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateRegexModel> TemplateRegexes { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateDefaults", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateDefaultModel> TemplateDefaults { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplatePolicy", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplatePolicyModel TemplatePolicy { get; set; }

        [Newtonsoft.Json.JsonProperty("UseAllowedRequesters", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UseAllowedRequesters { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedRequesters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> AllowedRequesters { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("RFCEnforcement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RFCEnforcement { get; set; }

        [Newtonsoft.Json.JsonProperty("RequiresApproval", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RequiresApproval { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyUsage", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyUsage { get; set; }

        [Newtonsoft.Json.JsonProperty("ExtendedKeyUsages", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ExtendedKeyUsageModel2> ExtendedKeyUsages { get; set; }

        [Newtonsoft.Json.JsonProperty("Curve", Required = Newtonsoft.Json.Required.Default)]
        public string Curve { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateEnrollmentFieldModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Options { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateEnrollmentFieldModelDataType DataType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateMetadataFieldModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("MetadataId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? MetadataId { get; set; }

        [Newtonsoft.Json.JsonProperty("Validation", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Validation { get; set; }

        [Newtonsoft.Json.JsonProperty("Enrollment", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateMetadataFieldModelEnrollment Enrollment { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateRegexModel
    {
        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("SubjectPart", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SubjectPart { get; set; }

        [Newtonsoft.Json.JsonProperty("Regex", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Regex { get; set; }

        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateDefaultModel
    {
        [Newtonsoft.Json.JsonProperty("SubjectPart", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SubjectPart { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplatePolicyModel
    {
        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("RSAValidKeySizes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> RSAValidKeySizes { get; set; }

        [Newtonsoft.Json.JsonProperty("ECCValidCurves", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> ECCValidCurves { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowKeyReuse", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AllowKeyReuse { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowWildcards", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AllowWildcards { get; set; }

        [Newtonsoft.Json.JsonProperty("RFCEnforcement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RFCEnforcement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExtendedKeyUsageModel2
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Oid", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Oid { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlobalTemplateSettingsResponse
    {
        /// <summary>The regular expressions to use for validation during enrollment.</summary>
        [Newtonsoft.Json.JsonProperty("TemplateRegexes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<GlobalTemplateRegexResponse> TemplateRegexes { get; set; }

        /// <summary>The default values to use during enrollment.</summary>
        [Newtonsoft.Json.JsonProperty("TemplateDefaults", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<GlobalTemplateDefaultResponse> TemplateDefaults { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplatePolicy", Required = Newtonsoft.Json.Required.AllowNull)]
        public GlobalTemplatePolicyResponse TemplatePolicy { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlobalTemplateRegexResponse
    {
        /// <summary>The subject part to apply the regular expression to.</summary>
        [Newtonsoft.Json.JsonProperty("SubjectPart", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SubjectPart { get; set; }

        /// <summary>The regular expression to apply to the subject part.</summary>
        [Newtonsoft.Json.JsonProperty("Regex", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Regex { get; set; }

        /// <summary>The error message to show when the regex validation fails.</summary>
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlobalTemplateDefaultResponse
    {
        /// <summary>The subject part to apply the default to.</summary>
        [Newtonsoft.Json.JsonProperty("SubjectPart", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SubjectPart { get; set; }

        /// <summary>The value to apply by default.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlobalTemplatePolicyResponse
    {
        /// <summary>The allowed RSA key sizes.</summary>
        [Newtonsoft.Json.JsonProperty("RSAValidKeySizes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> RSAValidKeySizes { get; set; }

        /// <summary>The allowed ECC curves.</summary>
        [Newtonsoft.Json.JsonProperty("ECCValidCurves", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> ECCValidCurves { get; set; }

        /// <summary>Whether or not keys can be reused.</summary>
        [Newtonsoft.Json.JsonProperty("AllowKeyReuse", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AllowKeyReuse { get; set; }

        /// <summary>Whether or not wildcards can be used.</summary>
        [Newtonsoft.Json.JsonProperty("AllowWildcards", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AllowWildcards { get; set; }

        /// <summary>Whether or not RFC 2818 compliance should be enforced.</summary>
        [Newtonsoft.Json.JsonProperty("RFCEnforcement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RFCEnforcement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlobalTemplateSettingsRequest
    {
        /// <summary>The regular expressions to use for validation during enrollment.</summary>
        [Newtonsoft.Json.JsonProperty("TemplateRegexes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<GlobalTemplateRegexRequest> TemplateRegexes { get; set; } = new System.Collections.ObjectModel.Collection<GlobalTemplateRegexRequest>();

        /// <summary>The default values to use during enrollment.</summary>
        [Newtonsoft.Json.JsonProperty("TemplateDefaults", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<GlobalTemplateDefaultRequest> TemplateDefaults { get; set; } = new System.Collections.ObjectModel.Collection<GlobalTemplateDefaultRequest>();

        [Newtonsoft.Json.JsonProperty("TemplatePolicy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public GlobalTemplatePolicyRequest TemplatePolicy { get; set; } = new GlobalTemplatePolicyRequest();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlobalTemplateRegexRequest
    {
        /// <summary>The subject part to apply the regular expression to.</summary>
        [Newtonsoft.Json.JsonProperty("SubjectPart", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubjectPart { get; set; }

        /// <summary>The regular expression to apply to the subject part.</summary>
        [Newtonsoft.Json.JsonProperty("Regex", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Regex { get; set; }

        /// <summary>The error message to show when the regex validation fails.</summary>
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlobalTemplateDefaultRequest
    {
        /// <summary>The subject part to apply the default to.</summary>
        [Newtonsoft.Json.JsonProperty("SubjectPart", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubjectPart { get; set; }

        /// <summary>The value to apply by default.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlobalTemplatePolicyRequest
    {
        /// <summary>The allowed RSA key sizes.</summary>
        [Newtonsoft.Json.JsonProperty("RSAValidKeySizes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> RSAValidKeySizes { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        /// <summary>The allowed ECC curves.</summary>
        [Newtonsoft.Json.JsonProperty("ECCValidCurves", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ECCValidCurves { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>Whether or not keys can be reused.</summary>
        [Newtonsoft.Json.JsonProperty("AllowKeyReuse", Required = Newtonsoft.Json.Required.Always)]
        public bool? AllowKeyReuse { get; set; }

        /// <summary>Whether or not wildcards can be used.</summary>
        [Newtonsoft.Json.JsonProperty("AllowWildcards", Required = Newtonsoft.Json.Required.Always)]
        public bool? AllowWildcards { get; set; }

        /// <summary>Whether or not RFC 2818 compliance should be enforced.</summary>
        [Newtonsoft.Json.JsonProperty("RFCEnforcement", Required = Newtonsoft.Json.Required.Always)]
        public bool? RFCEnforcement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ValidSubjectPartResponse
    {
        [Newtonsoft.Json.JsonProperty("SubjectPart", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SubjectPart { get; set; }

        [Newtonsoft.Json.JsonProperty("SubjectPartName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SubjectPartName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedTemplateQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedTemplateQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateCollectionRetrievalResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("CommonName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CommonName { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string TemplateName { get; set; }

        [Newtonsoft.Json.JsonProperty("Oid", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Oid { get; set; }

        [Newtonsoft.Json.JsonProperty("KeySize", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeySize { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeyType { get; set; }

        [Newtonsoft.Json.JsonProperty("ForestRoot", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ForestRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("ConfigurationTenant", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ConfigurationTenant { get; set; }

        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string FriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyRetention", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateCollectionRetrievalResponseKeyRetention KeyRetention { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyRetentionDays", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyRetentionDays { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyArchival", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? KeyArchival { get; set; }

        [Newtonsoft.Json.JsonProperty("EnrollmentFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateEnrollmentFieldModel2> EnrollmentFields { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedEnrollmentTypes", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateCollectionRetrievalResponseAllowedEnrollmentTypes AllowedEnrollmentTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateRegexes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateRegexModel2> TemplateRegexes { get; set; }

        [Newtonsoft.Json.JsonProperty("UseAllowedRequesters", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UseAllowedRequesters { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedRequesters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> AllowedRequesters { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("RequiresApproval", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RequiresApproval { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyUsage", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyUsage { get; set; }

        [Newtonsoft.Json.JsonProperty("ExtendedKeyUsages", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ExtendedKeyUsageModel3> ExtendedKeyUsages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateEnrollmentFieldModel2
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Options { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateEnrollmentFieldModel2DataType DataType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateRegexModel2
    {
        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("SubjectPart", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SubjectPart { get; set; }

        [Newtonsoft.Json.JsonProperty("Regex", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Regex { get; set; }

        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExtendedKeyUsageModel3
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Oid", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Oid { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("KeySize", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeySize { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeyType { get; set; }

        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string FriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyRetention", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateUpdateRequestKeyRetention KeyRetention { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyRetentionDays", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyRetentionDays { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyArchival", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? KeyArchival { get; set; }

        [Newtonsoft.Json.JsonProperty("EnrollmentFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateEnrollmentFieldModel3> EnrollmentFields { get; set; }

        [Newtonsoft.Json.JsonProperty("MetadataFields", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateMetadataFieldModel2> MetadataFields { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedEnrollmentTypes", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateUpdateRequestAllowedEnrollmentTypes AllowedEnrollmentTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateRegexes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateRegexModel3> TemplateRegexes { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateDefaults", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TemplateDefaultModel2> TemplateDefaults { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplatePolicy", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplatePolicyModel2 TemplatePolicy { get; set; }

        [Newtonsoft.Json.JsonProperty("UseAllowedRequesters", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? UseAllowedRequesters { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedRequesters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> AllowedRequesters { get; set; }

        [Newtonsoft.Json.JsonProperty("RequiresApproval", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RequiresApproval { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyUsage", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyUsage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateEnrollmentFieldModel3
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Options { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateEnrollmentFieldModel3DataType DataType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateMetadataFieldModel2
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("MetadataId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? MetadataId { get; set; }

        [Newtonsoft.Json.JsonProperty("Validation", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Validation { get; set; }

        [Newtonsoft.Json.JsonProperty("Enrollment", Required = Newtonsoft.Json.Required.AllowNull)]
        public TemplateMetadataFieldModel2Enrollment Enrollment { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateRegexModel3
    {
        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("SubjectPart", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SubjectPart { get; set; }

        [Newtonsoft.Json.JsonProperty("Regex", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Regex { get; set; }

        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplateDefaultModel2
    {
        [Newtonsoft.Json.JsonProperty("SubjectPart", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SubjectPart { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TemplatePolicyModel2
    {
        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("RSAValidKeySizes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> RSAValidKeySizes { get; set; }

        [Newtonsoft.Json.JsonProperty("ECCValidCurves", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> ECCValidCurves { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowKeyReuse", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AllowKeyReuse { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowWildcards", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? AllowWildcards { get; set; }

        [Newtonsoft.Json.JsonProperty("RFCEnforcement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? RFCEnforcement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConfigurationTenantRequest
    {
        [Newtonsoft.Json.JsonProperty("ConfigurationTenant", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ConfigurationTenant { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedSSHUserQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedSSHUserQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SshUserUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("LogonIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> LogonIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SshUserCreationRequest
    {
        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("LogonIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> LogonIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SshUserAccessResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.AllowNull)]
        public KeyResponse Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("Access", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<LogonResponse> Access { get; set; }

        [Newtonsoft.Json.JsonProperty("IsGroup", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IsGroup { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateRequestDetailsModel
    {
        [Newtonsoft.Json.JsonProperty("DenialComment", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DenialComment { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyLength", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeyLength { get; set; }

        [Newtonsoft.Json.JsonProperty("SANs", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> SANs { get; set; }

        [Newtonsoft.Json.JsonProperty("CertStores", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CertificateRequestCertStoreModel> CertStores { get; set; }

        [Newtonsoft.Json.JsonProperty("Curve", Required = Newtonsoft.Json.Required.Default)]
        public string Curve { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("CARequestId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CARequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("CommonName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CommonName { get; set; }

        [Newtonsoft.Json.JsonProperty("DistinguishedName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DistinguishedName { get; set; }

        [Newtonsoft.Json.JsonProperty("SubmissionDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset SubmissionDate { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateAuthority", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CertificateAuthority { get; set; }

        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Template { get; set; }

        [Newtonsoft.Json.JsonProperty("Requester", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Requester { get; set; }

        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateRequestDetailsModelState State { get; set; }

        [Newtonsoft.Json.JsonProperty("StateString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StateString { get; set; }

        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateRequestCertStoreModel
    {
        [Newtonsoft.Json.JsonProperty("EntryName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string EntryName { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientMachine", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ClientMachine { get; set; }

        [Newtonsoft.Json.JsonProperty("StorePath", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StorePath { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedLegacyDeniedRequestQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedLegacyDeniedRequestQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CertificateRequestModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("CARequestId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CARequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("CommonName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CommonName { get; set; }

        [Newtonsoft.Json.JsonProperty("DistinguishedName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DistinguishedName { get; set; }

        [Newtonsoft.Json.JsonProperty("SubmissionDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset SubmissionDate { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateAuthority", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CertificateAuthority { get; set; }

        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Template { get; set; }

        [Newtonsoft.Json.JsonProperty("Requester", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Requester { get; set; }

        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.AllowNull)]
        public CertificateRequestModelState State { get; set; }

        [Newtonsoft.Json.JsonProperty("StateString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StateString { get; set; }

        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PagedCertificateRequestQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public PagedCertificateRequestQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DenialRequest
    {
        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateRequestIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> CertificateRequestIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApproveDenyResult
    {
        [Newtonsoft.Json.JsonProperty("Failures", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ProcessedCertificateRequest> Failures { get; set; }

        [Newtonsoft.Json.JsonProperty("Denials", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ProcessedCertificateRequest> Denials { get; set; }

        [Newtonsoft.Json.JsonProperty("Successes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ProcessedCertificateRequest> Successes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProcessedCertificateRequest
    {
        [Newtonsoft.Json.JsonProperty("CARowId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CARowId { get; set; }

        [Newtonsoft.Json.JsonProperty("CARequestId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CARequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("CAHost", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CAHost { get; set; }

        [Newtonsoft.Json.JsonProperty("CALogicalName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CALogicalName { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyfactorRequestId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? KeyfactorRequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AvailableStepResponse
    {
        /// <summary>The display name of the step.</summary>
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        /// <summary>The name of the extension.</summary>
        [Newtonsoft.Json.JsonProperty("ExtensionName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ExtensionName { get; set; }

        /// <summary>The possible outputs of the step.</summary>
        [Newtonsoft.Json.JsonProperty("Outputs", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> Outputs { get; set; }

        [Newtonsoft.Json.JsonProperty("ConfigurationParametersDefinition", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, ParameterDefinitionResponse> ConfigurationParametersDefinition { get; set; }

        [Newtonsoft.Json.JsonProperty("SignalsDefinition", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, SignalDefinitionResponse> SignalsDefinition { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParameterDefinitionResponse
    {
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("ParameterType", Required = Newtonsoft.Json.Required.AllowNull)]
        public ParameterDefinitionResponseParameterType ParameterType { get; set; }

        [Newtonsoft.Json.JsonProperty("Required", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Required { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("ControlType", Required = Newtonsoft.Json.Required.AllowNull)]
        public ParameterDefinitionResponseControlType ControlType { get; set; }

        [Newtonsoft.Json.JsonProperty("PotentialValues", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> PotentialValues { get; set; }

        [Newtonsoft.Json.JsonProperty("SupportTokenReplacement", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SupportTokenReplacement { get; set; }

        [Newtonsoft.Json.JsonProperty("DependsOn", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> DependsOn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SignalDefinitionResponse
    {
        [Newtonsoft.Json.JsonProperty("InputParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, ParameterDefinitionResponse> InputParameters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DefinitionResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyDisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeyDisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPublished", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IsPublished { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkflowType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string WorkflowType { get; set; }

        [Newtonsoft.Json.JsonProperty("Steps", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<DefinitionStepResponse> Steps { get; set; }

        [Newtonsoft.Json.JsonProperty("DraftVersion", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? DraftVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("PublishedVersion", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PublishedVersion { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DefinitionStepResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("UniqueName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string UniqueName { get; set; }

        [Newtonsoft.Json.JsonProperty("ExtensionName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ExtensionName { get; set; }

        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("ConfigurationParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, object> ConfigurationParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("Signals", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<DefinitionStepSignalResponse> Signals { get; set; }

        [Newtonsoft.Json.JsonProperty("Conditions", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ConditionConfigurationResponse> Conditions { get; set; }

        [Newtonsoft.Json.JsonProperty("Outputs", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> Outputs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DefinitionStepSignalResponse
    {
        /// <summary>The roles that are allowed to send this signal.</summary>
        [Newtonsoft.Json.JsonProperty("RoleIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> RoleIds { get; set; }

        [Newtonsoft.Json.JsonProperty("SignalName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SignalName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Information about the configuration of a workflow condition.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConditionConfigurationResponse
    {
        /// <summary>The Id of the condition.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        /// <summary>The value to compare to. This value will be compared to a true value.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DefinitionUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkflowDefinitionQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public WorkflowDefinitionQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DefinitionQueryResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyDisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeyDisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkflowType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string WorkflowType { get; set; }

        [Newtonsoft.Json.JsonProperty("DraftVersion", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? DraftVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("PublishedVersion", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PublishedVersion { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DefinitionCreateRequest
    {
        /// <summary>Display name of the Definition</summary>
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        /// <summary>Description of the Definition</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Description { get; set; }

        /// <summary>Key to be used to look up definition when starting a new workflow.
        /// For enrollment workflowTypes, this should be a template</summary>
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Key { get; set; }

        /// <summary>The Type of Workflow</summary>
        [Newtonsoft.Json.JsonProperty("WorkflowType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string WorkflowType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkflowStepSchemaQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public WorkflowStepSchemaQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AvailableStepQueryResponse
    {
        /// <summary>The display name of the step.</summary>
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        /// <summary>The extension name of the step.</summary>
        [Newtonsoft.Json.JsonProperty("ExtensionName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ExtensionName { get; set; }

        /// <summary>The workflow types which this step can be a part of.</summary>
        [Newtonsoft.Json.JsonProperty("SupportedWorkflowTypes", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> SupportedWorkflowTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("ConfigurationParametersDefinition", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, ParameterDefinitionResponse> ConfigurationParametersDefinition { get; set; }

        [Newtonsoft.Json.JsonProperty("SignalsDefinition", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, SignalDefinitionResponse> SignalsDefinition { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkflowTypeQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public WorkflowTypeQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkflowTypeQueryResponse
    {
        [Newtonsoft.Json.JsonProperty("WorkflowType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string WorkflowType { get; set; }

        [Newtonsoft.Json.JsonProperty("KeyType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string KeyType { get; set; }

        [Newtonsoft.Json.JsonProperty("ContextParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<string> ContextParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("BuiltInSteps", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<AvailableStepResponse> BuiltInSteps { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DefinitionStepRequest
    {
        [Newtonsoft.Json.JsonProperty("ExtensionName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ExtensionName { get; set; }

        [Newtonsoft.Json.JsonProperty("UniqueName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string UniqueName { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("ConfigurationParameters", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, object> ConfigurationParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("Signals", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<SignalConfigurationRequest> Signals { get; set; }

        [Newtonsoft.Json.JsonProperty("Conditions", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ConditionConfigurationRequest> Conditions { get; set; }

        [Newtonsoft.Json.JsonProperty("Outputs", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, string> Outputs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SignalConfigurationRequest
    {
        /// <summary>The name of the signal.</summary>
        [Newtonsoft.Json.JsonProperty("SignalName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SignalName { get; set; }

        /// <summary>The roles that are allowed to send the signal.</summary>
        [Newtonsoft.Json.JsonProperty("RoleIds", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<int> RoleIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Information about the configuration of a workflow condition.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConditionConfigurationRequest
    {
        /// <summary>The value to compare to true when evaluating conditions.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.AllowNull)]
        public InstanceResponseStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentStepId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid CurrentStepId { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusMessage", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StatusMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("Signals", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<AvailableSignalResponse> Signals { get; set; }

        [Newtonsoft.Json.JsonProperty("Definition", Required = Newtonsoft.Json.Required.AllowNull)]
        public InstanceDefinitionResponse Definition { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentStepDisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CurrentStepDisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentStepUniqueName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CurrentStepUniqueName { get; set; }

        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("LastModified", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset LastModified { get; set; }

        [Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("InitialData", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, object> InitialData { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentStateData", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, object> CurrentStateData { get; set; }

        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public long ReferenceId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AvailableSignalResponse
    {
        /// <summary>The name of the signal.</summary>
        [Newtonsoft.Json.JsonProperty("SignalName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SignalName { get; set; }

        /// <summary>The signal Id.</summary>
        [Newtonsoft.Json.JsonProperty("StepSignalId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid StepSignalId { get; set; }

        /// <summary>Whether or not the signal has been received.</summary>
        [Newtonsoft.Json.JsonProperty("SignalReceived", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? SignalReceived { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InstanceDefinitionResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? Version { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkflowType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string WorkflowType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkflowInstanceQuery
    {
        /// <summary>Contents of the query (ex: field1 -eq value1 AND field2 -gt value2)</summary>
        [Newtonsoft.Json.JsonProperty("QueryString", Required = Newtonsoft.Json.Required.AllowNull)]
        public string QueryString { get; set; }

        /// <summary>The current page within the result set to be returned</summary>
        [Newtonsoft.Json.JsonProperty("PageReturned", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? PageReturned { get; set; }

        /// <summary>Maximum number of records to be returned in a single call</summary>
        [Newtonsoft.Json.JsonProperty("ReturnLimit", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? ReturnLimit { get; set; }

        /// <summary>Field by which the results should be sorted (view results via Management Portal for sortable columns)</summary>
        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SortField { get; set; }

        /// <summary>Field sort direction [0=ascending, 1=descending]</summary>
        [Newtonsoft.Json.JsonProperty("SortAscending", Required = Newtonsoft.Json.Required.AllowNull)]
        public WorkflowInstanceQuerySortAscending SortAscending { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InstanceQueryResponse
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.AllowNull)]
        public InstanceQueryResponseStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentStepId", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid CurrentStepId { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusMessage", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StatusMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("Definition", Required = Newtonsoft.Json.Required.AllowNull)]
        public InstanceDefinitionResponse Definition { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentStepDisplayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CurrentStepDisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentStepUniqueName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CurrentStepUniqueName { get; set; }

        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("LastModified", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset LastModified { get; set; }

        [Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public long ReferenceId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SignalRequest
    {
        /// <summary>The signal key. This is expected to be in a format like "STEP_NAME.SIGNAL_NAME"</summary>
        [Newtonsoft.Json.JsonProperty("SignalKey", Required = Newtonsoft.Json.Required.AllowNull)]
        public string SignalKey { get; set; }

        /// <summary>Arbitrary data to associate with the signal.</summary>
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.IDictionary<string, object> Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending2
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending3
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending4
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending5
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending6
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending7
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending8
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending9
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending10
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending11
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending12
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending13
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending14
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending15
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending16
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending17
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending18
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending19
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending20
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending21
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending22
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending23
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending24
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending25
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending26
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending27
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending28
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending29
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending30
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending31
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending32
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending33
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending34
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending35
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending36
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending37
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending38
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum JobType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending39
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending40
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending41
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending42
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending43
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending44
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending45
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending46
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending47
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending48
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortAscending49
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AgentResponseAgentPlatform
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AgentResponseStatus
    {
        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedAgentQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UpdateOrchestratorAuthCertificateReenrollmentResponseStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedAgentBlueprintQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedAgentBlueprintJobsQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Days
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedAgentBlueprintStoresQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedAgentPoolQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedAgentPoolAgentsQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedAuditLogQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AuditLogEntryLevel
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateRetrievalResponseCertState
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateRetrievalResponseKeyType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateRetrievalResponseRevocationReason
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _8 = 8,

        _999 = 999,

        __1 = -1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SubjectAlternativeNameModelType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _100 = 100,

        _101 = 101,

        _999 = 999,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedCertificateHistoryQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateQueryRequestSortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateImportResponseModelImportStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

        _8 = 8,

        _16 = 16,

        _32 = 32,

        _64 = 64,

        _128 = 128,

        _256 = 256,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateImportResponseModelJobStatus
    {
        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InvalidKeystoreReason
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RevokeCertificateRequestReason
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _8 = 8,

        _999 = 999,

        __1 = -1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RevokeAllCertificatesRequestReason
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _8 = 8,

        _999 = 999,

        __1 = -1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateAuthorityResponseAllowedEnrollmentTypes
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateAuthorityResponseKeyRetention
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateAuthorityResponseCAType
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedCertificateAuthorityQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateAuthorityRequestAllowedEnrollmentTypes
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateAuthorityRequestKeyRetention
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateAuthorityRequestCAType
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateQueryDuplicationField
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateCollectionUpdateRequestDuplicationField
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateCollectionResponseDuplicationField
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateCollectionCreateRequestDuplicationField
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateCollectionCopyRequestDuplicationField
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedCertificateStoreQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateStoreTypeEntryParameterType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedCertificateStoreInventoryQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedCertificateStoreServerQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedCertificateStoreContainerQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateStoreTypeResponsePrivateKeyAllowed
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateStoreTypeResponseCustomAliasAllowed
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateStoreTypePropertyType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertStoreTypePasswordOptionsStyle
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateStoreTypeUpdateRequestPrivateKeyAllowed
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateStoreTypeUpdateRequestCustomAliasAllowed
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateStoreTypeCreationRequestPrivateKeyAllowed
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateStoreTypeCreationRequestCustomAliasAllowed
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedPendingCSRQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum JobTypeFieldResponseType
    {
        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum JobTypeFieldRequestType
    {
        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedDeniedAlertQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TemplateEnrollmentFieldDataType
    {
        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TemplateMetadataFieldEnrollment
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AvailableRenewalType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedExpirationAlertQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ExpirationAlertTestResponseAlertBuildResult
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedIssuedAlertQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedSSHUnmanagedKeyQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedKeyRotationAlertQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum KeyRotationAlertTestResponseAlertBuildResult
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedSSHLogonQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MetadataFieldTypeModelDataType
    {
        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MetadataFieldTypeModelEnrollment
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedMetadataFieldQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MetadataFieldUpdateRequestDataType
    {
        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MetadataFieldUpdateRequestEnrollment
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MetadataFieldResponseDataType
    {
        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MetadataFieldResponseEnrollment
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MetadataFieldCreateRequestDataType
    {
        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MetadataFieldCreateRequestEnrollment
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedRevocationMonitoringQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RevocationMonitoringAlertTestResponseAlertBuildResult
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedAgentJobHistoryQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum JobHistoryResponseResult
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum JobHistoryResponseStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedAgentJobQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProviderTypeParameterCreateRequestDataType
    {
        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProviderTypeParameterResponseDataType
    {
        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedPendingAlertQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PendingAlertTestResponseAlertBuildResult
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ReportParametersParameterType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _14 = 14,

        _15 = 15,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ReportParametersParameterVisibility
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedReportQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedCustomReportQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedReportScheduleQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedSecurityIdentityQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedSecurityRoleQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedSSHServerQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedSSHServerGroupQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedSSHServiceAccountQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ScanJobPartStatus
    {
        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NetworkDefinitionItemType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NetworkResponseDiscoverStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NetworkResponseMonitorStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum QuietHourResponseStartDay
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum QuietHourResponseEndDay
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedSslResultQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NetworkQueryResponseDiscoverStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NetworkQueryResponseMonitorStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum QuietHourRequestStartDay
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum QuietHourRequestEndDay
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EndpointHistoryResponseStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _14 = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EndpointHistoryResponseJobType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EndpointHistoryResponseProbeType
    {
        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SubjectAlternativeNameType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _100 = 100,

        _101 = 101,

        _999 = 999,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedScanJobPartsQueryJobType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedScanJobPartsQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DisplayScanJobPartStatus
    {
        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TemplateRetrievalResponseKeyRetention
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TemplateRetrievalResponseAllowedEnrollmentTypes
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TemplateEnrollmentFieldModelDataType
    {
        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TemplateMetadataFieldModelEnrollment
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedTemplateQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TemplateCollectionRetrievalResponseKeyRetention
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TemplateCollectionRetrievalResponseAllowedEnrollmentTypes
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TemplateEnrollmentFieldModel2DataType
    {
        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TemplateUpdateRequestKeyRetention
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TemplateUpdateRequestAllowedEnrollmentTypes
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TemplateEnrollmentFieldModel3DataType
    {
        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TemplateMetadataFieldModel2Enrollment
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedSSHUserQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateRequestDetailsModelState
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedLegacyDeniedRequestQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CertificateRequestModelState
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PagedCertificateRequestQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ParameterDefinitionResponseParameterType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ParameterDefinitionResponseControlType
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WorkflowDefinitionQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WorkflowStepSchemaQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WorkflowTypeQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstanceResponseStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WorkflowInstanceQuerySortAscending
    {
        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InstanceQueryResponseStatus
    {
        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int? StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
